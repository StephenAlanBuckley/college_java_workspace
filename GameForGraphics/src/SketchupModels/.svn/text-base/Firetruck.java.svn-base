//Header


package SketchupModels;
import javax.media.opengl.GL2;
import javax.media.opengl.glu.GLU;
import Buildings.Building;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import com.jogamp.opengl.util.GLBuffers;
import java.util.HashMap;
import java.util.Map;
public class Firetruck
{
private int displayList = -1;
private Map<String, com.jogamp.opengl.util.texture.Texture> imageMap = new HashMap<String, com.jogamp.opengl.util.texture.Texture>(); // map of ID's to textures
public Firetruck(GL2 gl, GLU glu) {
    generate(gl, glu);
}
public void draw(GL2 gl, GLU glu) {
  gl.glCallList(displayList);
}
private com.jogamp.opengl.util.texture.Texture ID5;
private com.jogamp.opengl.util.texture.Texture ID90;
private void generate(GL2 gl, GLU glu){
ID5 = Building.setupTexture(gl, "firetruck/texture0.JPG", "SketchupModels");
ID90 = Building.setupTexture(gl, "firetruck/texture1.JPG", "SketchupModels");

displayList = gl.glGenLists(1);
gl.glNewList(displayList, GL2.GL_COMPILE);
  gl.glPushAttrib(GL2.GL_POLYGON_BIT);
    gl.glFrontFace(GL2.GL_CCW);
    gl.glCullFace(GL2.GL_BACK);
    gl.glEnable(GL2.GL_CULL_FACE);
gl.glPushMatrix();
gl.glScaled(0.08333333333333333, 0.08333333333333333, 0.08333333333333333);
gl.glRotatef(-90,1,0,0);
ID2(gl);
ID15(gl);
ID23(gl);
ID31(gl);
ID39(gl);
ID47(gl);
ID55(gl);
ID61(gl);
ID67(gl);
ID73(gl);
ID79(gl);
ID87(gl);
ID100(gl);
ID106(gl);
ID114(gl);
ID120(gl);
ID126(gl);
ID134(gl);
ID142(gl);
ID150(gl);
ID158(gl);
ID166(gl);
ID174(gl);
ID182(gl);
ID188(gl);
ID194(gl);
ID202(gl);
ID210(gl);
ID218(gl);
ID226(gl);
ID234(gl);
ID240(gl);
ID248(gl);
ID256(gl);
ID264(gl);
ID272(gl);
ID280(gl);
ID288(gl);
ID294(gl);
ID302(gl);
ID310(gl);
ID318(gl);
ID326(gl);
ID334(gl);
ID342(gl);
ID350(gl);
ID358(gl);
ID366(gl);
ID374(gl);
ID380(gl);
ID388(gl);
ID396(gl);
ID402(gl);
ID410(gl);
ID416(gl);
ID424(gl);
ID432(gl);
ID440(gl);
ID448(gl);
ID456(gl);
ID462(gl);
ID470(gl);
ID478(gl);
ID486(gl);
ID494(gl);
ID502(gl);
ID510(gl);
ID516(gl);
ID524(gl);
ID532(gl);
ID540(gl);
ID548(gl);
ID556(gl);
ID564(gl);
ID572(gl);
ID580(gl);
ID588(gl);
ID596(gl);
ID604(gl);
ID612(gl);
ID620(gl);
ID626(gl);
ID634(gl);
ID642(gl);
ID650(gl);
ID658(gl);
ID666(gl);
ID674(gl);
ID682(gl);
ID690(gl);
ID696(gl);
ID704(gl);
ID712(gl);
ID720(gl);
ID728(gl);
ID736(gl);
ID744(gl);
ID752(gl);
ID758(gl);
ID764(gl);
ID772(gl);
ID778(gl);
ID786(gl);
ID794(gl);
ID802(gl);
ID810(gl);
ID816(gl);
ID822(gl);
ID828(gl);
ID834(gl);
ID840(gl);
ID846(gl);
ID854(gl);
ID862(gl);
ID870(gl);
ID878(gl);
ID886(gl);
ID894(gl);
ID902(gl);
ID908(gl);
ID914(gl);
ID920(gl);
ID926(gl);
ID932(gl);
ID938(gl);
ID944(gl);
ID950(gl);
ID956(gl);
ID962(gl);
ID968(gl);
ID974(gl);
ID982(gl);
ID990(gl);
       gl.glPopMatrix();
   gl.glPopAttrib();
gl.glEndList();
}
//Trailer


private void ID2(GL2 gl){
double[] positionsArray = FiretruckCoordinates.getPositionsArray();
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = FiretruckCoordinates.getTexCoordinatesArray();
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,6,12,12,13,13,14,14,15,15,16,16,17,8,18,7,19,17,20,6,21,18,22,7,23,8,24,19,25,20,26,21,27,20,28,22,29,6,30,13,31,18,32,13,33,12,34,23,35,21,36,24,37,25,38,26,39,27,40,28,16,29,41,30,42,31,43,8,44,17,45,19,46,32,47,33,48,34,49,20,50,19,51,22,52,21,53,22,54,35,55,36,56,37,57,38,58,23,59,12,60,39,61,40,62,41,63,42,64,24,65,43,66,25,67,21,68,44,69,24,70,12,71,45,72,46,73,47,74,48,75,49,76,31,77,30,78,50,79,51,80,29,81,31,82,52,83,53,84,54,85,55,86,56,87,57,88,56,87,55,86,58,89,56,87,58,89,59,90,59,90,58,89,60,91,61,92,62,93,63,94,21,95,35,96,44,97,64,98,65,99,66,100,67,101,68,102,69,103,12,104,70,105,39,106,71,107,72,108,73,109,74,110,75,111,76,112,25,113,43,114,77,115,75,116,78,117,79,118,80,119,81,120,82,121,81,120,80,119,83,122,84,123,85,124,86,125,87,126,88,127,89,128,88,127,87,126,90,129,91,130,92,131,93,132,94,133,31,134,95,135,96,136,97,137,98,138,99,139,100,140,101,141,100,140,99,139,102,142,102,142,99,139,103,143,103,143,104,144,105,145,104,144,103,143,99,139,106,146,61,147,63,148,78,149,61,150,106,151,107,152,108,153,109,154,108,153,107,152,110,155,111,102,112,156,113,157,111,158,114,159,112,160,115,161,116,162,117,163,116,162,115,161,118,164,76,165,75,166,79,167,119,168,74,169,76,170,74,169,119,168,120,171,43,172,121,173,77,174,79,175,78,176,106,177,122,178,123,179,124,180,125,181,126,182,127,183,128,184,129,185,130,186,129,185,128,184,131,187,132,188,133,189,134,190,133,189,132,188,135,191,135,191,132,188,136,192,137,193,138,194,139,195,91,196,140,197,92,198,141,199,142,200,143,201,142,200,141,199,144,202,94,203,95,204,145,205,146,206,94,207,147,208,148,209,149,210,150,211,151,212,105,213,104,214,105,213,151,212,101,215,105,213,101,215,100,216,152,217,153,218,154,219,153,218,152,217,155,220,156,221,157,222,158,223,157,222,156,221,159,224,160,225,161,226,162,227,161,226,160,225,163,228,164,229,165,230,166,231,167,232,168,233,169,234,168,233,167,232,170,235,109,236,171,237,107,238,172,239,173,240,174,241,173,240,172,239,175,242,117,243,176,244,177,245,114,246,124,247,112,248,178,249,117,250,177,251,117,250,178,249,179,252,117,250,179,252,115,253,180,254,181,255,182,256,181,255,180,254,183,257,181,255,183,257,184,258,181,255,184,258,185,259,186,260,187,261,188,262,187,261,186,260,189,263,187,264,190,265,191,266,190,265,187,264,189,267,192,268,193,269,194,270,193,269,192,268,195,271,120,272,196,273,74,274,197,275,188,276,198,277,188,276,197,275,186,278,199,279,200,280,201,281,114,282,122,283,124,284,202,285,203,286,204,287,205,288,206,289,207,290,208,291,209,292,210,293,211,294,212,295,213,296,214,297,215,298,216,299,217,300,218,301,219,302,218,301,217,300,220,303,145,304,95,305,221,306,94,307,145,308,222,309,223,310,146,311,147,312,94,313,222,314,147,315,224,316,146,317,223,318,225,319,224,320,226,321,227,322,228,323,229,324,230,325,231,326,232,327,233,328,234,329,235,330,236,331,237,332,238,333,239,334,240,335,241,336,242,337,243,338,244,339,245,340,246,341,247,342,170,343,248,344,249,345,248,344,170,343,167,346,170,347,250,348,168,349,251,350,252,351,253,352,254,353,177,354,176,355,177,354,254,353,255,356,176,357,199,358,201,359,178,360,177,361,256,362,257,363,179,364,178,365,258,366,259,367,260,368,261,369,262,370,263,371,264,372,265,373,266,374,265,373,264,372,267,375,267,375,264,372,268,376,269,377,270,378,271,379,272,380,273,381,274,382,273,381,272,380,275,383,276,384,277,385,278,386,277,385,276,384,279,387,280,388,281,389,282,390,120,391,206,392,196,393,283,394,284,395,285,396,286,397,287,398,288,399,287,398,286,397,289,400,290,401,291,402,292,403,291,402,290,401,293,404,294,405,295,406,82,407,295,406,294,405,296,408,297,409,298,410,299,411,207,412,206,413,120,414,300,415,301,416,302,417,301,416,300,415,303,418,304,419,305,420,306,421,307,422,308,423,309,424,214,425,310,426,215,427,310,426,214,425,311,428,311,428,214,425,312,429,313,430,214,431,216,432,214,431,313,430,314,433,214,431,314,433,315,434,316,435,317,436,318,437,145,438,221,439,319,440,222,441,145,442,319,443,320,444,321,445,322,446,323,447,324,448,325,449,226,450,224,451,223,452,326,453,327,454,328,455,329,456,330,457,331,458,332,459,333,460,334,461,335,462,336,463,337,464,338,465,339,466,340,467,341,468,342,469,343,470,342,469,341,468,344,471,344,471,341,468,345,472,346,473,347,474,162,475,242,476,244,477,348,478,349,479,243,480,242,481,350,482,351,483,352,484,351,483,350,482,353,485,353,485,350,482,354,486,355,487,356,488,357,489,248,490,358,491,249,492,358,491,248,490,359,493,359,493,248,490,360,494,248,495,167,496,361,497,201,498,254,499,176,500,254,499,201,498,255,501,362,502,363,503,364,504,365,505,366,506,367,507,368,508,369,509,370,510,315,511,371,512,372,513,371,512,315,511,373,514,374,515,375,516,376,517,375,516,374,515,377,518,378,519,379,520,380,521,379,520,378,519,381,522,379,520,381,522,382,523,379,520,382,523,383,524,384,525,385,526,386,527,387,528,388,529,389,530,390,531,391,532,392,533,282,534,281,535,393,536,393,536,394,537,395,538,394,537,393,536,281,535,396,539,397,540,398,541,399,542,400,543,401,544,402,545,403,546,404,547,295,548,405,549,82,550,406,551,407,552,131,553,407,552,406,551,408,554,409,555,410,556,411,557,282,558,393,559,412,560,413,561,414,562,415,563,414,562,413,561,416,564,414,562,416,564,417,565,418,566,419,567,420,568,421,569,422,570,423,571,424,572,425,573,426,574,312,575,427,576,311,577,315,578,314,579,373,580,428,581,429,582,430,583,431,584,432,585,433,586,221,587,434,588,319,589,222,590,319,591,435,592,436,593,324,594,323,595,437,596,320,597,322,598,438,599,439,600,440,601,226,602,223,603,441,604,442,605,226,606,443,607,444,608,445,609,446,610,447,611,448,612,449,613,448,612,447,611,450,614,361,615,167,616,451,617,452,618,453,619,454,620,453,619,452,618,455,621,456,622,457,623,458,624,459,625,460,626,461,627,462,628,442,629,463,630,464,631,465,632,466,633,467,634,468,635,469,636,470,637,471,638,472,639,471,638,470,637,473,640,474,641,475,642,476,643,477,644,478,645,479,646,248,647,480,648,481,649,480,648,248,647,482,650,482,650,248,647,483,651,360,652,484,653,359,654,484,653,360,652,485,655,248,656,361,657,486,658,255,659,201,660,487,661,488,662,489,663,490,664,367,665,366,666,491,667,492,668,493,669,494,670,492,671,494,672,495,673,496,674,430,675,497,676,429,677,497,678,430,679,498,680,499,681,500,682,499,681,498,680,501,683,502,684,503,685,504,686,505,687,506,688,507,689,508,690,509,691,510,692,511,693,512,694,513,695,512,694,511,693,514,696,515,697,395,698,394,699,395,698,515,697,516,700,517,701,518,702,519,703,518,702,517,701,520,704,395,705,521,706,393,707,396,708,522,709,397,710,522,709,396,708,523,711,524,712,525,713,526,714,527,715,403,716,402,717,528,718,529,719,530,720,531,721,532,722,533,723,534,724,535,725,536,726,406,727,131,728,537,729,538,730,539,731,540,732,541,733,542,734,543,735,544,736,545,737,546,738,426,739,425,740,547,741,548,742,549,743,550,744,551,745,451,746,552,747,451,746,551,745,553,748,554,749,555,750,556,751,555,750,554,749,557,752,555,750,557,752,558,753,559,754,560,755,561,756,562,757,563,758,564,759,565,760,566,761,567,762,566,761,565,760,568,763,434,764,569,765,319,766,319,767,569,768,435,769,438,770,570,771,571,772,572,773,573,774,574,775,437,776,322,777,575,778,576,779,320,780,437,781,438,782,577,783,439,784,577,783,438,782,578,785,443,786,226,787,441,788,463,789,442,790,443,791,579,792,580,793,581,794,582,795,583,796,584,797,583,796,582,795,585,798,586,799,587,800,588,801,589,802,590,803,591,804,361,805,451,806,553,807,592,808,593,809,594,810,595,811,596,812,597,813,598,814,599,815,600,816,601,817,602,818,603,819,604,820,605,821,606,822,607,823,608,824,609,825,608,824,607,823,610,826,611,827,612,828,613,829,614,830,615,831,616,832,615,831,614,830,617,833,617,833,614,830,618,834,615,831,617,833,619,835,615,831,619,835,620,836,621,837,622,838,623,839,622,838,621,837,624,840,622,838,624,840,625,841,624,840,621,837,626,842,626,842,621,837,627,843,628,844,629,845,630,846,629,845,628,844,631,847,632,848,633,849,634,850,635,851,636,852,637,853,638,854,639,855,640,856,641,857,642,858,643,859,644,860,645,861,646,862,483,863,647,864,482,865,480,866,648,867,481,868,648,867,480,866,649,869,248,870,650,871,483,872,650,871,248,870,651,873,652,874,653,875,654,876,655,877,656,878,657,879,658,880,248,881,486,882,659,883,660,884,661,885,662,886,663,887,664,888,506,889,665,890,666,891,665,890,506,889,667,892,667,892,506,889,505,893,668,894,669,895,670,896,671,897,430,898,496,899,672,900,673,901,674,902,675,903,676,904,677,905,507,906,666,907,678,908,666,907,507,906,506,909,505,910,678,911,679,912,678,911,505,910,507,913,680,914,681,915,682,916,683,917,684,918,685,919,686,920,687,921,688,922,689,923,690,924,691,925,690,924,689,923,692,926,690,924,692,926,693,927,694,928,695,929,684,930,696,931,697,932,698,933,523,934,699,935,522,936,700,937,523,938,396,939,701,940,702,941,703,4,527,942,704,943,403,944,705,945,529,946,528,947,706,948,707,949,708,950,709,951,710,952,711,953,534,954,712,955,535,956,713,957,714,958,715,959,714,958,716,960,715,959,716,960,714,958,717,961,718,962,538,963,540,964,540,965,539,966,719,967,720,968,721,969,722,970,721,969,720,968,723,971,724,972,725,973,726,974,724,975,727,976,725,977,728,978,548,979,550,980,729,981,730,982,731,983,732,984,733,985,734,986,735,987,736,988,737,989,434,990,738,991,569,992,435,993,569,994,739,995,438,996,571,997,740,998,741,999,742,1000,743,1001,744,1002,437,1003,575,1004,745,1005,746,1006,747,1007,748,1008,576,1009,437,1010,749,1011,577,1012,750,1013,577,1012,749,1011,751,1014,752,1015,438,1016,740,1017,438,1016,752,1015,578,1018,753,1019,754,1020,755,1021,756,1022,757,1023,754,1024,758,1025,759,1026,760,1027,759,1026,758,1025,761,1028,762,1029,763,1030,764,1031,763,1030,762,1029,765,1032,766,1033,767,1034,768,1035,767,1034,766,1033,769,1036,769,1036,766,1033,770,1037,771,1038,772,1039,773,1040,774,1041,775,1042,776,1043,777,1044,778,1045,779,1046,780,1047,781,1048,782,1049,783,1050,784,1051,785,1052,786,1053,787,1054,788,1055,787,1054,786,1053,789,1056,787,1054,789,1056,607,1057,787,1054,607,1057,609,1058,777,1059,682,1060,778,1061,790,1062,791,1063,792,1064,793,1065,789,1066,786,1067,774,1068,776,1069,791,1070,794,1071,795,1072,796,1073,797,1074,798,1075,799,1076,800,1077,801,1078,802,1079,803,1080,635,1081,637,1082,804,1083,805,1084,806,1085,807,1086,808,1087,809,1088,808,1087,807,1086,810,1089,808,1087,810,1089,811,1090,808,1087,811,1090,812,1091,813,1092,814,1093,815,1094,816,1095,817,1096,818,1097,819,1098,820,1099,821,1100,820,1099,819,1098,822,1101,823,1102,824,1103,825,1104,824,1103,823,1102,826,1105,827,1106,828,1107,829,1108,828,1107,827,1106,830,1109,831,1110,832,1111,833,1112,834,1113,835,1114,836,1115,651,1116,248,1117,658,1118,837,1119,650,1120,651,1121,650,1120,837,1119,483,1122,838,1123,839,1124,840,1125,841,1126,842,1127,843,1128,844,1129,656,1130,655,1131,845,1132,846,1133,847,1134,848,1135,849,1136,850,1137,851,1138,852,1139,853,1140,852,1139,851,1138,854,1141,855,1142,856,1143,857,1144,856,1143,855,1142,858,1145,859,1146,860,1147,861,1148,860,1147,859,1146,862,1149,863,1150,864,1151,865,1152,866,1153,867,1154,868,1155,678,1156,869,1157,679,1158,870,1159,871,1160,872,1161,683,1162,685,1163,873,1164,694,1165,684,1166,683,1167,874,1168,875,1169,876,1170,875,1169,874,1168,877,1171,878,1172,879,1173,880,1174,879,1173,878,1172,881,1175,882,1176,697,1177,696,1178,883,1179,884,1180,885,1181,886,1182,887,1183,888,1184,889,1185,538,1186,718,1187,890,1188,891,1189,892,1190,893,1191,704,1192,527,1193,529,1194,894,1195,895,1196,894,1195,529,1194,705,1197,896,1198,897,1199,898,1200,706,1201,899,1202,707,1203,900,1204,901,1205,902,1206,903,1207,904,1208,905,1209,904,1208,903,1207,901,1205,901,1205,903,1207,902,1206,906,1210,907,1211,908,1212,712,1213,909,1214,535,1215,910,1216,911,1217,912,1218,913,1219,914,1220,915,1221,914,1220,913,1219,916,1222,914,1220,916,1222,917,1223,918,1224,919,1225,920,1226,919,1225,918,1224,921,1227,921,1227,918,1224,922,1228,923,1229,924,1230,925,1231,924,1230,923,1229,926,1232,925,1231,924,1230,927,1233,924,1230,926,1232,928,1234,929,1235,930,1236,931,1237,712,1238,929,1239,909,1240,932,1241,933,1242,934,1243,724,1244,726,1245,935,1246,936,1247,937,1248,938,1249,939,1250,940,1251,941,1252,942,1253,943,1254,944,1255,945,1256,946,1257,947,1258,946,1257,945,1256,948,1259,434,1260,949,1261,738,1262,569,1263,738,1264,739,1265,740,1266,571,1267,950,1268,951,1269,952,1270,953,1271,954,1272,955,1273,956,1274,748,1275,437,1276,744,1277,957,1278,958,1279,959,1280,753,1281,755,1282,960,1283,961,1284,962,1285,572,1286,963,1287,750,1288,964,1289,750,1288,963,1287,749,1290,965,1291,751,1292,749,1293,966,1294,967,1295,968,1296,967,1295,966,1294,969,1297,753,1298,756,1299,754,1300,970,1301,971,1302,972,1303,973,1304,974,1305,975,1306,974,1305,973,1304,976,1307,974,1305,976,1307,977,1308,978,1309,979,1310,980,1311,979,1310,978,1309,981,1312,982,1313,983,1314,984,1315,985,1316,986,1317,987,1318,988,1319,989,1320,990,1321,991,1322,992,1323,993,1324,994,1325,995,1326,996,1327,997,1328,998,1329,999,1330,609,1331,1000,1332,1001,1333,787,1334,1001,1335,788,1336,1001,1335,787,1334,609,1337,1002,1338,1003,1339,1004,1340,1005,1341,1006,1342,1007,1343,1008,1344,1009,1345,1010,1346,1011,1347,1012,1348,1013,1349,1014,1350,1015,1351,1016,1352,1017,1353,1018,1354,1019,1355,1020,1356,1021,1357,1022,1358,1021,1357,1020,1356,1023,1359,1023,1359,1020,1356,1024,1360,1021,1357,1023,1359,1025,1361,1021,1357,1025,1361,1026,1362,1027,1363,1028,1364,1029,1365,1028,1364,1027,1363,1030,1366,1031,1367,1032,1368,1033,1369,1034,1370,1035,1371,1036,1372,1035,1371,1034,1370,1037,1373,1038,1374,1039,1375,1040,1376,1039,1375,1038,1374,1041,1377,1040,1376,1039,1375,1042,1378,813,1379,1043,1380,814,1381,1042,1382,1044,1383,1040,1384,1044,1383,1042,1382,1039,1385,1044,1383,1039,1385,1041,1386,1045,1387,1046,1388,1047,1389,1048,1390,1049,1391,1050,1392,822,1393,1051,1394,820,1395,1051,1394,822,1393,1052,1396,1053,1397,1054,1398,1055,1399,1056,1400,1057,1401,1058,1402,1057,1401,1056,1400,1059,1403,1060,1404,1061,1405,1062,1406,1063,1407,1064,1408,1065,1409,831,1410,1066,1411,832,1412,1066,1411,831,1410,1067,1413,1068,1414,1069,1415,1070,1416,651,1417,658,1418,1071,1419,1049,1420,1072,1421,1073,1422,1074,1423,1075,1424,1076,1425,1077,1426,1078,1427,1079,1428,1080,1429,1081,1430,1082,1431,845,1432,847,1433,1083,1434,1084,1435,1085,1436,1086,1437,1087,1438,1088,1439,1089,1440,851,1441,1090,1442,854,1443,1091,1444,851,1445,853,1446,1092,1447,1093,1448,1094,1449,1093,1448,1092,1447,1095,1450,1096,1451,1097,1452,1098,1453,1097,1452,1096,1451,1099,1454,724,1455,935,1456,1100,1457,1101,1458,1102,1459,1103,1460,1104,1461,1105,1462,1106,1463,1107,1464,1108,1465,1109,1466,1108,1465,1107,1464,1110,1467,1111,1468,1112,1469,1113,1470,1114,1471,1115,1472,1116,1473,1115,1472,1114,1471,1117,1474,1117,1474,1118,1475,1115,1472,870,1476,872,1477,1119,1478,1120,1479,1121,1480,1122,1481,1123,1482,1124,1483,1125,1484,1126,1485,1127,1486,1128,1487,1127,1486,1126,1485,1129,1488,1129,1488,1126,1485,1130,1489,1131,1490,1132,1491,1133,1492,1000,1493,1134,1494,1001,1495,1135,1496,1136,1497,1137,1498,1136,1497,1135,1496,1138,1499,1136,1497,1138,1499,1139,1500,889,1501,718,1502,1140,1503,1141,1504,1142,1505,1143,1506,1144,1507,1145,1508,399,1509,399,1510,1146,1511,1147,1512,893,1513,1148,1514,704,1515,1149,1516,894,1517,705,1518,894,1517,1149,1516,895,1519,895,1520,1150,1521,529,1522,896,1523,1151,1524,897,1525,1151,1524,896,1523,1152,1526,1153,1527,1154,1528,1155,1529,1154,1528,1153,1527,1156,1530,1154,1528,1156,1530,1157,1531,1158,1532,1159,1533,1160,1534,1161,1535,1162,1536,1163,1537,1164,1538,1165,1539,1166,1540,1167,1541,1168,1542,1169,1543,1170,1544,1171,1545,912,1546,912,1546,1172,1547,910,1548,1172,1547,912,1546,1171,1545,1173,1549,1174,1550,1175,1551,1176,1552,1177,1553,1178,1554,1177,1553,1176,1552,1179,1555,1180,1556,1181,1557,1182,1558,1183,1559,1184,1560,1185,1561,1184,1560,1183,1559,1186,1562,1186,1562,1183,1559,1187,1563,1187,1563,1183,1559,1188,1564,1189,1565,1190,1566,1191,1567,1190,1566,1189,1565,1192,1568,930,1569,1048,1570,931,1571,929,1572,1193,1573,930,1574,1193,1573,929,1572,712,1575,1194,1576,1195,1577,1196,1578,1197,1579,1198,1580,1199,1581,1200,1582,937,1583,936,1584,1201,1585,1202,1586,1203,1587,434,1588,1204,1589,949,1590,949,1591,1205,1592,738,1593,738,1594,1206,1595,739,1596,1207,1597,1208,1598,967,1599,955,1600,1209,1601,956,1602,1210,1603,954,1604,956,1605,1211,1606,960,1607,1212,1608,1211,1609,753,1610,960,1611,1213,1612,1214,1613,1215,1614,1216,1615,968,1616,1217,1617,968,1616,1216,1615,1218,1618,1219,1619,749,1620,963,1621,1220,1622,1213,1623,1215,1624,965,1625,749,1626,1219,1627,967,1628,1221,1629,968,1630,1222,1631,756,1632,753,1633,1223,1634,1224,1635,1225,1636,1224,1635,1223,1634,1226,1637,1227,1638,1228,1639,1229,1640,1228,1639,1227,1638,1230,1641,1231,1642,1232,1643,1233,1644,1234,1645,1235,1646,1236,1647,1237,1648,1238,1649,1239,1650,1240,1651,1241,1652,1242,1653,1241,1652,1240,1651,1243,1654,1244,1655,1245,1656,1246,1657,1245,1656,1244,1655,1247,1658,1248,1659,1249,1660,1250,1661,1251,1662,1252,1663,1253,1664,1134,1665,1254,1666,1255,1667,1254,1666,1134,1665,1000,1668,1256,1669,1257,1670,1258,1671,1259,1672,1260,1673,1261,1674,1262,1675,1263,1676,1264,1677,1265,1678,1266,1679,1267,1680,1268,1681,1269,1682,1270,1683,1271,1684,1272,1685,1273,1686,1274,1687,1275,1688,1276,1689,1275,1688,1274,1687,1277,1690,1278,1691,1279,1692,1280,1693,1281,1694,1282,1695,1272,1696,1283,1697,1284,1698,1285,1699,1286,1700,1287,1701,1288,1702,1287,1701,1286,1700,1289,1703,1287,1701,1289,1703,1290,1704,1289,1703,1286,1700,1291,1705,1291,1705,1286,1700,1292,1706,1293,1707,1294,1708,1295,1709,1296,1710,1297,1711,1298,1712,1297,1711,1296,1710,1299,1713,1299,1713,1296,1710,1300,1714,1299,1713,1300,1714,1301,1715,1302,1716,1303,1717,1304,1718,1305,1719,1306,1720,1307,1721,931,1722,1048,1723,1050,1724,1050,1725,1049,1726,1073,1727,1308,1728,1052,1729,1309,1730,1052,1729,1308,1728,1051,1731,1310,1732,1311,1733,1312,1734,1311,1733,1310,1732,1313,1735,1314,1736,1315,1737,1316,1738,1317,1739,1318,1740,1319,1741,1320,1742,1321,1743,1322,1744,1066,1745,1067,1746,1323,1747,1066,1748,1324,1749,832,1750,1325,1751,1326,1752,1327,1753,1071,1754,658,1755,1328,1756,1073,1757,1072,1758,1329,1759,1330,1760,1075,1761,1074,1762,1080,1763,1082,1764,1331,1765,1332,1766,1080,1767,1333,1768,1334,1769,1335,1770,1336,1771,1337,1772,1338,1773,1339,1774,1340,1775,1341,1776,1342,1777,854,1778,1343,1779,1344,1780,1343,1779,854,1778,1090,1781,1204,1782,1345,1783,1346,1784,1347,1785,851,1786,1091,1787,1348,1788,1349,1789,1350,1790,1351,1791,724,1792,1100,1793,1352,1794,1353,1795,1354,1796,1355,1797,1356,1798,1357,1799,1120,1800,1358,1801,1359,1802,1360,1803,1361,1804,1362,1805,1363,1806,1364,1807,1365,1808,1120,1809,1359,1810,1121,1811,1366,1812,1367,1813,1368,1814,1367,1813,1369,1815,1370,1816,1369,1815,1367,1813,1366,1812,1140,1817,1371,1818,889,1819,1372,1820,1144,1821,1373,1822,1374,1823,1375,1824,1376,1825,1377,1826,1145,1827,1144,1828,1145,1829,1378,1830,399,1831,1378,1832,1146,1833,399,1834,1379,1835,1149,1836,705,1837,1380,1838,1148,1839,893,1840,1381,1841,1382,1842,1383,1843,1384,1844,1385,1845,1386,1846,1387,1847,1388,1848,1389,1849,1390,1850,1391,1851,1392,1852,1393,1853,1152,1854,896,1855,1152,1854,1393,1853,1394,1856,1151,1857,1152,1858,1394,1859,1395,1860,1396,1861,1397,1862,1398,1863,1399,1864,1400,1865,1399,1864,1398,1863,1401,1866,1402,1867,1403,1868,1404,1869,1405,1870,910,1871,1172,1872,1170,1873,912,1874,1406,1875,1170,1876,1407,1877,1171,1878,1407,1877,1170,1876,1408,1879,1409,1880,1410,1881,1411,1882,1412,1883,1413,1884,1414,1885,1415,1886,1416,1887,1417,1888,1418,1889,1413,1890,1419,1891,1413,1890,1418,1889,1414,1892,1420,1893,1421,1894,1422,1895,1423,1896,1424,1897,1425,1898,1424,1897,1423,1896,1426,1899,1427,1900,1428,1901,724,1902,1197,1903,1199,1904,1429,1905,1203,1906,1430,1907,1091,1908,1430,1907,1203,1906,1431,1909,1431,1909,1203,1906,1202,1910,1204,1911,1346,1912,949,1913,738,1914,1205,1915,1432,1916,1433,1917,1434,1918,1435,1919,738,1920,1432,1921,1206,1922,1208,1923,1436,1924,967,1925,956,1926,1209,1927,1437,1928,1210,1929,956,1930,1438,1931,1439,1932,1440,1933,1441,1934,1442,1935,753,1936,1211,1937,1437,1938,1209,1939,1443,1940,968,1941,1444,1942,1217,1943,1445,1944,1217,1945,1446,1946,1219,1947,963,1948,1447,1949,1448,1950,1449,1951,1450,1952,1450,1953,1451,1954,1452,1955,967,1956,1436,1957,1221,1958,968,1959,1221,1960,1453,1961,1454,1962,1455,1963,1456,1964,1457,1965,1458,1966,1459,1967,1458,1966,1457,1965,1460,1968,1460,1968,1457,1965,1461,1969,1462,1970,1463,1971,1464,1972,1463,1971,1462,1970,1465,1973,1466,1974,1467,1975,1468,1976,1469,1977,1470,1978,1471,1979,1470,1978,1469,1977,1472,1980,1473,1981,1474,1982,1475,1983,1474,1982,1473,1981,1476,1984,1431,1985,1477,1986,1430,1987,1477,1986,1431,1985,1478,1988,1479,1989,1480,1990,1481,1991,1482,1992,1483,1993,1484,1994,1485,1995,1486,1996,1487,1997,1488,1998,1489,1999,1490,2000,1491,2001,1492,2002,1493,2003,1268,2004,1270,2005,1494,2006,1495,2007,1496,2008,1497,2009,1271,1684,1273,2010,1498,2011,1499,2012,1500,2013,1501,2014,1502,2015,1279,2016,1503,2017,1279,2016,1502,2015,1280,2018,1280,2018,1502,2015,1504,2019,1504,2019,1502,2015,1505,2020,1506,2021,1507,2022,1508,2023,1509,2024,1510,2025,1511,2026,1512,2027,1513,2028,1514,2029,1515,2030,1504,2031,1505,2032,1504,2031,1515,2030,1516,2033,1517,2034,1518,2035,1513,2036,1293,2037,1295,2038,1519,2039,1520,2040,1521,2041,1522,2042,1448,2043,1523,2044,1524,2045,1525,2046,1524,2047,1526,2048,1527,2049,1528,2050,1529,2051,1304,2052,1303,2053,1530,2054,1531,2055,1532,2056,1533,2057,1534,2058,1535,2059,1536,2060,1537,2061,1538,2062,1539,2063,1540,2064,1541,2065,1542,2066,1541,2065,1540,2064,1543,2067,1541,2065,1543,2067,1544,2068,1545,2069,1546,2070,1547,2071,1546,2070,1545,2069,1548,2072,1549,2073,1550,2074,1551,2075,1550,2074,1549,2073,1552,2076,1553,2077,1554,2078,1555,2079,1554,2078,1553,2077,1556,2080,1556,2080,1553,2077,1557,2081,1558,2082,1559,2083,1560,2084,1559,2083,1558,2082,1561,2085,1562,2086,1563,2087,1564,2088,1325,2089,1330,2090,1326,2091,1565,2092,1071,2093,1328,2094,1071,2093,1565,2092,1566,2095,1371,2096,1527,2097,889,2098,1333,2099,1080,2100,1331,2101,1336,2102,1335,2103,1567,2104,1568,2105,1569,2106,1570,2107,1342,2108,1341,2109,1571,2110,1343,2111,1572,2112,1344,2113,1572,2112,1343,2111,1090,2114,1345,2115,1573,2116,1346,2117,1430,2118,1347,2119,1091,2120,1574,2121,1575,2122,1576,2123,1577,2124,1578,2125,1579,2126,1580,2127,724,2128,1351,2129,1353,2130,1581,2131,1354,2132,1582,2133,1583,2134,1584,2135,1585,2136,1586,2137,1587,2138,1588,2139,1589,2140,1590,2141,1591,2142,1592,2143,1593,2144,1594,2145,1595,2146,1596,2147,1597,2148,1372,2149,1373,2150,1372,2151,1377,2152,1144,2153,1527,2154,1529,2155,889,2156,1528,2157,1373,2158,1529,2159,1598,2160,1599,2161,1600,2162,1600,2163,1601,2164,1380,2165,1379,2166,1602,2167,1149,2168,1602,2167,1379,2166,1603,2169,1603,2169,1379,2166,1604,2170,1601,2171,1148,2172,1380,2173,1605,2174,1606,2175,1607,2176,1608,2177,1609,2178,1610,2179,1611,2180,1612,2181,1613,2182,1614,2183,1615,2184,1616,2185,1617,2186,1394,2187,1393,2188,1394,2187,1617,2186,1618,2189,1394,2187,1618,2189,1151,2190,1619,2191,1620,2192,1621,2193,1620,2192,1619,2191,1622,2194,1622,2194,1619,2191,1623,2195,1623,2195,1619,2191,1624,2196,1625,2197,1626,2198,1627,2199,1628,2200,1629,2201,1630,2202,1631,2203,1632,2204,1633,2205,1634,2206,1635,2207,1636,2208,1635,2207,1634,2206,1637,2209,1638,2210,1639,2211,1640,2212,1641,2213,1642,2214,1643,2215,1644,2216,1645,2217,1646,2218,1645,2217,1644,2216,1647,2219,1648,2220,1649,2221,1639,2222,1505,2223,1412,2224,1414,2225,1415,2226,1650,2227,1416,2228,1651,2229,1652,2230,1653,2231,1427,2232,724,2233,1580,2234,1654,2235,1655,2236,1656,2237,1657,2238,1658,2239,1659,2240,1660,2241,1661,2242,1662,2243,1436,2244,1663,2245,1221,2246,1438,2247,956,2248,1437,2249,1664,2250,1484,2251,1439,2252,1484,2253,1440,2254,1439,2255,1484,2256,1665,2257,1440,2258,1666,2259,1449,2260,1667,2261,1217,2262,1444,2263,1668,2264,968,2265,1669,2266,1444,2267,1446,2268,1217,2269,1668,2270,1451,2271,1670,2272,1671,2273,1448,2274,1450,2275,1672,2276,1667,2277,1449,2278,1448,2279,1452,2280,1451,2281,1671,2282,1450,2283,1452,2284,1672,2285,1673,2286,1674,2287,1675,2288,968,2289,1453,2290,1676,2291,1677,2292,1678,2293,1679,2294,1680,2295,1681,2296,1682,2297,1683,2298,1684,2299,1685,2300,1684,2299,1683,2298,1686,2301,1686,2301,1683,2298,1687,2302,1688,2303,1689,2304,1690,2305,1672,2306,1691,2307,1523,2308,1692,2309,1693,2310,1694,2311,1695,2312,1696,2313,1697,2314,1698,2315,1699,2316,1700,2317,1699,2316,1698,2315,1701,2318,1702,2319,1703,2320,1704,2321,1703,2320,1702,2319,1705,2322,1706,2323,1707,2324,1708,2325,1709,2326,1710,2327,1711,2328,1712,2329,1482,2330,1484,2331,1713,2332,1482,2333,1712,2334,1714,2335,1715,2336,1716,2337,1717,2338,1718,2339,1719,2340,1720,2341,1721,2342,1722,2343,1723,2344,1724,2345,1725,2346,1726,2347,1727,2348,1728,2349,1729,2350,1730,2351,1731,2352,1638,2353,1648,2354,1639,2355,1412,2356,1502,2357,1503,2358,1502,2357,1412,2356,1505,2359,1517,2360,1732,2361,1518,2362,1733,2363,1734,2364,1735,2365,1736,2366,1737,2367,1738,2368,1448,2369,1672,2370,1523,2371,1739,2372,1740,2373,1741,2374,1740,2373,1739,2372,1742,2375,1526,2376,1524,2377,1743,2378,1528,2379,1597,2380,1373,2381,1651,2382,1304,2383,1530,2384,1531,2385,1744,2386,1532,2387,1745,2388,1746,2389,1747,2390,1532,2391,1744,2392,1746,2393,1748,2394,1749,2395,1750,2396,1751,2397,1752,2398,1753,2399,1754,2400,1755,2401,1756,2402,1757,2403,1758,2404,1759,2405,1760,2406,1761,2407,1762,2408,1763,2409,1569,2410,1568,2411,1764,2412,1765,2413,1766,2414,1767,2415,1768,2416,1769,2417,1770,2418,1572,2419,1090,2420,1346,2421,1573,2422,1771,2423,1772,2424,1773,2425,1774,2426,1775,2427,1776,2428,1777,2429,1574,2430,1778,2431,1575,2432,1779,2433,1780,2434,1781,2435,1577,2436,1579,2437,1782,2438,1783,2439,1354,2440,1581,2441,1784,2442,1785,2443,1786,2444,1787,2445,1788,2446,1789,2141,1771,2447,1573,2448,1790,2449,1743,2450,1599,2451,1598,2452,1599,2453,1601,2454,1600,2455,1791,2456,1602,2457,1603,2458,1602,2459,1792,2460,1149,2461,1793,2462,1604,2463,1379,2464,1604,2463,1793,2462,1794,2465,1605,2466,1795,2467,1606,2468,1796,2469,1797,2470,1798,2471,1799,2472,1800,2473,1801,2474,1802,2475,1770,2476,1803,2477,1770,2476,1802,2475,1572,2478,1804,2479,1805,2480,1806,2481,1807,2482,1808,2483,1809,2484,1810,2485,1811,2486,1812,2487,1648,2488,1813,2489,1649,2490,1651,2491,1530,2492,1652,2493,1758,2494,1814,2495,1759,2496,1815,2497,1816,2498,1817,2499,1675,2500,1658,2501,1657,2502,1773,2503,1818,2504,1774,2505,1746,2506,1819,2507,1666,2508,1712,2509,1484,2510,1664,2511,1747,2512,1666,2513,1667,2514,1668,2515,1444,2516,1820,2517,968,2518,1821,2519,1669,2520,1822,2521,1823,2522,1824,2523,1825,2524,1670,2525,1826,2526,1671,2527,1670,2528,1825,2529,1827,2530,1452,2531,1671,2532,1672,2533,1452,2534,1691,2535,1828,2536,1829,2537,1830,2538,1673,2539,1675,2540,1657,2541,968,2542,1676,2543,1831,2544,1832,2545,1677,2546,1679,2547,1677,2546,1832,2545,1833,2548,1677,2546,1833,2548,1834,2549,1835,2550,1836,2551,1837,2552,1838,2553,1839,2554,1840,2555,1841,2556,1842,2557,1843,2558,1844,2559,1845,2560,1846,2561,1847,2562,1848,2563,1849,2564,1848,2563,1847,2562,1850,2565,1848,2563,1850,2565,1851,2566,1852,2567,1853,2568,1854,2569,1855,2570,1856,2571,1857,2572,1856,2571,1855,2570,1858,2573,1700,2574,1859,2575,1860,2576,1859,2575,1700,2574,1699,2577,1859,2575,1699,2577,1861,2578,1862,2579,1863,2580,1864,2581,1865,2582,1866,2583,1867,2584,1868,2585,1869,2586,1870,2587,1871,2588,1872,2589,1873,2590,1872,2589,1871,2588,1874,2591,1875,2592,1876,2593,1877,2594,1524,2595,1878,2596,1743,2597,1746,2598,1666,2599,1747,2600,1744,2601,1819,2602,1746,2603,1879,2604,1880,2605,1881,2606,1882,2607,1883,2608,1884,2609,1885,2610,1886,2611,1887,2612,1888,2613,1889,2614,1890,2615,1891,2616,1892,2617,1893,2618,1894,2619,1895,2620,1896,2621,1897,2622,1898,2623,1899,2624,1900,2625,1901,2626,1902,2627,1903,2628,1904,2629,1905,2630,1906,2631,1907,2632,1908,2633,1909,2634,1354,2635,1783,2636,1910,2637,1911,2638,1912,2639,1911,2638,1910,2637,1913,2640,1914,2641,1915,2642,1916,2643,1743,2644,1878,2645,1599,2646,1917,2647,1918,2648,1919,2649,1918,2648,1917,2647,1920,2650,1921,2651,1922,2652,1923,2653,1922,2652,1921,2651,1924,2654,1917,2655,1925,2656,1920,2657,1926,2658,1927,2659,1928,2660,1927,2659,1926,2658,1929,2661,1929,2661,1926,2658,1930,2662,1930,2662,1926,2658,1931,2663,1932,2664,1933,2665,1934,2666,1935,2667,1936,2668,1937,2669,1860,2670,1803,2671,1770,2672,1938,2673,1939,2674,1940,2675,1941,2676,1942,2677,1943,2678,1942,2677,1941,2676,1944,2679,1945,2680,1946,2681,1947,2682,1948,2683,1949,2684,1950,2685,1951,2686,1822,2687,1952,2688,1825,2689,1826,2690,1953,2691,968,2692,1831,2693,1821,2694,1954,2695,1955,2696,1956,2697,1952,2698,1822,2699,1824,2700,1827,2701,1671,2702,1825,2703,1691,2704,1452,2705,1827,2706,1957,2707,1828,2708,1830,2709,1676,2710,1958,2711,1831,2712,1833,2713,1832,2714,1959,2715,1960,2716,1961,2717,1962,2718,1963,2719,1964,2720,1965,2721,1966,2722,1967,2723,1968,2724,1969,2725,1970,2726,1971,2727,1970,2726,1969,2725,1972,2728,1973,2729,1974,2730,1975,2731,1974,2730,1973,2729,1976,2732,1977,2733,1978,2734,1979,2735,1960,2736,1980,2737,1961,2738,1980,2737,1960,2736,1981,2739,1982,2740,1983,2741,1984,2742,1859,2743,1861,2744,1985,2745,1827,2746,1986,2747,1987,2748,1700,2749,1860,2750,1988,2751,1989,2752,1990,2753,1865,2754,1865,2755,1991,2756,1866,2757,1992,2758,1993,2759,1994,2760,1995,2761,1996,2762,1997,2763,1891,2764,1893,2765,1998,2766,1999,2767,2000,2768,2001,2769,2002,2770,1832,2771,1911,2772,1832,2771,2002,2770,1959,2773,1959,2773,2002,2770,2003,2774,2002,2775,1911,2776,1913,2777,2004,2778,2005,2779,2006,2780,2007,2781,2008,2782,2009,2783,1960,2784,1962,2785,1918,2786,2010,2787,2011,2788,2012,2789,2011,2788,2010,2787,2013,2790,1918,2791,2014,2792,1919,2793,2015,2794,2016,2795,2017,2796,2016,2795,2015,2794,2018,2797,1987,2798,1933,2799,1932,2800,1933,2801,2019,2802,1934,2803,2019,2804,2020,2805,1934,2806,1860,2807,1770,2808,1988,2809,2021,2810,2022,2811,2023,2812,2024,2813,1951,2814,1952,2815,1825,2816,1953,2817,2025,2818,1821,2819,1831,2820,2026,2821,1956,2822,1955,2823,2027,2824,2028,2825,2029,2826,2030,2827,1827,2828,1825,2829,1986,2830,2031,2831,2032,2832,2033,2833,2034,2834,2035,2835,2036,2836,2036,2837,2035,2838,2037,2839,1958,2840,2038,2841,1831,2842,1918,2843,1962,2844,2014,2845,2039,2846,2040,2847,2041,2848,2040,2847,2039,2846,2042,2849,2043,2850,2044,2851,2045,2852,2046,2853,2047,2854,2048,2855,2049,2856,2050,2857,2051,2858,2052,2859,2053,2860,2054,2861,2055,2862,2056,2863,2057,2864,2056,2863,2055,2862,2058,2865,1987,2866,1986,2867,1933,2868,2059,2869,2060,2870,2061,2871,1990,2872,1991,2873,1865,2874,2062,2875,2063,2876,2064,2877,2065,2878,2066,2879,2067,2880,1998,2881,1893,2882,2068,2883,2069,2884,2070,2885,2071,2886,2072,2887,2007,2888,2009,2889,2004,2890,2006,2891,2073,2892,2074,2893,2075,2894,2076,2895,2077,2896,2078,2897,2079,2898,2080,2899,2081,2900,2082,2901,2019,2902,2083,2903,2020,2904,2084,2905,2085,2906,2086,2907,2023,2908,2022,2909,2087,2910,2088,2911,2089,2912,2090,2913,1986,2914,1825,2915,2025,2916,2026,2917,1831,2918,2091,2919,2092,2920,2093,2921,2094,2922,2095,2923,2092,2924,2094,2925,2096,2926,2097,2927,2098,2928,2032,2929,2099,2930,2033,2931,2100,2932,2101,2933,2102,2934,2038,2935,2103,2936,1831,2937,2104,2938,2105,2939,2106,2940,2105,2939,2104,2938,2107,2941,2108,2942,2109,2943,2110,2944,2111,2945,2112,2946,2113,2947,2114,2948,2115,2949,2116,2950,2117,2951,2118,2952,2119,2953,2061,2954,2060,2955,2120,2956,2121,2957,2122,2958,2123,2959,2124,2960,2125,2961,2126,2962,2127,2963,2128,2964,2129,2965,2130,2966,2131,2967,2132,2968,2133,2969,2134,2970,2135,2971,2084,2972,2086,2973,2136,2974,2137,2975,2007,2976,2072,2977,2004,2978,2073,2979,2138,2980,2139,2981,2140,2982,2141,2983,2142,2984,2143,2985,2144,2986,2145,2987,2146,2988,2147,2989,2148,2990,2149,2991,2150,2992,2151,2993,2007,2994,2137,2995,2152,2996,2153,2997,2154,2998,2155,2999,2156,3000,2157,3001,1831,3002,2158,3003,2091,3004,2159,3005,2160,3006,2161,3007,2098,3008,2097,3009,2162,3010,2032,3011,2163,3012,2099,3013,2100,3014,2164,3015,2101,3016,2165,3017,2166,3018,2167,3019,2168,3020,2169,3021,2170,3022,2171,3023,2172,3024,2173,3025,2174,3026,2175,3027,2176,3028,2177,3029,2178,3030,2179,3031,2180,3032,2181,3033,2182,3034,2178,3035,2183,3036,2179,3037,2184,3038,2185,3039,2186,3040,2187,3041,2188,3042,2189,3043,2190,3044,2191,3045,2192,3046,2144,3047,2143,3048,2193,3049,2145,3050,2194,3051,2146,3052,2099,3053,2163,3054,2195,3055,2152,3056,2154,3057,2196,3058,2197,3059,2198,3060,2199,3061,2159,3062,2200,3063,2160,3064,2098,3065,2162,3066,2201,3067,2174,3068,2202,3069,2175,3070,2203,3071,2188,3072,2187,3073,2143,3074,2204,3075,2193,3076,2145,3077,2205,3078,2194,3079,2162,3080,2206,3081,2201,3082,2143,3083,2207,3084,2204,3085,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID15(GL2 gl){
double[] positionsArray = {
23.385565,-22.8824954,159.1321226,34.5854154,-22.8824954,155.8563222,24.5679655,-22.8824954,155.8563052,31.4898551,-22.8824954,153.8317545,23.385565,-22.8824954,159.1321226,24.5679655,-22.8824954,155.8563052,24.5679513,-203.6122702,155.8563052,35.7678158,-22.8824954,159.1321226,34.5854154,-22.8824954,155.8563222,34.5854059,-203.6122702,155.8563052,31.4898551,-22.8824954,153.8317545,27.6635258,-22.8824954,153.8317545,27.6635163,-203.6122702,153.8317545,24.5679513,-203.6122702,155.8563052,24.5679655,-22.8824954,155.8563052,23.3855509,-203.6122702,159.1321226,24.5679655,-22.8824954,162.4079229,34.5854154,-22.8824954,162.4079229,27.6635258,-22.8824954,164.4324906,34.5854154,-22.8824954,155.8563222,35.7678158,-22.8824954,159.1321226,35.7678016,-203.6122702,159.1321226,34.5854154,-22.8824954,155.8563222,35.7678016,-203.6122702,159.1321226,34.5854059,-203.6122702,155.8563052,34.5854059,-203.6122702,155.8563052,31.4898409,-203.6122702,153.8317545,31.4898551,-22.8824954,153.8317545,31.4898551,-22.8824954,153.8317545,31.4898409,-203.6122702,153.8317545,27.6635258,-22.8824954,153.8317545,27.6635258,-22.8824954,153.8317545,27.6635163,-203.6122702,153.8317545,24.5679655,-22.8824954,155.8563052,24.5679513,-203.6122702,155.8563052,26.9245251,-207.6959158,151.7844176,26.7565264,-208.6242718,151.3189861,27.6635163,-203.6122702,153.8317545,23.3855509,-203.6122702,159.1321226,24.5679513,-203.6122702,155.8563052,22.1934358,-208.6242718,154.3033339,24.5679655,-22.8824954,162.4079229,23.3855509,-203.6122702,159.1321226,24.5679513,-203.6122702,162.4079229,23.385565,-22.8824954,159.1321226,31.4898551,-22.8824954,164.4324906,34.5854154,-22.8824954,162.4079229,34.5854059,-203.6122702,162.4079229,35.7678158,-22.8824954,159.1321226,27.6635258,-22.8824954,164.4324906,24.5679655,-22.8824954,162.4079229,24.5679513,-203.6122702,162.4079229,35.7678158,-22.8824954,159.1321226,34.5854059,-203.6122702,162.4079229,35.7678016,-203.6122702,159.1321226,34.5854059,-203.6122702,155.8563052,35.7678016,-203.6122702,159.1321226,38.7028575,-208.6242718,159.1321226,36.959912,-208.6242718,154.3033339,31.4898409,-203.6122702,153.8317545,34.5854059,-203.6122702,155.8563052,27.6635163,-203.6122702,153.8317545,26.9245251,-207.6959158,151.7844176,32.3968213,-208.6242718,151.3189861,26.7565264,-208.6242718,151.3189861,27.6635163,-203.6122702,153.8317545,24.5679513,-203.6122702,155.8563052,26.044878,-208.6242718,151.7844176,22.1934358,-208.6242718,154.3033339,26.7565264,-208.6242718,151.3189861,23.3855509,-203.6122702,159.1321226,22.1934358,-208.6242718,154.3033339,20.4504902,-208.6242718,159.1321226,23.3855509,-203.6122702,159.1321226,20.4504902,-208.6242718,159.1321226,24.5679513,-203.6122702,162.4079229,31.4898551,-22.8824954,164.4324906,27.6635258,-22.8824954,164.4324906,27.6635163,-203.6122702,164.4324906,34.5854154,-22.8824954,162.4079229,31.4898551,-22.8824954,164.4324906,31.4898409,-203.6122702,164.4324906,34.5854154,-22.8824954,162.4079229,31.4898409,-203.6122702,164.4324906,34.5854059,-203.6122702,162.4079229,27.6635258,-22.8824954,164.4324906,24.5679513,-203.6122702,162.4079229,27.6635163,-203.6122702,164.4324906,34.5854059,-203.6122702,162.4079229,36.959912,-208.6242718,163.9609112,35.7678016,-203.6122702,159.1321226,35.7678016,-203.6122702,159.1321226,36.959912,-208.6242718,163.9609112,38.7028575,-208.6242718,159.1321226,34.5854059,-203.6122702,155.8563052,38.7028575,-208.6242718,159.1321226,36.959912,-208.6242718,154.3033339,36.959912,-208.6242718,154.3033339,32.2288225,-207.6959158,151.7844178,31.4898409,-203.6122702,153.8317545,32.3968213,-208.6242718,151.3189861,33.1084677,-208.6242718,151.7844163,27.6635163,-203.6122702,153.8317545,32.2288225,-207.6959158,151.7844178,32.3968213,-208.6242718,151.3189861,31.4898409,-203.6122702,153.8317545,26.7565264,-208.6242718,151.3189861,32.2288207,-209.5526216,151.7844178,31.4898314,-213.6362394,153.8317545,32.3968213,-208.6242718,151.3189861,26.044878,-208.6242718,151.7844176,27.6635069,-213.6362394,153.8317545,22.1934358,-208.6242718,154.3033339,26.7565264,-208.6242718,151.3189861,26.9245234,-209.5526216,151.7844176,20.4504902,-208.6242718,159.1321226,22.1934358,-208.6242718,154.3033339,24.5679418,-213.6362394,155.8563052,24.5679513,-203.6122702,162.4079229,20.4504902,-208.6242718,159.1321226,22.1934358,-208.6242718,163.9609112,31.4898409,-203.6122702,164.4324906,34.5854059,-203.6122702,162.4079229,31.4898409,-203.6122702,164.4324906,32.3968166,-208.6242718,166.9452591,27.6635163,-203.6122702,164.4324906,24.5679513,-203.6122702,162.4079229,22.1934358,-208.6242718,163.9609112,36.959912,-208.6242718,163.9609112,34.5854059,-203.6122702,162.4079229,32.3968166,-208.6242718,166.9452591,36.959912,-208.6242718,163.9609112,34.5853965,-213.6362394,162.4079229,38.7028575,-208.6242718,159.1321226,36.959912,-208.6242718,154.3033339,38.7028575,-208.6242718,159.1321226,35.7677969,-213.6362394,159.1321226,33.1084677,-208.6242718,151.7844163,34.5853965,-213.6362394,155.8563052,32.3968213,-208.6242718,151.3189861,36.959912,-208.6242718,154.3033339,32.2288207,-209.5526216,151.7844178,34.5853965,-213.6362394,155.8563052,31.4898314,-213.6362394,153.8317545,32.3968213,-208.6242718,151.3189861,31.4898314,-213.6362394,153.8317545,26.9245234,-209.5526216,151.7844176,26.7565264,-208.6242718,151.3189861,27.6635069,-213.6362394,153.8317545,27.6635069,-213.6362394,153.8317545,24.5679418,-213.6362394,155.8563052,22.1934358,-208.6242718,154.3033339,20.4504902,-208.6242718,159.1321226,24.5679418,-213.6362394,155.8563052,23.3855414,-213.6362394,159.1321226,20.4504902,-208.6242718,159.1321226,23.3855414,-213.6362394,159.1321226,22.1934358,-208.6242718,163.9609112,31.4898409,-203.6122702,164.4324906,27.6635163,-203.6122702,164.4324906,26.7565264,-208.6242718,166.9452591,32.3968166,-208.6242718,166.9452591,27.6635163,-203.6122702,164.4324906,22.1934358,-208.6242718,163.9609112,26.7565264,-208.6242718,166.9452591,36.959912,-208.6242718,163.9609112,32.3968166,-208.6242718,166.9452591,31.4898314,-213.6362394,164.4324906,36.959912,-208.6242718,163.9609112,31.4898314,-213.6362394,164.4324906,34.5853965,-213.6362394,162.4079229,38.7028575,-208.6242718,159.1321226,34.5853965,-213.6362394,162.4079229,35.7677969,-213.6362394,159.1321226,36.959912,-208.6242718,154.3033339,35.7677969,-213.6362394,159.1321226,34.5853965,-213.6362394,155.8563052,34.5853965,-213.6362394,155.8563052,27.6635069,-213.6362394,153.8317545,31.4898314,-213.6362394,153.8317545,24.5679418,-213.6362394,155.8563052,35.7677969,-213.6362394,159.1321226,23.3855414,-213.6362394,159.1321226,22.1934358,-208.6242718,163.9609112,23.3855414,-213.6362394,159.1321226,24.5679418,-213.6362394,162.4079229,32.3968166,-208.6242718,166.9452591,26.7565264,-208.6242718,166.9452591,27.6635069,-213.6362394,164.4324906,26.7565264,-208.6242718,166.9452591,22.1934358,-208.6242718,163.9609112,24.5679418,-213.6362394,162.4079229,32.3968166,-208.6242718,166.9452591,27.6635069,-213.6362394,164.4324906,31.4898314,-213.6362394,164.4324906,31.4898314,-213.6362394,164.4324906,24.5679418,-213.6362394,162.4079229,34.5853965,-213.6362394,162.4079229,27.6635069,-213.6362394,164.4324906,27.6635069,-213.6362394,164.4324906,26.7565264,-208.6242718,166.9452591,24.5679418,-213.6362394,162.4079229,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.0379187f,0.5343267f,0.0457278f,0.5595974f,0.0457278f,0.5369946f,0.0457278f,0.5595974f,0.0505541f,0.5526128f,0.0457278f,0.5369946f,0.1004178f,0.3223799f,0.113387f,0.3223799f,0.113387f,0.5200626f,0.0379187f,0.5622653f,0.0457278f,0.5595974f,0.0379187f,0.5343267f,0.0205336f,0.3223799f,0.0205337f,0.5200626f,0.0069617f,0.3223799f,0.0457278f,0.5369946f,0.0505541f,0.5526128f,0.0505541f,0.5439793f,0.1270443f,0.5200626f,0.113387f,0.5200626f,0.113387f,0.3223799f,0.1004178f,0.3223799f,0.113387f,0.5200626f,0.1004177f,0.5200626f,0.0301096f,0.5369946f,0.0379187f,0.5622653f,0.0379187f,0.5343267f,0.0301096f,0.5595974f,0.0252833f,0.5439793f,0.0205336f,0.3223799f,0.0334175f,0.3223799f,0.0334175f,0.5200626f,0.0205336f,0.3223799f,0.0334175f,0.5200626f,0.0205337f,0.5200626f,0.0205337f,0.5200626f,0.0069618f,0.5200626f,0.0069617f,0.3223799f,0.1410737f,0.3223799f,0.1410739f,0.5200626f,0.1270442f,0.3223799f,0.1270442f,0.3223799f,0.1270443f,0.5200626f,0.113387f,0.3223799f,0.113387f,0.5200626f,0.1270443f,0.5245292f,0.1270443f,0.5255446f,0.1270443f,0.5200626f,0.1004177f,0.5200626f,0.113387f,0.5200626f,0.113387f,0.5255446f,0.087534f,0.3223799f,0.1004177f,0.5200626f,0.0875339f,0.5200626f,0.1004178f,0.3223799f,0.0252833f,0.5526128f,0.0301096f,0.5595974f,0.0252833f,0.5439793f,0.0463013f,0.3223799f,0.0463013f,0.5200626f,0.0334175f,0.3223799f,0.0739324f,0.3223799f,0.087534f,0.3223799f,0.0875339f,0.5200626f,0.0334175f,0.3223799f,0.0463013f,0.5200626f,0.0334175f,0.5200626f,0.0205337f,0.5200626f,0.0334175f,0.5200626f,0.0334175f,0.5255446f,0.0205337f,0.5255446f,0.0069618f,0.5200626f,0.0205337f,0.5200626f,0.1410739f,0.5200626f,0.1270443f,0.5200626f,0.1270442f,0.3223799f,0.1270443f,0.5245292f,0.1410738f,0.5255446f,0.1270443f,0.5255446f,0.113387f,0.5200626f,0.1249143f,0.5255446f,0.113387f,0.5255446f,0.1270443f,0.5255446f,0.1004177f,0.5200626f,0.113387f,0.5255446f,0.1004177f,0.5255446f,0.1004177f,0.5200626f,0.1004177f,0.5255446f,0.0875339f,0.5200626f,0.0598732f,0.3223799f,0.0739324f,0.3223799f,0.0739324f,0.5200626f,0.0463013f,0.3223799f,0.0598732f,0.3223799f,0.0598731f,0.5200626f,0.0463013f,0.3223799f,0.0598731f,0.5200626f,0.0463013f,0.5200626f,0.0739324f,0.3223799f,0.0875339f,0.5200626f,0.0739324f,0.5200626f,0.0463013f,0.5200626f,0.0463013f,0.5255446f,0.0334175f,0.5200626f,0.0334175f,0.5200626f,0.0463013f,0.5255446f,0.0205337f,0.5200626f,0.0334175f,0.5255446f,0.0205337f,0.5255446f,0.0205336f,0.5255447f,0.0069618f,0.5245292f,0.0069618f,0.5200626f,0.0069618f,0.5255447f,0.0090784f,0.5255447f,0.1270443f,0.5200626f,0.1410738f,0.5245292f,0.1410738f,0.5255446f,0.1410739f,0.5200626f,0.1270443f,0.5255446f,0.1410738f,0.5265601f,0.1410738f,0.5310268f,0.1410738f,0.5255446f,0.1249143f,0.5255446f,0.1270443f,0.5310268f,0.113387f,0.5255446f,0.1270443f,0.5255446f,0.1270443f,0.5265601f,0.1004177f,0.5255446f,0.113387f,0.5255446f,0.113387f,0.5310268f,0.0875339f,0.5200626f,0.0875339f,0.5255446f,0.0598732f,0.3223799f,0.0739324f,0.5200626f,0.0598731f,0.5200626f,0.0463013f,0.5200626f,0.0598731f,0.5200626f,0.0598732f,0.5255446f,0.0739324f,0.5200626f,0.0875339f,0.5200626f,0.0875339f,0.5255446f,0.0463013f,0.5255446f,0.0463013f,0.5200626f,0.0598732f,0.5255446f,0.0463013f,0.5255446f,0.0463013f,0.5310268f,0.0334175f,0.5255446f,0.0205337f,0.5255446f,0.0334175f,0.5255446f,0.0334175f,0.5310268f,0.0090784f,0.5255446f,0.0205337f,0.5310268f,0.0069618f,0.5255446f,0.0205337f,0.5255446f,0.0069618f,0.5265601f,0.0205336f,0.5310268f,0.0069618f,0.5310268f,0.0069618f,0.5255446f,0.1410738f,0.5310268f,0.1270443f,0.5265601f,0.1270443f,0.5255446f,0.1270443f,0.5310268f,0.1270443f,0.5310268f,0.113387f,0.5310268f,0.113387f,0.5255446f,0.1004177f,0.5255446f,0.113387f,0.5310268f,0.1004177f,0.5310268f,0.1004177f,0.5255446f,0.1004177f,0.5310268f,0.0875339f,0.5255446f,0.0598731f,0.5200626f,0.0739324f,0.5200626f,0.0739324f,0.5255446f,0.0598732f,0.5255446f,0.0598731f,0.5200626f,0.0739324f,0.5255446f,0.0739324f,0.5200626f,0.0875339f,0.5255446f,0.0739324f,0.5255446f,0.0463013f,0.5255446f,0.0598732f,0.5255446f,0.0598732f,0.5310268f,0.0463013f,0.5255446f,0.0598732f,0.5310268f,0.0463013f,0.5310268f,0.0334175f,0.5255446f,0.0463013f,0.5310268f,0.0334175f,0.5310268f,0.0205337f,0.5255446f,0.0334175f,0.5310268f,0.0205337f,0.5310268f,0.0723883f,0.5599644f,0.0772146f,0.5443462f,0.0772146f,0.5529797f,0.0723883f,0.5373616f,0.0645792f,0.5626323f,0.0723883f,0.5373616f,0.0723883f,0.5599644f,0.0645792f,0.5346937f,0.0875339f,0.5255446f,0.1004177f,0.5310268f,0.0875339f,0.5310268f,0.0598732f,0.5255446f,0.0739324f,0.5255446f,0.0739324f,0.5310268f,0.0739324f,0.5255446f,0.0875339f,0.5255446f,0.0875339f,0.5310268f,0.0598732f,0.5255446f,0.0739324f,0.5310268f,0.0598732f,0.5310268f,0.0519438f,0.5529797f,0.0567702f,0.5373616f,0.0567702f,0.5599644f,0.0519438f,0.5443462f,0.0567702f,0.5599644f,0.0645792f,0.5346937f,0.0645792f,0.5626323f,0.0567702f,0.5373616f,0.0739324f,0.5310268f,0.0739324f,0.5255446f,0.0875339f,0.5310268f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,3,3,4,2,5,4,6,5,7,6,8,7,9,1,10,0,11,8,12,9,13,10,14,2,15,3,16,11,17,12,18,13,19,14,20,4,21,6,22,15,23,16,24,7,25,0,26,7,25,16,24,17,27,17,27,16,24,18,28,19,29,20,30,21,31,22,32,23,33,24,34,25,35,26,36,27,37,28,38,29,39,30,40,31,41,32,42,33,43,34,44,35,45,36,46,35,45,34,44,37,47,38,48,39,49,40,50,41,51,42,52,43,53,42,52,41,51,44,54,45,55,17,56,18,57,46,58,47,59,48,60,49,61,50,62,51,63,52,64,53,65,54,66,55,67,56,68,57,69,58,70,59,71,60,72,29,73,61,74,30,75,62,76,63,77,64,78,63,77,62,76,65,42,66,79,67,80,68,81,67,80,66,79,69,82,70,83,71,84,72,85,73,86,74,87,75,88,76,89,77,90,78,91,79,92,80,93,81,94,82,95,83,96,84,97,85,98,86,99,87,100,88,101,89,102,90,103,91,104,92,105,93,69,94,106,95,107,96,108,97,109,98,110,99,111,98,110,97,109,100,112,100,112,97,109,101,113,102,114,103,115,104,116,103,115,102,114,105,117,106,118,107,119,108,120,107,119,106,118,109,121,110,122,111,123,112,124,111,123,110,122,113,125,111,123,113,125,114,126,115,127,116,128,117,129,118,130,119,87,120,131,76,132,78,133,121,134,122,135,123,136,124,137,125,138,126,139,127,140,128,141,129,142,130,143,131,144,132,145,133,146,134,147,135,148,136,149,137,150,138,151,139,152,138,151,137,150,140,153,141,154,142,155,143,156,142,155,141,154,144,157,145,158,146,159,147,160,146,159,145,158,148,161,149,162,150,163,151,164,152,165,153,166,154,167,155,168,156,169,157,170,158,171,159,172,160,173,161,174,158,175,160,176,162,177,163,178,164,179,165,180,166,181,167,182,168,183,169,184,170,185,171,186,172,187,173,188,174,189,175,190,176,191,177,192,178,193,179,194,178,193,177,192,180,195,181,196,180,197,177,198,180,197,181,196,182,199,183,200,184,201,185,202,186,203,187,204,188,205,189,206,190,207,191,208,192,209,193,210,194,211,195,212,196,213,197,214,196,213,195,212,198,215,197,216,182,217,181,218,182,217,197,216,196,219,199,220,200,221,201,222,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID23(GL2 gl){
double[] positionsArray = {
97.3238184,-20.8491308,168.635118,41.2323107,-20.8491648,151.3975968,40.9923581,-20.8490968,167.5286749,97.3238184,-20.8491308,168.635118,97.3238184,-20.8491308,151.3931009,41.2323107,-20.8491648,151.3975968,97.3238184,-20.8491308,168.635118,153.4239198,-20.8491648,151.3975968,97.3238184,-20.8491308,151.3931009,97.3238184,-20.8491308,168.635118,153.6696236,-20.8491648,167.5286579,153.4239198,-20.8491648,151.3975968,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.7570021f,0.4411773f,0.6252723f,0.3934684f,0.6249375f,0.4413403f,0.7570021f,0.4411773f,0.7563496f,0.3933552f,0.6252723f,0.3934684f,0.757002f,0.4411772f,0.8930458f,0.3933685f,0.7563496f,0.3933551f,0.7570021f,0.4411773f,0.893645f,0.4412881f,0.8930459f,0.3933686f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID31(GL2 gl){
double[] positionsArray = {
54.2049079,-155.2487904,73.4999352,54.2049032,-169.9999037,58.1174475,54.2049032,-162.5986442,68.1959738,54.2049032,-162.5986442,68.1959738,54.2049032,-169.9999037,58.1174475,17.9574646,-162.5986442,68.1959738,54.2049079,-155.2487904,73.4999352,54.2049032,-162.5986442,68.1959738,17.9574741,-155.2487564,73.4999352,54.2049269,-133.2509068,77.343109,54.2049032,-169.9999037,58.1174475,54.2049079,-155.2487904,73.4999352,17.9574741,-155.2487564,73.4999352,17.9574646,-162.5986442,68.1959738,54.2049032,-169.9999037,58.1174475,17.9574646,-169.9999037,58.1174517,17.9574741,-143.3582273,77.343109,54.2049269,-133.2509068,77.343109,54.2049079,-155.2487904,73.4999352,54.2049127,-143.3582273,77.343109,54.2049269,-133.2509068,77.343109,54.2049127,-173.5426421,47.4322465,54.2049032,-169.9999037,58.1174475,17.9574741,-155.2487564,73.4999352,17.9574646,-162.5986442,68.1959738,17.9489229,-258.9236633,103.628395,54.2049127,-173.5426421,47.4322465,17.9574646,-162.5986442,68.1959738,17.9574646,-169.9999037,58.1174517,17.9489229,-258.9236633,103.628395,17.9574741,-143.3582273,77.343109,17.9574741,-155.2487564,73.4999352,17.9489229,-258.9236633,103.628395,54.2049127,-143.3582273,77.343109,54.2049079,-155.2487904,73.4999352,17.9574741,-143.3582273,77.343109,54.2049269,-133.2509068,77.343109,54.2049127,-143.3582273,77.343109,17.957493,-133.2509068,77.343109,54.2049269,-133.2509068,77.343109,54.2029735,-174.5891268,38.4114573,54.2049127,-173.5426421,47.4322465,17.9574741,-173.5435947,47.4717818,17.9574646,-169.9999037,58.1174517,17.9853599,-258.9181349,40.4664875,17.9489229,-258.9236633,103.628395,17.9574741,-143.3582273,77.343109,17.9489229,-258.9236633,103.628395,17.9574835,-183.7431461,103.6825081,17.957493,-133.2509068,77.343109,17.957493,-121.1641109,73.7883393,54.2049316,-121.1641109,73.7883393,54.2029735,-174.5891268,38.4114573,54.2049269,-133.2509068,77.343109,54.2014128,-183.2396359,27.2670322,54.2029735,-174.5891268,38.4114573,17.9574646,-169.9999037,58.1174517,17.9574741,-173.5435947,47.4717818,17.9853599,-258.9181349,40.4664875,38.0999633,-182.6451536,103.6824995,17.9574835,-183.7431461,103.6825081,17.9489229,-258.9236633,103.628395,17.957493,-133.2509068,77.343109,17.9574741,-143.3582273,77.343109,17.9574835,-183.7431461,103.6825081,54.2049316,-112.8556485,68.4396654,54.2049269,-133.2509068,77.343109,54.2049316,-121.1641109,73.7883393,17.9402866,-20.7778229,103.4720421,17.957493,-121.1641109,73.7883393,17.957493,-133.2509068,77.343109,17.957493,-112.8556145,68.439674,17.9574741,-174.6174322,38.462143,17.9574741,-174.6174322,38.462143,54.2029735,-174.5891268,38.4114573,54.2014128,-183.2396359,27.2670322,54.2014317,-100.1597413,38.1018721,54.2014128,-183.2396359,27.2670322,54.2049269,-133.2509068,77.343109,17.9574741,-173.5435947,47.4717818,17.9574741,-174.6174322,38.462143,17.9853599,-258.9181349,40.4664875,38.0999633,-182.6451536,103.6824995,17.9575025,-90.8297317,103.6825081,17.9574835,-183.7431461,103.6825081,38.0999823,-90.8297317,103.6825081,38.1771697,-258.8196272,103.6119781,38.0999633,-182.6451536,103.6824995,17.9489229,-258.9236633,103.628395,17.9575025,-90.8297317,103.6825081,17.957493,-133.2509068,77.343109,17.9574835,-183.7431461,103.6825081,54.2049316,-112.8556485,68.4396654,54.2049316,-121.1641109,73.7883393,17.957493,-112.8556145,68.439674,54.2014317,-100.1597413,38.1018721,54.2049269,-133.2509068,77.343109,54.2049316,-112.8556485,68.4396654,17.9402866,-20.7778229,103.4720421,17.957493,-112.8556145,68.439674,17.957493,-121.1641109,73.7883393,17.9402866,-20.7778229,103.4720421,17.957493,-133.2509068,77.343109,17.9575025,-90.8297317,103.6825081,17.9574741,-183.2396359,27.2670408,97.3366735,-183.2396359,27.2670322,54.2014128,-183.2396359,27.2670322,54.2014317,-100.1597413,38.1018721,17.9574741,-174.6174322,38.462143,17.9574741,-183.2396359,27.2670408,17.9853599,-258.9181349,40.4664875,38.0999917,-90.8297317,167.1765614,38.0999633,-182.6451536,103.6824995,38.0999728,-182.6451536,167.1765614,38.0999823,-90.8297317,103.6825081,38.0193517,-20.8361008,103.5845767,38.0999633,-182.6451536,103.6824995,38.1771697,-258.8196272,103.6119781,38.0999728,-182.6451536,167.1765614,17.957493,-104.6096486,58.9049601,54.2014317,-100.1597413,38.1018721,54.2049316,-112.8556485,68.4396654,54.2033992,-100.9218448,48.3790583,17.9402866,-20.7778229,103.4720421,17.957493,-104.6096486,58.9049601,17.957493,-112.8556145,68.439674,17.9402866,-20.7778229,103.4720421,54.2014128,-183.2396359,27.2670322,97.3445909,-258.9236633,26.4569463,17.9574741,-183.2396359,27.2670408,97.3366735,-183.2396359,27.2670322,97.3367019,-100.1597753,38.1018636,97.3366735,-183.2396359,27.2670322,54.2014317,-100.1597413,38.1018721,17.9172061,-254.3919696,31.5972999,97.3367208,-90.8297317,174.3549705,38.0999917,-90.8297317,167.1765614,38.0999728,-182.6451536,167.1765614,38.082757,-20.8491308,167.1765614,38.0999823,-90.8297317,103.6825081,38.0999917,-90.8297317,167.1765614,38.0193517,-20.8361008,103.5845767,38.0999823,-90.8297317,103.6825081,38.082757,-20.8491308,167.1765614,38.091398,-258.7920532,167.1765614,54.2049316,-112.8556485,68.4396654,17.957493,-104.6096486,58.9049601,54.2049269,-104.6096486,58.9049558,54.2033992,-100.9218448,48.3790583,54.2049316,-112.8556485,68.4396654,54.2049269,-104.6096486,58.9049558,17.9402866,-20.7778229,103.4720421,17.957493,-100.9698824,48.3529938,17.957493,-104.6096486,58.9049601,140.4719295,-183.2396699,27.2670237,97.3445909,-258.9236633,26.4569463,97.3366735,-183.2396359,27.2670322,176.7158729,-183.2397039,27.2670237,97.3445909,-258.9236633,26.4569463,18.0101999,-258.9236633,26.4569463,17.9574741,-183.2396359,27.2670408,17.9402961,-20.7778569,38.1018636,54.2014317,-100.1597413,38.1018721,17.957493,-100.1597413,38.1018763,97.3367019,-100.1597753,38.1018636,140.4719579,-100.1598094,38.101855,97.3366735,-183.2396359,27.2670322,97.3367019,-100.1597753,38.1018636,18.0101999,-258.9236633,26.4569463,18.014291,-258.919972,36.6541423,97.3367208,-90.8297317,174.3549705,40.9923581,-20.8490968,167.5286749,38.0999917,-90.8297317,167.1765614,97.3367208,-90.8297317,174.3549705,38.0999728,-182.6451536,167.1765614,97.3366924,-182.6451877,174.3549705,97.3366924,-182.6451877,174.3549705,38.0999728,-182.6451536,167.1765614,38.091398,-258.7920532,167.1765614,54.2033992,-100.9218448,48.3790583,17.957493,-100.9698824,48.3529938,17.9402961,-20.7778229,45.3192034,17.957493,-100.9698824,48.3529938,17.9402866,-20.7778229,103.4720421,140.4719579,-100.1598094,38.101855,140.4719295,-183.2396699,27.2670237,97.3366735,-183.2396359,27.2670322,176.7158729,-174.6175003,38.4621217,176.7158729,-183.2397039,27.2670237,140.4719295,-183.2396699,27.2670237,176.7158729,-183.2397039,27.2670237,176.7158351,-258.9236973,26.4569293,97.3445909,-258.9236633,26.4569463,17.9402961,-20.7778229,45.3192034,17.9402961,-20.7778569,38.1018636,17.957493,-100.1597413,38.1018763,97.3367019,-100.1597753,38.1018636,17.9402961,-20.7778569,38.1018636,97.330979,-20.7778569,38.1018636,176.7159297,-20.7778569,38.1018508,140.4719579,-100.1598094,38.101855,97.3367019,-100.1597753,38.1018636,176.7159107,-100.1598094,38.101855,97.3367208,-90.8297317,174.3549705,97.3238278,-20.8490968,174.3549705,40.9923581,-20.8490968,167.5286749,156.5733836,-258.7920702,167.1765443,156.5734025,-182.6452217,167.1765443,97.3366924,-182.6451877,174.3549705,38.091398,-258.7920532,167.1765614,97.3323885,-258.7920532,174.3549705,17.9402961,-20.7778229,45.3192034,17.957493,-100.1597413,38.1018763,17.957493,-100.9698824,48.3529938,140.4719579,-100.1598094,38.101855,140.468458,-133.2509408,77.343092,140.4719295,-183.2396699,27.2670237,176.7158729,-174.6175003,38.4621217,176.6751225,-259.0396918,40.4664662,176.7158729,-183.2397039,27.2670237,140.4703782,-174.5891949,38.4114445,176.7560936,-254.3920206,31.5972829,176.7158351,-258.9236973,26.4569293,97.330979,-20.7778569,38.1018636,17.9402961,-20.7778569,38.1018636,97.3218319,-0.1815687,38.1018678,176.7159297,-20.7778569,38.1018508,97.3367019,-100.1597753,38.1018636,97.330979,-20.7778569,38.1018636,176.7159297,-20.7778569,45.3191949,176.7159107,-100.1598094,38.101855,176.7159297,-20.7778569,38.1018508,176.7159107,-100.9699504,48.3529683,140.4719579,-100.1598094,38.101855,176.7159107,-100.1598094,38.101855,153.6696236,-20.8491648,167.5286579,156.5733836,-258.7920702,167.1765443,156.5734025,-182.6452217,167.1765443,156.5733836,-258.7920702,167.1765443,156.5733742,-258.7920702,151.4361188,156.5734404,-90.8297657,167.1765273,97.3367208,-90.8297317,174.3549705,156.5734025,-182.6452217,167.1765443,140.4719579,-100.1598094,38.101855,140.468458,-112.8556825,68.4396484,140.468458,-133.2509408,77.343092,140.468458,-133.2509408,77.343092,140.4703782,-174.5891949,38.4114445,140.4719295,-183.2396699,27.2670237,176.7158729,-173.5436628,47.4717648,176.6751225,-259.0396918,40.4664662,176.7158729,-174.6175003,38.4621217,176.7158729,-173.5436628,47.4717648,176.7158729,-174.6175003,38.4621217,140.4703782,-174.5891949,38.4114445,176.6751225,-259.0396918,36.6391687,97.3218319,-0.1815687,38.1018678,17.9402961,-20.7778569,38.1018636,17.9316882,-1.8228418,38.101855,176.7159297,-20.7778569,38.1018508,97.330979,-20.7778569,38.1018636,97.3218319,-0.1815687,38.1018678,176.7159297,-20.7778569,45.3191949,176.7159107,-100.9699504,48.3529683,176.7159107,-100.1598094,38.101855,140.4699904,-100.9218788,48.3790413,156.5734404,-90.8297657,167.1765273,153.6696236,-20.8491648,167.5286579,97.3367208,-90.8297317,174.3549705,156.5734025,-182.6452217,151.4361018,156.5734025,-182.6452217,167.1765443,156.5733742,-258.7920702,151.4361188,156.5734404,-90.8297657,167.1765273,140.4719579,-100.1598094,38.101855,140.4699904,-100.9218788,48.3790413,140.468458,-112.8556825,68.4396484,140.468458,-112.8556825,68.4396484,140.468458,-121.1641449,73.7883222,140.468458,-133.2509408,77.343092,140.468458,-133.2509408,77.343092,140.468439,-173.5427102,47.4322338,140.4703782,-174.5891949,38.4114445,176.7158918,-169.9999377,58.1174304,176.6751225,-259.0396918,40.4664662,176.7158729,-173.5436628,47.4717648,140.468439,-173.5427102,47.4322338,97.3218319,-0.1815687,38.1018678,17.9316882,-1.8228418,38.101855,19.7570096,-0.1816368,38.101855,176.7159486,-1.8228418,38.101855,176.7159297,-20.7778569,38.1018508,97.3218319,-0.1815687,38.1018678,176.7159675,-20.7778569,151.4361018,176.7159107,-100.9699504,48.3529683,176.7159297,-20.7778569,45.3191949,176.7159107,-104.6096827,58.9049345,156.5734877,-20.8491648,167.1765273,153.6696236,-20.8491648,167.5286579,156.5734404,-90.8297657,167.1765273,176.715854,-258.9236973,151.4361018,156.5734025,-182.6452217,151.4361018,156.5733742,-258.7920702,151.4361188,156.5734404,-90.8297657,151.4361018,156.5734404,-90.8297657,167.1765273,156.5734025,-182.6452217,151.4361018,156.5734877,-20.8491648,167.1765273,140.4699904,-100.9218788,48.3790413,140.468458,-104.6096827,58.9049388,140.468458,-112.8556825,68.4396484,176.7159107,-112.8556825,68.4396399,140.468458,-121.1641449,73.7883222,140.468458,-112.8556825,68.4396484,176.7158918,-121.1641449,73.7883137,140.468458,-133.2509408,77.343092,140.468458,-121.1641449,73.7883222,140.468458,-133.2509408,77.343092,140.468458,-169.9999377,58.1174347,140.468439,-173.5427102,47.4322338,176.7158918,-169.9999377,58.1174304,176.7158918,-169.9999377,58.1174304,176.715854,-258.9236973,151.4361018,176.6751225,-259.0396918,40.4664662,176.7159486,-1.8228418,38.101855,97.3218319,-0.1815687,38.1018678,174.8906177,-0.1816368,38.101855,176.7159107,-104.6096827,58.9049345,176.7159675,-20.7778569,151.4361018,176.7159107,-112.8556825,68.4396399,176.7159107,-100.9699504,48.3529683,140.468458,-104.6096827,58.9049388,176.7158729,-183.7432141,151.4361018,156.5734025,-182.6452217,151.4361018,176.715854,-258.9236973,151.4361018,156.5734404,-90.8297657,151.4361018,156.5734877,-20.8491648,167.1765273,156.5734404,-90.8297657,151.4361018,156.5734877,-20.8491648,151.4361018,176.7159107,-112.8556825,68.4396399,176.7158918,-121.1641449,73.7883137,176.7158918,-133.2509748,77.3430835,140.468458,-133.2509408,77.343092,140.468458,-155.2488244,73.4999182,140.468458,-169.9999377,58.1174347,140.468458,-169.9999377,58.1174347,176.7158918,-162.5987122,68.1959568,176.715854,-258.9236973,151.4361018,176.7158918,-169.9999377,58.1174304,176.7159675,-20.7778569,151.4361018,176.7158918,-121.1641449,73.7883137,176.7159107,-112.8556825,68.4396399,176.7159107,-143.3582613,77.3430835,176.7158729,-183.7432141,151.4361018,176.715854,-258.9236973,151.4361018,176.7158918,-133.2509748,77.3430835,176.7159107,-90.8297657,151.4361018,156.5734877,-20.8491648,151.4361018,176.7159675,-20.7778569,151.4361018,176.7158918,-133.2509748,77.3430835,176.7158918,-121.1641449,73.7883137,140.4684674,-143.3582613,77.343092,140.468458,-133.2509408,77.343092,140.4684674,-143.3582613,77.343092,140.468458,-155.2488244,73.4999182,140.468458,-162.5987122,68.1959568,176.7158918,-162.5987122,68.1959568,140.468458,-162.5987122,68.1959568,176.7159107,-155.2488244,73.4999096,176.715854,-258.9236973,151.4361018,176.7158918,-162.5987122,68.1959568,176.7158918,-133.2509748,77.3430835,176.7159107,-90.8297657,151.4361018,176.7158729,-183.7432141,151.4361018,176.7159675,-20.7778569,151.4361018,176.7159107,-143.3582613,77.3430835,176.715854,-258.9236973,151.4361018,176.7159107,-155.2488244,73.4999096,176.7159107,-143.3582613,77.3430835,140.4684674,-143.3582613,77.343092,176.7158918,-133.2509748,77.3430835,176.7159675,-20.7778569,151.4361018,140.468458,-155.2488244,73.4999182,176.7159107,-155.2488244,73.4999096,140.468458,-162.5987122,68.1959568,140.468458,-155.2488244,73.4999182,176.7159107,-155.2488244,73.4999096,176.7159107,-143.3582613,77.3430835,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.4768929f,0.6091466f,0.4631833f,0.5861267f,0.470062f,0.6012092f,0.1124729f,0.9337357f,0.1050456f,0.9337357f,0.112473f,0.9846386f,0.1198487f,0.9337357f,0.1124729f,0.9337357f,0.1198487f,0.9846386f,0.4973376f,0.614898f,0.4631833f,0.5861267f,0.4768929f,0.6091466f,0.1124729f,0.9337357f,0.112473f,0.9846386f,0.1198487f,0.9846386f,0.112473f,0.9846386f,0.1050456f,0.9337357f,0.1050456f,0.9846386f,0.1198487f,0.9337357f,0.1198487f,0.9846386f,0.1317811f,0.9846386f,0.4973376f,0.614898f,0.4768929f,0.6091466f,0.4879439f,0.614898f,0.4973376f,0.614898f,0.4598907f,0.5701361f,0.4631833f,0.5861267f,0.4745349f,0.6172104f,0.4652122f,0.6091262f,0.3430319f,0.6632144f,0.1050456f,0.9846386f,0.1050456f,0.9337357f,0.1014905f,0.9337356f,0.4652122f,0.6091262f,0.4558244f,0.5937647f,0.3430319f,0.6632144f,0.4896171f,0.6230681f,0.4745349f,0.6172104f,0.3430319f,0.6632143f,0.1317811f,0.9337357f,0.1198487f,0.9337357f,0.1317811f,0.9846386f,0.141924f,0.9337356f,0.1317811f,0.9337357f,0.141924f,0.9846386f,0.4973376f,0.614898f,0.4589181f,0.5566363f,0.4598907f,0.5701361f,0.1050456f,0.9846386f,0.1014905f,0.9337356f,0.1014894f,0.9846386f,0.4558244f,0.5937646f,0.3430319f,0.5667516f,0.3430319f,0.6632144f,0.4896174f,0.6230684f,0.3430321f,0.6632147f,0.4383923f,0.6632146f,0.1317811f,0.9337357f,0.1317811f,0.9846386f,0.141924f,0.9846386f,0.1540534f,0.9846386f,0.141924f,0.9337356f,0.141924f,0.9846386f,0.1540534f,0.9337356f,0.1014894f,0.9846386f,0.1014905f,0.9337356f,0.1004402f,0.9337383f,0.4973376f,0.614898f,0.4508784f,0.5399585f,0.4589181f,0.5566363f,0.4558247f,0.5937651f,0.4513298f,0.5775391f,0.3430322f,0.566752f,0.4397848f,0.6850885f,0.4383921f,0.6632142f,0.3430319f,0.6632143f,0.5024374f,0.623068f,0.4896171f,0.623068f,0.4383921f,0.6632142f,0.5162929f,0.6015738f,0.4973376f,0.614898f,0.508571f,0.6095783f,0.6451004f,0.6632142f,0.5177686f,0.6176499f,0.5024374f,0.623068f,0.1540534f,0.9337356f,0.1540534f,0.9846386f,0.1623911f,0.9846386f,0.1014894f,0.9846386f,0.1004402f,0.9337383f,0.1004118f,0.9846386f,0.1004118f,0.9846386f,0.1004402f,0.9337383f,0.0917593f,0.9337405f,0.5280923f,0.556173f,0.4508784f,0.5399585f,0.4973376f,0.614898f,0.4513298f,0.5775391f,0.4499677f,0.5638067f,0.3430322f,0.566752f,0.4397848f,0.6850885f,0.5562452f,0.6632142f,0.4383921f,0.6632142f,0.5562452f,0.6850885f,0.3431987f,0.6850885f,0.4397848f,0.6850885f,0.3430319f,0.6632143f,0.5562452f,0.6632142f,0.5024374f,0.623068f,0.4383921f,0.6632142f,0.1623911f,0.9337356f,0.1540534f,0.9337356f,0.1623911f,0.9846386f,0.5280923f,0.556173f,0.4973376f,0.614898f,0.5162929f,0.6015738f,0.6451004f,0.6632142f,0.5283071f,0.6094975f,0.5177686f,0.6176499f,0.6451004f,0.6632142f,0.5024374f,0.623068f,0.5562452f,0.6632142f,0.1004118f,0.9846386f,0.0917593f,0.9337405f,0.0917593f,0.9846386f,0.0917593f,0.8732115f,0.0917593f,0.9337405f,0.1751317f,0.9337405f,0.4499677f,0.5638067f,0.4390311f,0.5467433f,0.3430322f,0.566752f,0.5562453f,0.7818654f,0.4397848f,0.6850885f,0.4397848f,0.7818654f,0.5562453f,0.6850885f,0.5562452f,0.6850885f,0.6450099f,0.6850885f,0.5562452f,0.6632142f,0.4397848f,0.6850885f,0.3431987f,0.6850885f,0.4397848f,0.7818654f,0.1623911f,0.9846386f,0.1706661f,0.9846386f,0.1623911f,0.9337356f,0.5280923f,0.556173f,0.5162929f,0.6015738f,0.527384f,0.571553f,0.6451004f,0.6632142f,0.5387665f,0.5949648f,0.5283071f,0.6094975f,0.6450099f,0.6850885f,0.6451004f,0.6632142f,0.5562452f,0.6632142f,0.0917593f,0.9337617f,0.0158089f,0.8732165f,0.0917593f,0.9846385f,0.0917593f,0.8732114f,0.1751317f,0.8731126f,0.0917593f,0.8732115f,0.1751317f,0.9337405f,0.4390307f,0.5467428f,0.3487798f,0.5533429f,0.5562453f,0.8299527f,0.5562453f,0.7818654f,0.4397848f,0.7818654f,0.6450099f,0.7818652f,0.5562452f,0.6850885f,0.5562453f,0.7818654f,0.6450099f,0.6850885f,0.5562452f,0.6850885f,0.6450099f,0.7818652f,0.4397848f,0.7818654f,0.3431987f,0.6850885f,0.3431987f,0.7818654f,0.1623911f,0.9337356f,0.1706661f,0.9846386f,0.1706661f,0.9337356f,0.527384f,0.571553f,0.5162929f,0.6015738f,0.5239567f,0.5873051f,0.6451004f,0.6632142f,0.5433832f,0.5788817f,0.5387665f,0.5949648f,0.0925885f,0.9331594f,0.0150778f,0.8727238f,0.0925885f,0.8727187f,0.0925885f,0.983944f,0.0158088f,0.8732167f,0.0158088f,0.9846386f,0.0917593f,0.9846386f,0.2547931f,0.9846386f,0.1751317f,0.9337166f,0.1751317f,0.9846386f,0.1751317f,0.8731126f,0.1776736f,0.9331383f,0.0925885f,0.8727188f,0.1776736f,0.87262f,0.4390307f,0.5467428f,0.3430318f,0.5455081f,0.3487798f,0.5533429f,0.3487798f,0.5533429f,0.3430318f,0.5611067f,0.3430319f,0.5667515f,0.5562453f,0.8299527f,0.6450099f,0.782402f,0.5562453f,0.7818654f,0.5562453f,0.8299527f,0.4397848f,0.7818654f,0.4397848f,0.8299528f,0.4397848f,0.8299528f,0.4397848f,0.7818654f,0.3431987f,0.7818654f,0.1706661f,0.9846386f,0.174367f,0.9337378f,0.1706661f,0.9337356f,0.1706661f,0.9846386f,0.1743187f,0.9846386f,0.174367f,0.9337378f,0.6451003f,0.5742576f,0.5433833f,0.5788817f,0.6451004f,0.6632142f,0.1776736f,0.9331383f,0.0925885f,0.9331383f,0.0925885f,0.8727188f,0.0985616f,0.9839441f,0.0925885f,0.9839441f,0.0925885f,0.9331383f,0.0925885f,0.9839441f,0.0150778f,0.9839441f,0.0150778f,0.8727239f,0.6451002f,0.5742576f,0.6451002f,0.563257f,0.5444108f,0.563257f,0.1751317f,0.8731126f,0.2547931f,0.9846386f,0.2547931f,0.8731154f,0.2589715f,0.9839441f,0.1776736f,0.9331143f,0.1776736f,0.87262f,0.1776736f,0.9839441f,0.3487798f,0.5533429f,0.3430318f,0.5455081f,0.3430318f,0.5611067f,0.5562453f,0.8299527f,0.6450099f,0.8299527f,0.6450099f,0.782402f,0.0046445f,0.807157f,0.2381535f,0.8414355f,0.1105074f,0.8414356f,0.1105074f,0.807157f,0.4397848f,0.8299528f,0.3431987f,0.7818654f,0.3431987f,0.8299528f,0.6451002f,0.5742576f,0.5444108f,0.563257f,0.5433832f,0.5788817f,0.2251825f,0.5863606f,0.1791775f,0.6475413f,0.109681f,0.5694681f,0.121668f,0.5869223f,0.0044616f,0.5899351f,0.109681f,0.5694681f,0.0985616f,0.9839441f,0.0925885f,0.9331383f,0.0985895f,0.9331361f,0.109681f,0.5694681f,0.0107617f,0.5762194f,0.0044616f,0.5682051f,0.2376458f,0.8719766f,0.2376458f,0.9832978f,0.2587392f,0.8719587f,0.2589715f,0.9839441f,0.1776736f,0.87262f,0.2589715f,0.8726228f,0.3355428f,0.597613f,0.2251824f,0.5863606f,0.3355428f,0.5863606f,0.1730002f,0.9839441f,0.1776736f,0.9331383f,0.1776736f,0.9839441f,0.3354438f,0.808728f,0.3354438f,0.8414356f,0.2381535f,0.8414356f,0.0046446f,0.807157f,0.1105074f,0.8414356f,0.0046446f,0.8414356f,0.1105074f,0.807157f,0.0046446f,0.807157f,0.0046446f,0.7826163f,0.2381535f,0.807157f,0.2381535f,0.8414356f,0.1105074f,0.807157f,0.2251825f,0.5863606f,0.207532f,0.63366f,0.1791775f,0.6475413f,0.1791775f,0.6475413f,0.1217073f,0.5868433f,0.109681f,0.5694681f,0.1231607f,0.6009686f,0.0044616f,0.5899345f,0.1216678f,0.5869217f,0.109681f,0.5694681f,0.0044616f,0.5899351f,0.0107617f,0.5762194f,0.1035756f,0.9839441f,0.0985616f,0.9839441f,0.0985895f,0.9331361f,0.0107617f,0.5762194f,0.0044616f,0.584161f,0.0044616f,0.5682051f,0.2587392f,0.8719587f,0.2376458f,0.9832978f,0.2570584f,0.9832978f,0.2376458f,0.9832978f,0.2376458f,0.8719766f,0.2587392f,0.8719587f,0.3355428f,0.597613f,0.2240561f,0.602343f,0.2251824f,0.5863606f,0.1730476f,0.9331354f,0.1776736f,0.9331383f,0.1730002f,0.9839441f,0.2381535f,0.807157f,0.3354438f,0.808728f,0.2381535f,0.8414356f,0.1105074f,0.7826163f,0.1105074f,0.807157f,0.0046445f,0.7826163f,0.2381535f,0.807157f,0.2251825f,0.5863606f,0.2241229f,0.6023837f,0.207532f,0.63366f,0.207532f,0.63366f,0.1959812f,0.6419991f,0.1791775f,0.6475413f,0.1791775f,0.6475413f,0.1231622f,0.6009075f,0.1217073f,0.5868433f,0.1280875f,0.6175667f,0.0044616f,0.5899351f,0.1231608f,0.6009691f,0.0107617f,0.5762194f,0.0044616f,0.5899351f,0.0044616f,0.584161f,0.1035756f,0.9839441f,0.0985895f,0.9331361f,0.1035764f,0.9331332f,0.2587392f,0.8719587f,0.2570584f,0.9832978f,0.2587392f,0.9807391f,0.2570584f,0.9832978f,0.2376458f,0.9832978f,0.2587392f,0.8719587f,0.3355428f,0.7630591f,0.2240561f,0.602343f,0.3355428f,0.597613f,0.1655588f,0.9839441f,0.1730476f,0.9331354f,0.1730002f,0.9839441f,0.3354438f,0.807157f,0.3354438f,0.808728f,0.2381535f,0.807157f,0.0044617f,0.7630591f,0.1105074f,0.7826163f,0.0046446f,0.7826163f,0.2381535f,0.7826162f,0.2381535f,0.807157f,0.1105074f,0.7826163f,0.3354438f,0.807157f,0.2241229f,0.6023837f,0.218996f,0.6187945f,0.207532f,0.63366f,0.1583312f,0.9839441f,0.1510487f,0.9331332f,0.1583312f,0.9331332f,0.1510487f,0.9839441f,0.1404547f,0.9331332f,0.1510487f,0.9331332f,0.1791775f,0.6475413f,0.1280874f,0.6175667f,0.1231622f,0.6009075f,0.1082443f,0.9839441f,0.1035756f,0.9839441f,0.1035764f,0.9331332f,0.1280875f,0.6175668f,0.0044617f,0.7630593f,0.0044616f,0.5899352f,0.2570584f,0.9832978f,0.2587392f,0.8719587f,0.2587392f,0.9807391f,0.218996f,0.6187945f,0.3355428f,0.7630591f,0.207532f,0.6336599f,0.2240561f,0.602343f,0.1655588f,0.9331332f,0.1730476f,0.9331354f,0.1655588f,0.9839441f,0.1089809f,0.7630591f,0.1105074f,0.7826163f,0.0044617f,0.7630591f,0.1089809f,0.7630591f,0.2381534f,0.7826162f,0.1105074f,0.7826163f,0.3354438f,0.807157f,0.2381534f,0.7826162f,0.3354438f,0.7823243f,0.1583312f,0.983944f,0.1655588f,0.9331332f,0.1655588f,0.983944f,0.1583312f,0.9331332f,0.1583312f,0.9839441f,0.1510487f,0.9839441f,0.1510487f,0.9331332f,0.1510487f,0.9839441f,0.1404547f,0.9839441f,0.1404547f,0.9331332f,0.1791775f,0.6475413f,0.1485952f,0.6415494f,0.1280874f,0.6175667f,0.1082443f,0.9331334f,0.1082443f,0.9839441f,0.1035764f,0.9331332f,0.138377f,0.63328f,0.0044617f,0.7630591f,0.1280875f,0.6175667f,0.3355428f,0.7630591f,0.1959812f,0.6419991f,0.207532f,0.63366f,0.1651259f,0.6475413f,0.1089809f,0.7630592f,0.0044617f,0.7630592f,0.1791775f,0.6475413f,0.2381534f,0.7630591f,0.2381534f,0.7826162f,0.1089809f,0.7630591f,0.2381534f,0.7630591f,0.3354438f,0.7823243f,0.2381534f,0.7826162f,0.3355428f,0.7630591f,0.1791775f,0.6475413f,0.1959812f,0.6419991f,0.1404547f,0.9839441f,0.1315957f,0.9331334f,0.1404547f,0.9331332f,0.1791775f,0.6475413f,0.1651259f,0.6475413f,0.1485952f,0.6415494f,0.1485952f,0.6415494f,0.138377f,0.63328f,0.1280874f,0.6175667f,0.1082443f,0.9331333f,0.1147315f,0.983944f,0.1082443f,0.983944f,0.1147315f,0.9331333f,0.1485952f,0.6415494f,0.0044617f,0.7630591f,0.138377f,0.63328f,0.1791776f,0.6475413f,0.2381535f,0.7630591f,0.1089809f,0.7630591f,0.3355429f,0.7630591f,0.1651259f,0.6475413f,0.0044617f,0.7630591f,0.1485952f,0.6415494f,0.1315957f,0.9839441f,0.1315957f,0.9331334f,0.1404547f,0.9839441f,0.3355428f,0.7630591f,0.3354438f,0.7823243f,0.2381534f,0.7630591f,0.1315957f,0.9839441f,0.1211736f,0.9331334f,0.1315957f,0.9331334f,0.1211736f,0.9839441f,0.1147315f,0.9331334f,0.1211736f,0.9331334f,0.1211736f,0.9839441f,0.1147315f,0.9839441f,0.1147315f,0.9331334f,0.1315957f,0.9839441f,0.1211736f,0.9839441f,0.1211736f,0.9331334f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,3,12,5,13,12,14,13,15,14,16,15,17,6,18,8,19,16,20,17,21,18,22,19,23,20,24,21,25,22,26,23,27,24,28,25,29,15,30,14,31,26,32,27,33,28,34,29,35,30,36,31,37,32,38,33,39,34,40,35,41,36,42,37,43,38,44,39,45,40,46,41,47,15,48,26,49,42,50,43,51,44,52,45,53,46,54,47,55,48,56,33,57,35,58,49,59,50,60,36,61,38,62,36,61,50,60,51,63,42,64,26,65,52,66,53,67,54,68,55,69,56,70,57,71,58,72,59,73,60,74,61,75,62,76,63,77,64,78,65,79,66,80,67,81,68,82,69,83,70,84,51,85,50,86,71,87,42,88,52,89,72,90,73,91,74,92,75,93,76,94,77,95,78,96,79,97,80,98,81,99,82,100,83,101,84,102,83,101,82,100,85,103,86,104,87,105,88,106,89,107,90,108,91,109,92,110,93,111,94,112,95,113,96,114,97,115,98,116,99,117,100,118,101,119,102,120,103,121,73,122,75,123,104,124,105,125,106,126,107,127,108,128,109,129,110,130,111,131,112,132,113,133,112,132,111,131,114,134,85,135,115,136,83,137,116,138,117,139,118,140,94,141,119,142,92,143,120,144,121,145,122,146,123,147,124,148,125,149,115,150,126,151,83,152,127,153,128,154,129,155,128,154,127,153,130,156,131,157,132,158,133,159,109,160,134,161,110,52,135,162,136,163,137,164,138,165,139,166,140,167,141,168,142,169,143,170,118,171,117,172,144,173,145,174,146,175,147,176,148,177,149,178,150,179,151,180,152,181,153,182,154,183,155,184,156,185,155,184,154,183,157,186,158,187,159,188,160,189,161,190,162,191,163,192,162,191,161,190,164,193,165,194,166,195,167,196,109,197,168,198,134,199,134,200,169,201,110,202,170,203,171,204,172,205,173,206,174,207,175,208,176,209,177,210,178,211,146,212,179,213,147,214,146,215,180,216,179,217,181,218,182,219,183,220,184,221,185,222,186,223,187,224,188,225,189,226,190,227,191,228,192,229,193,230,194,231,195,232,196,233,197,234,198,235,199,236,200,237,201,238,200,237,199,236,202,239,134,240,168,241,169,242,203,243,204,244,205,245,206,246,173,247,175,248,173,247,206,246,207,249,208,250,209,251,210,252,211,253,212,254,213,255,214,256,215,257,216,258,217,259,218,260,219,261,187,262,189,263,220,264,219,265,221,266,222,267,223,268,224,269,225,270,226,271,227,272,228,273,229,274,230,275,231,276,232,277,233,278,234,279,235,280,204,281,203,282,236,283,208,284,210,285,237,286,238,287,239,288,240,289,241,290,242,291,243,292,244,293,245,294,246,295,247,296,248,297,249,298,250,299,251,300,219,301,218,302,221,303,252,304,253,305,254,306,221,307,255,308,222,309,256,310,257,311,258,312,259,313,260,314,261,315,262,316,263,317,264,318,265,319,233,320,232,321,266,322,267,323,268,324,269,325,270,326,271,327,270,326,269,325,272,328,273,329,274,330,275,331,276,332,277,333,278,334,279,335,280,336,281,337,282,338,283,339,284,340,221,341,218,342,255,343,252,344,254,345,285,346,286,347,287,348,288,349,289,350,290,351,291,352,292,353,293,354,294,355,295,356,265,357,232,358,296,359,297,360,298,361,299,362,300,363,301,364,302,365,303,366,304,367,303,366,302,365,305,368,306,369,307,370,308,371,309,372,310,373,311,374,312,375,313,376,314,377,315,378,316,379,317,380,318,381,252,382,285,383,319,384,320,385,321,386,322,387,323,388,324,389,325,390,326,391,327,392,326,391,325,390,328,393,329,394,265,395,295,396,330,397,331,398,332,399,330,400,333,401,331,402,334,403,335,404,336,405,309,406,329,407,295,408,329,407,309,406,311,409,337,410,312,411,314,412,338,413,339,414,340,415,278,416,341,417,342,418,343,419,318,420,285,421,344,422,345,423,346,424,347,425,348,426,349,427,350,428,351,429,352,430,351,429,350,428,353,431,354,432,333,433,330,434,354,435,355,436,333,437,356,438,357,439,358,440,339,441,359,442,340,443,360,444,361,445,362,446,341,447,363,448,342,449,343,450,364,451,318,452,364,451,343,450,365,453,366,454,367,455,368,456,369,457,370,458,371,459,370,458,369,457,372,460,373,461,374,462,375,463,376,464,377,465,378,466,379,467,355,468,354,469,376,470,380,471,377,472,381,473,382,474,383,475,384,476,364,477,365,478,385,479,381,480,383,481,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID39(GL2 gl){
double[] positionsArray = {
129.1549028,-20.8242615,71.0641596,129.2047057,-20.7855456,53.850025,97.3238184,-20.8134428,71.0600383,97.3238184,-20.8134428,71.0600383,129.2047057,-20.7855456,53.850025,97.3238089,-20.7882673,53.8212314,97.3238184,-20.8134428,71.0600383,97.3238089,-20.7882673,53.8212314,65.4515295,-20.7855456,53.8500293,65.5013324,-20.8242615,71.0641596,97.3238184,-20.8134428,71.0600383,65.4515295,-20.7855456,53.8500293,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.9965062f,0.2264557f,0.9239988f,0.2262824f,0.9964892f,0.337455f,0.9964892f,0.337455f,0.9239988f,0.2262824f,0.9238779f,0.3374911f,0.9964892f,0.3374128f,0.923878f,0.3373773f,0.9239997f,0.448526f,0.996507f,0.4483521f,0.9964892f,0.3374128f,0.9239997f,0.448526f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID47(GL2 gl){
double[] positionsArray = {
97.3324074,-341.2353136,36.0863814,18.1167535,-359.4465624,36.0863644,17.957493,-359.4465964,36.0863729,20.1097731,-359.4340767,36.0863729,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 6, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID55(GL2 gl){
double[] positionsArray = {
97.3367019,-384.7254187,36.0863729,17.957493,-380.5014871,36.0863729,20.1097778,-380.5383743,36.0863729,17.957493,-380.5014871,38.9910414,20.1097778,-380.5383743,36.0863729,17.957493,-380.5014871,36.0863729,20.1097778,-380.5307366,38.9910414,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,3,4,5,6,4,3,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 9, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID61(GL2 gl){
double[] positionsArray = {
21.6795909,-493.7355391,36.0863729,20.3580072,-493.766596,36.0863729,20.3580072,-493.7465557,36.0863729,18.0549847,-493.766596,36.0863729,97.3352641,-502.6693534,36.0863644,17.957493,-493.7665662,36.0863729,20.3580072,-493.6454473,49.5455919,18.0549847,-493.766596,36.0863729,20.3580072,-493.766596,36.0863729,18.0549837,-493.647451,49.343502,18.0549846,-493.6459306,49.4985857,18.0549847,-493.6454473,49.5455919,20.3580072,-493.766596,36.0863729,18.0549847,-493.766596,36.0863729,20.3580072,-493.7465557,36.0863729,20.3580072,-493.4449746,95.4576017,18.0549845,-493.6453411,49.5864671,18.0549847,-493.4449746,95.4576017,20.3580025,-464.5941516,36.0863644,18.0549847,-493.766596,36.0863729,18.0549799,-464.5941516,36.0863644,20.3580072,-493.7465557,36.0863729,20.3580072,-493.3201857,98.9235001,18.0549847,-493.3201857,98.9235001,18.0549799,-462.2056592,49.6245944,20.3580025,-464.5941516,36.0863644,18.0549799,-464.5941516,36.0863644,20.3580025,-462.2056592,49.6245944,20.3580072,-491.4624755,146.173251,18.0549847,-491.4624755,146.173251,18.0549799,-458.7374053,59.9585461,20.3580025,-458.7374053,59.9585461,20.3580072,-491.4083644,146.8395569,18.0549847,-490.859962,153.5945208,18.0549799,-454.0382797,66.4761457,20.3580025,-458.7374053,59.9585461,18.0549799,-458.7374053,59.9585461,20.3580025,-454.7185407,65.5326327,20.3580072,-490.8367621,153.8804435,18.0549847,-490.859962,153.5945208,20.3580072,-491.4083644,146.8395569,18.0549847,-490.8367621,153.8804435,18.0549799,-454.0382797,66.4761457,20.3580025,-454.0095043,66.5160775,20.3580025,-454.7185407,65.5326327,18.0549799,-454.0095043,66.5160775,20.3580072,-490.7951433,153.9247744,18.0549847,-490.8367621,153.8804435,20.3580072,-490.8367621,153.8804435,18.0549847,-490.835054,153.8822498,18.0549799,-448.7532007,71.314955,20.3579985,-449.5137596,70.6205813,20.3580072,-490.7951433,153.9247744,18.0549847,-489.4611544,155.3461527,18.0549847,-490.835054,153.8822498,20.3580072,-489.4611544,155.3461527,20.3579977,-448.7210271,71.3443467,18.0549799,-448.7532007,71.314955,18.0549799,-448.7210271,71.3443467,20.3579985,-449.5137596,70.6205813,18.0549847,-489.4611544,155.3461527,20.3580069,-487.8342935,155.3615824,18.0549847,-489.3950606,155.3467794,20.3580072,-489.4611544,155.3461527,18.0549752,-442.6766723,75.147849,18.0549742,-442.7132297,75.1250819,20.3579977,-442.6766723,75.147849,18.0549847,-489.3950606,155.3467794,20.3580039,-470.7495876,155.5236212,18.0549845,-488.7012669,155.3533596,20.3580069,-487.8342935,155.3615824,18.0549752,-435.8121913,77.5304185,20.3579977,-442.6766723,75.147849,18.0549752,-442.6766723,75.147849,20.3579977,-436.8054466,77.1856722,18.0549845,-488.7012669,155.3533596,20.3579977,-435.6655864,155.8563733,18.0549752,-435.6655864,155.8563733,20.3580039,-470.7495876,155.5236212,20.3579977,-435.7701838,77.5450089,18.0549752,-435.8121913,77.5304185,18.0549752,-435.7701838,77.5450089,20.3579977,-436.8054466,77.1856722,18.0549752,-435.6670467,154.750338,20.3579977,-435.6655864,155.8563733,20.3579977,-435.7019511,128.6176559,18.0549752,-435.6655864,155.8563733,18.0549752,-435.6670467,154.750338,20.3579977,-435.7701838,77.5450089,18.0549752,-435.7701838,77.5450089,20.3579977,-435.7019511,128.6176559,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,3,4,5,4,3,1,4,1,0,6,7,8,7,6,9,9,6,10,10,6,11,12,13,14,15,11,6,11,15,16,16,15,17,18,19,20,19,18,21,22,17,15,17,22,23,24,25,26,25,24,27,28,23,22,23,28,29,30,27,24,27,30,31,32,29,28,29,32,33,34,35,36,35,34,37,38,39,40,39,38,41,42,43,44,43,42,45,46,47,48,47,46,49,50,43,45,43,50,51,52,53,54,53,52,55,56,57,58,57,56,59,60,61,62,61,60,63,64,58,65,58,64,66,58,66,56,67,68,69,68,67,70,71,72,73,72,71,74,75,76,77,76,75,78,79,80,81,80,79,82,83,84,85,84,83,86,87,88,89,88,87,90,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 165, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID67(GL2 gl){
double[] positionsArray = {
97.3367019,-460.1663791,36.0863644,21.6795956,-463.6635763,36.0863644,17.957493,-463.6641206,36.0863644,21.6795956,-463.6687475,41.8319025,17.957493,-463.6641206,36.0863644,21.6795956,-463.6635763,36.0863644,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,3,4,5,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 6, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID73(GL2 gl){
double[] positionsArray = {
63.4213209,-456.4104016,54.3106583,17.957493,-460.1663749,36.0863644,17.957493,-459.5602575,43.2198397,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 3, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID79(GL2 gl){
double[] positionsArray = {
171.3465995,-221.0497464,155.8563052,164.4247052,-221.0497464,153.8317545,168.2510344,-221.0497464,153.8317545,168.2510344,-221.0497464,153.8317545,164.4247052,-221.0497464,153.8317545,163.5177342,-216.0377788,151.3189861,171.3465995,-221.0497464,155.8563052,168.2510344,-221.0497464,153.8317545,169.1580243,-216.0377788,151.3189861,161.3291496,-221.0497464,155.8563052,164.4247052,-221.0497464,153.8317545,158.9546341,-216.0377788,154.3033339,163.5177342,-216.0377788,151.3189861,169.1580243,-216.0377788,151.3189861,168.2510344,-221.0497464,153.8317545,163.5177342,-216.0377788,151.3189861,173.721115,-216.0377788,154.3033339,171.3465995,-221.0497464,155.8563052,169.1580243,-216.0377788,151.3189861,172.5290046,-221.0497464,159.1321226,164.4247052,-221.0497464,153.8317545,161.3291496,-221.0497464,155.8563052,158.9546341,-216.0377788,154.3033339,163.5177342,-216.0377788,151.3189861,158.9546341,-216.0377788,154.3033339,161.3291496,-211.0258113,155.8563052,169.1580243,-216.0377788,151.3189861,163.5177342,-216.0377788,151.3189861,164.4247241,-211.0258113,153.8317545,173.721115,-216.0377788,154.3033339,169.1580243,-216.0377788,151.3189861,168.2510439,-211.0258113,153.8317545,173.721115,-216.0377788,154.3033339,172.5290046,-221.0497464,159.1321226,171.3465995,-221.0497464,155.8563052,160.1467444,-221.0497464,159.1321226,157.2116932,-216.0377788,159.1321226,158.9546341,-216.0377788,154.3033339,161.3291496,-221.0497464,155.8563052,160.1467539,-211.0258113,159.1321226,161.3291496,-211.0258113,155.8563052,158.9546341,-216.0377788,154.3033339,164.4247241,-211.0258113,153.8317545,163.5177342,-216.0377788,151.3189861,161.3291496,-211.0258113,155.8563052,169.1580243,-216.0377788,151.3189861,164.4247241,-211.0258113,153.8317545,168.2510439,-211.0258113,153.8317545,173.721115,-216.0377788,154.3033339,168.2510439,-211.0258113,153.8317545,171.346609,-211.0258113,155.8563052,173.721115,-216.0377788,154.3033339,175.4640558,-216.0377788,159.1321226,172.5290046,-221.0497464,159.1321226,171.3465995,-221.0497464,162.4079229,157.2116932,-216.0377788,159.1321226,161.3291496,-221.0497464,155.8563052,160.1467444,-221.0497464,159.1321226,160.1467539,-211.0258113,159.1321226,158.9546341,-216.0377788,154.3033339,157.2116932,-216.0377788,159.1321226,160.1467633,-30.2960024,159.1321226,161.3291496,-211.0258113,155.8563052,160.1467539,-211.0258113,159.1321226,164.4247241,-211.0258113,153.8317545,161.3291496,-211.0258113,155.8563052,161.3291685,-30.2960024,155.8563052,168.2510439,-211.0258113,153.8317545,164.4247241,-211.0258113,153.8317545,164.4247241,-30.2960024,153.8317545,171.346609,-211.0258113,155.8563052,168.2510439,-211.0258113,153.8317545,168.2510628,-30.2960024,153.8317545,171.346609,-211.0258113,155.8563052,175.4640558,-216.0377788,159.1321226,173.721115,-216.0377788,154.3033339,175.4640558,-216.0377788,159.1321226,171.3465995,-221.0497464,162.4079229,172.5290046,-221.0497464,159.1321226,161.3291496,-221.0497464,162.4079229,157.2116932,-216.0377788,159.1321226,160.1467444,-221.0497464,159.1321226,158.9546341,-216.0377788,163.9609112,160.1467539,-211.0258113,159.1321226,157.2116932,-216.0377788,159.1321226,161.3291496,-211.0258113,162.4079229,161.3291685,-30.2960024,162.4079229,160.1467539,-211.0258113,159.1321226,161.3291496,-211.0258113,162.4079229,160.1467633,-30.2960024,159.1321226,160.1467633,-30.2960024,159.1321226,161.3291685,-30.2960024,155.8563052,161.3291496,-211.0258113,155.8563052,164.4247241,-30.2960024,153.8317545,164.4247241,-211.0258113,153.8317545,161.3291685,-30.2960024,155.8563052,168.2510628,-30.2960024,153.8317545,171.3466184,-30.2960024,155.8563222,171.346609,-211.0258113,155.8563052,168.2510628,-30.2960024,153.8317545,171.346609,-211.0258113,155.8563052,172.5290046,-211.0258113,159.1321226,175.4640558,-216.0377788,159.1321226,173.721115,-216.0377788,163.9609112,171.3465995,-221.0497464,162.4079229,175.4640558,-216.0377788,159.1321226,168.2510344,-221.0497464,164.4324906,158.9546341,-216.0377788,163.9609112,160.1467444,-221.0497464,159.1321226,161.3291496,-221.0497464,162.4079229,161.3291496,-211.0258113,162.4079229,157.2116932,-216.0377788,159.1321226,158.9546341,-216.0377788,163.9609112,164.4247241,-30.2960024,164.4324906,161.3291685,-30.2960024,162.4079229,161.3291496,-211.0258113,162.4079229,161.3291685,-30.2960024,162.4079229,172.5290236,-30.2960024,159.1321226,160.1467633,-30.2960024,159.1321226,171.3466184,-30.2960024,155.8563222,161.3291685,-30.2960024,155.8563052,168.2510628,-30.2960024,153.8317545,164.4247241,-30.2960024,153.8317545,171.3466184,-30.2960024,155.8563222,172.5290046,-211.0258113,159.1321226,171.346609,-211.0258113,155.8563052,172.5290046,-211.0258113,159.1321226,173.721115,-216.0377788,163.9609112,175.4640558,-216.0377788,159.1321226,173.721115,-216.0377788,163.9609112,168.2510344,-221.0497464,164.4324906,171.3465995,-221.0497464,162.4079229,164.4247052,-221.0497464,164.4324906,163.5177342,-216.0377788,166.9452591,158.9546341,-216.0377788,163.9609112,161.3291496,-221.0497464,162.4079229,164.4247241,-211.0258113,164.4324906,161.3291496,-211.0258113,162.4079229,158.9546341,-216.0377788,163.9609112,164.4247241,-30.2960024,164.4324906,171.3466184,-30.2960024,162.4079229,164.4247241,-30.2960024,164.4324906,161.3291496,-211.0258113,162.4079229,164.4247241,-211.0258113,164.4324906,171.3466184,-30.2960024,155.8563222,172.5290236,-30.2960024,159.1321226,172.5290046,-211.0258113,159.1321226,171.346609,-211.0258113,162.4079229,173.721115,-216.0377788,163.9609112,172.5290046,-211.0258113,159.1321226,173.721115,-216.0377788,163.9609112,169.1580149,-216.0377788,166.9452591,168.2510344,-221.0497464,164.4324906,169.1580149,-216.0377788,166.9452591,164.4247052,-221.0497464,164.4324906,168.2510344,-221.0497464,164.4324906,164.4247052,-221.0497464,164.4324906,163.5177342,-216.0377788,166.9452591,161.3291496,-221.0497464,162.4079229,164.4247241,-211.0258113,164.4324906,158.9546341,-216.0377788,163.9609112,163.5177342,-216.0377788,166.9452591,168.2510628,-30.2960024,164.4324906,168.2510628,-30.2960024,164.4324906,164.4247241,-30.2960024,164.4324906,164.4247241,-211.0258113,164.4324906,171.3466184,-30.2960024,162.4079229,171.346609,-211.0258113,162.4079229,172.5290236,-30.2960024,159.1321226,172.5290236,-30.2960024,159.1321226,171.346609,-211.0258113,162.4079229,172.5290046,-211.0258113,159.1321226,173.721115,-216.0377788,163.9609112,171.346609,-211.0258113,162.4079229,169.1580149,-216.0377788,166.9452591,169.1580149,-216.0377788,166.9452591,163.5177342,-216.0377788,166.9452591,164.4247052,-221.0497464,164.4324906,168.2510439,-211.0258113,164.4324906,164.4247241,-211.0258113,164.4324906,163.5177342,-216.0377788,166.9452591,171.3466184,-30.2960024,162.4079229,168.2510628,-30.2960024,164.4324906,168.2510439,-211.0258113,164.4324906,168.2510439,-211.0258113,164.4324906,171.3466184,-30.2960024,162.4079229,168.2510439,-211.0258113,164.4324906,171.346609,-211.0258113,162.4079229,171.346609,-211.0258113,162.4079229,168.2510439,-211.0258113,164.4324906,169.1580149,-216.0377788,166.9452591,169.1580149,-216.0377788,166.9452591,168.2510439,-211.0258113,164.4324906,163.5177342,-216.0377788,166.9452591,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.0723883f,0.5599644f,0.0772146f,0.5443462f,0.0772146f,0.5529797f,0.1410738f,0.5310268f,0.1270443f,0.5310268f,0.1270443f,0.5255446f,0.0205337f,0.5310268f,0.0069618f,0.5310268f,0.0069618f,0.5255446f,0.0723883f,0.5373616f,0.0772146f,0.5443462f,0.0723883f,0.5599644f,0.1270443f,0.5310268f,0.113387f,0.5255446f,0.1270443f,0.5255446f,0.1410738f,0.5255446f,0.1410738f,0.5310268f,0.1270443f,0.5255446f,0.0205337f,0.5255446f,0.0205337f,0.5310268f,0.0069618f,0.5255446f,0.0645792f,0.5626323f,0.0723883f,0.5373616f,0.0723883f,0.5599644f,0.1270443f,0.5310268f,0.113387f,0.5310268f,0.113387f,0.5255446f,0.1270443f,0.5255446f,0.113387f,0.5255446f,0.113387f,0.5200626f,0.1410738f,0.5255446f,0.1270443f,0.5255446f,0.1270443f,0.5200626f,0.0205337f,0.5255446f,0.0069618f,0.5255446f,0.0069618f,0.5200626f,0.0205337f,0.5255446f,0.0334175f,0.5310268f,0.0205337f,0.5310268f,0.0645792f,0.5346937f,0.0723883f,0.5373616f,0.0645792f,0.5626323f,0.1004177f,0.5255446f,0.113387f,0.5255446f,0.113387f,0.5310268f,0.1004177f,0.5200626f,0.113387f,0.5200626f,0.113387f,0.5255446f,0.1270443f,0.5200626f,0.1270443f,0.5255446f,0.113387f,0.5200626f,0.1410738f,0.5255446f,0.1270443f,0.5200626f,0.1410739f,0.5200626f,0.0205337f,0.5255446f,0.0069618f,0.5200626f,0.0205337f,0.5200626f,0.0205337f,0.5255446f,0.0334175f,0.5255446f,0.0334175f,0.5310268f,0.0567702f,0.5599644f,0.0645792f,0.5346937f,0.0645792f,0.5626323f,0.1004177f,0.5255446f,0.113387f,0.5310268f,0.1004177f,0.5310268f,0.1004177f,0.5200626f,0.113387f,0.5255446f,0.1004177f,0.5255446f,0.1004178f,0.3223799f,0.113387f,0.5200626f,0.1004177f,0.5200626f,0.1270443f,0.5200626f,0.113387f,0.5200626f,0.113387f,0.3223799f,0.1410739f,0.5200626f,0.1270443f,0.5200626f,0.1270442f,0.3223799f,0.0205337f,0.5200626f,0.0069618f,0.5200626f,0.0069617f,0.3223799f,0.0205337f,0.5200626f,0.0334175f,0.5255446f,0.0205337f,0.5255446f,0.0334175f,0.5255446f,0.0463013f,0.5310268f,0.0334175f,0.5310268f,0.0567702f,0.5373616f,0.0645792f,0.5346937f,0.0567702f,0.5599644f,0.1004177f,0.5255446f,0.1004177f,0.5310268f,0.0875339f,0.5255446f,0.1004177f,0.5200626f,0.1004177f,0.5255446f,0.0875339f,0.5200626f,0.0875343f,0.3223799f,0.100418f,0.5200626f,0.0875342f,0.5200626f,0.1004181f,0.3223799f,0.1004178f,0.3223799f,0.113387f,0.3223799f,0.113387f,0.5200626f,0.1270442f,0.3223799f,0.1270443f,0.5200626f,0.113387f,0.3223799f,0.1410737f,0.3223799f,0.1410739f,0.5200626f,0.1270442f,0.3223799f,0.0205336f,0.3223799f,0.0205337f,0.5200626f,0.0069617f,0.3223799f,0.0205337f,0.5200626f,0.0334175f,0.5200626f,0.0334175f,0.5255446f,0.0463013f,0.5255446f,0.0463013f,0.5310268f,0.0334175f,0.5255446f,0.0519438f,0.5529797f,0.0567702f,0.5373616f,0.0567702f,0.5599644f,0.0875339f,0.5255446f,0.1004177f,0.5310268f,0.0875339f,0.5310268f,0.0875339f,0.5200626f,0.1004177f,0.5255446f,0.0875339f,0.5255446f,0.0739324f,0.3223799f,0.087534f,0.3223799f,0.0875339f,0.5200626f,0.0301096f,0.5369946f,0.0379187f,0.5622653f,0.0379187f,0.5343267f,0.0379187f,0.5343267f,0.0457278f,0.5595974f,0.0457278f,0.5369946f,0.0457278f,0.5369946f,0.0505541f,0.5526128f,0.0505541f,0.5439793f,0.0457278f,0.5595974f,0.0505541f,0.5526128f,0.0457278f,0.5369946f,0.0205336f,0.3223799f,0.0334175f,0.5200626f,0.0205337f,0.5200626f,0.0334175f,0.5200626f,0.0463013f,0.5255446f,0.0334175f,0.5255446f,0.0463013f,0.5255446f,0.0598732f,0.5310268f,0.0463013f,0.5310268f,0.0519438f,0.5443462f,0.0567702f,0.5373616f,0.0519438f,0.5529797f,0.0739324f,0.5255446f,0.0875339f,0.5255446f,0.0875339f,0.5310268f,0.0739324f,0.5200626f,0.0875339f,0.5200626f,0.0875339f,0.5255446f,0.0252833f,0.5439793f,0.0301096f,0.5595974f,0.0301096f,0.5369946f,0.0739324f,0.3223799f,0.0875339f,0.5200626f,0.0739324f,0.5200626f,0.0379187f,0.5622653f,0.0457278f,0.5595974f,0.0379187f,0.5343267f,0.0301096f,0.5595974f,0.0379187f,0.5622653f,0.0301096f,0.5369946f,0.0205336f,0.3223799f,0.0334175f,0.3223799f,0.0334175f,0.5200626f,0.0463013f,0.5200626f,0.0463013f,0.5255446f,0.0334175f,0.5200626f,0.0598732f,0.5255446f,0.0598732f,0.5255446f,0.0739324f,0.5310268f,0.0598732f,0.5310268f,0.0739324f,0.5310268f,0.0739324f,0.5255446f,0.0875339f,0.5310268f,0.0739324f,0.5200626f,0.0875339f,0.5255446f,0.0739324f,0.5255446f,0.0252833f,0.5526128f,0.0301096f,0.5595974f,0.0252833f,0.5439793f,0.0598732f,0.3223799f,0.0739324f,0.3223799f,0.0739324f,0.5200626f,0.0463013f,0.3223799f,0.0463013f,0.5200626f,0.0334175f,0.3223799f,0.0334175f,0.3223799f,0.0463013f,0.5200626f,0.0334175f,0.5200626f,0.0463013f,0.5255446f,0.0463013f,0.5200626f,0.0598732f,0.5255446f,0.0598732f,0.5255446f,0.0739324f,0.5255446f,0.0739324f,0.5310268f,0.0598731f,0.5200626f,0.0739324f,0.5200626f,0.0739324f,0.5255446f,0.0463013f,0.3223799f,0.0598732f,0.3223799f,0.0598731f,0.5200626f,0.0598732f,0.3223799f,0.0739324f,0.5200626f,0.0598731f,0.5200626f,0.0463013f,0.3223799f,0.0598731f,0.5200626f,0.0463013f,0.5200626f,0.0463013f,0.5200626f,0.0598731f,0.5200626f,0.0598732f,0.5255446f,0.0598732f,0.5255446f,0.0598731f,0.5200626f,0.0739324f,0.5255446f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,1,10,0,11,10,12,11,13,12,14,13,15,14,16,15,17,16,18,17,19,18,20,19,21,9,22,0,23,20,24,21,25,22,26,23,27,24,28,25,29,26,30,27,31,28,32,29,33,30,34,31,35,32,36,33,37,34,38,35,39,9,40,19,41,36,42,37,43,38,44,39,45,40,46,41,47,42,48,43,49,44,50,45,51,46,52,47,53,48,54,49,55,50,56,51,57,52,58,53,59,54,60,35,61,19,62,55,63,56,64,57,65,58,66,59,67,60,68,61,69,62,70,63,71,64,72,65,73,66,74,67,75,68,76,69,77,70,78,71,79,72,80,73,81,74,82,75,83,76,84,77,85,78,86,79,87,35,88,54,89,80,90,81,91,82,92,83,93,84,94,85,95,86,96,87,97,88,98,87,97,86,96,89,99,90,100,91,101,92,102,93,103,94,104,95,105,96,106,67,107,69,108,97,109,98,110,99,111,100,112,101,113,102,114,103,115,104,116,105,117,106,118,79,119,54,120,107,121,108,122,109,123,110,124,111,125,112,126,113,127,114,128,115,129,116,130,117,131,118,132,118,133,119,134,120,135,120,136,121,137,122,138,119,139,121,140,120,141,123,142,124,143,125,144,126,145,127,146,128,147,129,148,130,149,131,150,132,151,79,152,106,153,133,154,134,155,135,156,136,157,137,158,138,159,139,160,140,161,116,162,141,163,142,164,143,165,117,166,119,167,118,168,140,169,117,170,116,171,144,172,145,173,146,174,147,175,148,176,149,177,150,176,151,178,152,149,153,179,154,180,155,181,156,182,157,183,158,184,159,185,160,186,161,187,162,188,140,189,139,190,163,191,164,192,165,193,166,194,167,195,168,196,169,197,170,198,171,199,172,200,173,201,174,202,175,203,176,204,177,205,178,206,179,207,180,208,181,209,182,210,183,211,163,212,165,213,184,214,185,215,186,216,187,217,188,218,189,219,190,220,191,221,192,222,193,223,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID87(GL2 gl){
double[] positionsArray = {
17.9853599,-258.9181349,40.4664875,18.0218064,-338.9759477,36.5873377,18.0218064,-338.9759477,40.5384779,18.0218064,-338.9759477,40.5384779,18.0218064,-338.9759477,36.5873377,45.5470158,-338.9759477,40.5384693,45.5737949,-258.9181349,40.4664833,17.9853599,-258.9181349,40.4664875,18.0218064,-338.9759477,40.5384779,18.014291,-258.919972,36.6541423,45.5737949,-258.9181349,40.4664833,18.0218064,-338.9759477,40.5384779,45.5470158,-338.9759477,40.5384693,97.328094,-339.0974876,36.5873292,29.3948602,-258.8488342,103.5408605,17.9853599,-258.9181349,40.4664875,45.5737949,-258.9181349,40.4664833,97.328094,-339.0974876,36.5873292,18.0218064,-338.9759477,36.5873377,18.014291,-258.919972,36.6541423,45.5737949,-258.9181349,40.4664833,45.5470158,-338.9759477,40.5384693,45.5470253,-304.6242036,118.2414135,53.2662249,-338.9759477,48.0095315,17.9489229,-258.9236633,103.628395,38.1771697,-258.8196272,103.6119781,97.3486489,-258.9973016,36.6207294,97.328094,-339.0974876,36.5873292,18.014291,-258.919972,36.6541423,45.5470253,-304.6242036,118.2414135,45.5470158,-338.9759477,40.5384693,45.54703,-338.9759477,117.7769271,45.5375613,-258.8523383,147.3715882,45.5737949,-258.9181349,40.4664833,45.5470253,-304.6242036,118.2414135,45.54703,-338.9759477,117.7769271,97.328094,-339.0974876,48.9563093,45.5375613,-258.8523383,147.3715882,18.014291,-258.919972,36.6541423,97.3445909,-258.9236633,26.4569463,97.3486489,-258.9973016,36.6207294,176.6751225,-259.0396918,36.6391687,97.328094,-339.0974876,36.5873292,97.3486489,-258.9973016,36.6207294,49.7038557,-304.6514544,118.0685584,45.5470253,-304.6242036,118.2414135,45.54703,-338.9759477,117.7769271,45.5375613,-258.8523383,147.3715882,45.5470253,-304.6242036,118.2414135,45.5470347,-304.6250712,147.4925357,53.2662249,-338.9759477,48.0095315,53.2662438,-338.9759477,113.0862182,97.328094,-339.0974876,48.9563093,97.328094,-339.0974876,36.5873292,141.3899489,-339.2190275,48.009523,97.328094,-339.0974876,48.9563093,53.3612477,-341.32848,48.0654923,53.2662249,-338.9759477,48.0095315,38.0828421,-258.7920702,151.4361188,38.1771697,-258.8196272,103.6119781,45.5375613,-258.8523383,147.3715882,176.7158351,-258.9236973,26.4569293,18.0101999,-258.9236633,26.4569463,176.6751225,-259.0396918,36.6391687,176.6751225,-259.0396918,36.6391687,176.6343721,-339.2190615,36.5873164,97.328094,-339.0974876,36.5873292,45.5470347,-304.6250712,147.4925357,45.5470253,-304.6242036,118.2414135,49.7038557,-304.6514544,118.0685584,49.703851,-338.9759477,118.0685584,49.7052651,-304.6241866,147.4118473,45.5375613,-258.8523383,147.3715882,45.5470347,-304.6250712,147.4925357,53.2662249,-338.9759477,48.0095315,53.3612477,-341.32848,48.0654923,53.2662438,-338.9759477,113.0862182,97.3281129,-338.9759477,113.2977486,141.3899489,-339.2190275,48.009523,141.2949497,-341.4500198,48.0654881,149.1091532,-339.2190445,40.5384608,97.328094,-341.440562,48.6780253,97.3281223,-258.9130998,147.3982573,176.6751225,-259.0396918,40.4664662,176.6343721,-339.2190615,36.5873164,176.6751225,-259.0396918,36.6391687,176.6343721,-339.2190615,36.5873164,49.7052651,-304.6241866,147.4118473,97.3281223,-258.9130998,147.3982573,53.2662391,-341.4216804,113.6240446,97.3281129,-338.9759477,113.2977486,53.2662438,-338.9759477,113.0862182,53.2662391,-341.4216804,113.6240446,141.3899583,-339.2190275,113.0862097,141.2949497,-341.4500198,48.0654881,141.3899489,-339.2190275,48.009523,149.1091721,-339.2190275,117.7769186,97.328094,-341.440562,48.6780253,17.948904,-341.2352966,36.0863729,53.3612477,-341.32848,48.0654923,97.3323885,-258.7920532,174.3549705,176.6751225,-259.0396918,40.4664662,176.6343721,-339.2190615,40.5384566,176.6343721,-339.2190615,36.5873164,176.6343721,-339.2190615,40.5384566,97.3281223,-304.741593,147.4925357,53.2662391,-341.4216804,113.6240446,53.3612477,-341.32848,48.0654923,17.948904,-341.2353136,107.6661799,97.3281034,-339.2190275,113.2977571,97.3281034,-341.5432032,113.2977571,149.1091721,-339.2190275,117.7769186,141.3899583,-339.2190275,113.0862097,141.3899489,-339.2190275,48.009523,141.3899772,-341.5432373,113.6240446,97.328094,-341.440562,48.6780253,141.2949497,-341.4500198,48.0654881,176.7159107,-341.2352966,36.0863729,149.1092005,-304.8673004,118.241388,149.1091721,-339.2190275,117.7769186,149.1091532,-339.2190445,40.5384608,17.948904,-341.2352966,36.0863729,97.3324074,-341.2353136,36.0863814,156.5733742,-258.7920702,151.4361188,38.091398,-258.7920532,167.1765614,176.6751225,-259.0396918,40.4664662,149.0824213,-259.0396747,40.4664705,176.6343721,-339.2190615,40.5384566,176.6343721,-339.2190615,40.5384566,149.0824213,-259.0396747,40.4664705,149.1091532,-339.2190445,40.5384608,97.3281129,-339.0974706,147.4925357,144.9509748,-304.7457265,147.4118473,17.948904,-341.2353136,175.4106299,97.3281034,-341.5432032,113.2977571,97.3281034,-339.2190275,113.2977571,97.3281034,-341.5432032,113.2977571,97.3281129,-341.5432032,139.4537679,141.3899772,-341.5432373,113.6240446,97.3281034,-339.2190275,113.2977571,97.3281034,-341.5432032,113.2977571,97.3281129,-338.9759477,113.2977486,97.3281034,-339.2190275,113.2977571,97.3281086,-339.2080382,115.6623611,149.1091721,-339.2190275,117.7769186,97.3281034,-339.2190275,113.2977571,141.3899583,-339.2190275,113.0862097,141.3899583,-339.2190275,113.0862097,141.3899772,-341.5432373,113.6240446,176.7159107,-341.2353136,107.6661799,97.3324074,-341.2353136,36.0863814,149.0824213,-259.0396747,40.4664705,149.1092005,-304.8673004,118.241388,149.1091532,-339.2190445,40.5384608,149.1092005,-304.8673004,118.241388,144.9523653,-304.7730113,118.0685414,149.1091721,-339.2190275,117.7769186,156.5733836,-258.7920702,167.1765443,149.1186786,-258.9738782,147.3715712,149.0824213,-259.0396747,40.4664705,176.6751225,-259.0396918,40.4664662,97.3281129,-339.0974706,147.4925357,49.7052651,-304.6241866,147.4118473,49.7056624,-338.9759477,147.4143337,149.1186786,-258.9738782,147.3715712,97.3324074,-341.2352966,174.3008149,176.7159107,-341.2353136,175.4106299,97.3281034,-341.5432032,113.2977571,144.950568,-339.0974876,147.4143166,97.3281086,-339.2080382,115.6623611,97.3281129,-339.0974706,139.4537679,97.3281129,-338.9759477,113.2977486,97.3281086,-339.2080382,115.6623611,97.3281129,-339.0974706,139.4537679,144.9523653,-339.0974876,118.0685499,149.1186786,-258.9738782,147.3715712,149.1092005,-304.8673004,118.241388,149.0824213,-259.0396747,40.4664705,149.1092099,-304.8681679,147.4925187,144.9523653,-304.7730113,118.0685414,149.1092005,-304.8673004,118.241388,144.9523653,-339.0974876,118.0685499,144.9509748,-304.7457265,147.4118473,97.3281129,-339.0974706,147.4925357,144.950568,-339.0974876,147.4143166,97.3281129,-339.0974706,147.4925357,49.7056624,-338.9759477,147.4143337,149.1092099,-304.8681679,147.4925187,176.7159107,-341.2353136,175.4106299,97.3281034,-341.5432032,113.2977571,97.3324074,-341.2352966,174.3008149,97.3281086,-339.2080382,115.6623611,97.3281129,-341.5432032,139.4537679,97.3281034,-339.2190275,113.2977571,97.3281129,-339.0974706,139.4537679,97.3281129,-341.5432032,139.4537679,97.3281086,-339.2080382,115.6623611,97.3281129,-338.9759477,113.2977486,149.1186786,-258.9738782,147.3715712,149.1092099,-304.8681679,147.4925187,149.1092005,-304.8673004,118.241388,144.9509748,-304.7457265,147.4118473,176.715854,-258.9236973,151.4361018,49.703851,-338.9759477,118.0685584,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.788133f,0.6244696f,0.5896052f,0.6150565f,0.5896052f,0.6244696f,0.2844852f,0.6097605f,0.2844852f,0.6042193f,0.2435426f,0.6097605f,0.7881324f,0.6606416f,0.7881324f,0.6244691f,0.5896047f,0.6244691f,0.7881327f,0.6244693f,0.7881327f,0.6150562f,0.5896049f,0.6150562f,0.7881324f,0.6606416f,0.5896047f,0.6244691f,0.5896047f,0.6606416f,0.2435426f,0.6097605f,0.2844852f,0.6042193f,0.1665536f,0.6042193f,0.3495712f,0.7434008f,0.3647715f,0.640906f,0.328066f,0.640906f,0.5896046f,0.5782489f,0.5896047f,0.615056f,0.7881324f,0.615056f,0.7881331f,0.6606421f,0.5896052f,0.6606421f,0.674785f,0.8457609f,0.2322873f,0.6202381f,0.2435425f,0.6097605f,0.1665536f,0.6042193f,0.3647715f,0.7434551f,0.3647715f,0.640906f,0.3495712f,0.7434008f,0.3378145f,0.7434018f,0.3495712f,0.7434008f,0.328066f,0.640906f,0.7881324f,0.5782489f,0.5896046f,0.5782489f,0.7881324f,0.615056f,0.6747844f,0.8457602f,0.5896047f,0.6606416f,0.5896047f,0.8446537f,0.7881327f,0.9154478f,0.7881324f,0.6606416f,0.6747844f,0.8457602f,0.2435426f,0.7180821f,0.2435426f,0.6097605f,0.2322873f,0.6202381f,0.1661949f,0.6202586f,0.2322873f,0.6202381f,0.1665536f,0.6042193f,0.3281621f,0.8143475f,0.3378145f,0.7434018f,0.328066f,0.640906f,0.2594839f,0.6348833f,0.3647714f,0.6182833f,0.3647714f,0.6348947f,0.994089f,0.615056f,0.7955611f,0.5782489f,0.994089f,0.5782489f,0.6673341f,0.8632146f,0.6747844f,0.8457602f,0.5896047f,0.8446537f,0.7881327f,0.9154478f,0.6747844f,0.8457602f,0.6747824f,0.9154478f,0.2435426f,0.7180821f,0.2322873f,0.6202381f,0.2322873f,0.7125932f,0.1661949f,0.6202586f,0.1665536f,0.6042193f,0.2322873f,0.6202381f,0.1661949f,0.6202586f,0.227075f,0.6235066f,0.2322873f,0.6202381f,0.3380421f,0.8211411f,0.3378145f,0.7434018f,0.3281621f,0.8143475f,0.2594839f,0.6348834f,0.259483f,0.6182834f,0.3647715f,0.6182834f,0.2594839f,0.6348834f,0.259483f,0.6182834f,0.3647715f,0.6182834f,0.3647717f,0.6348951f,0.2594841f,0.6348838f,0.3647717f,0.6182837f,0.994089f,0.615056f,0.7955613f,0.615056f,0.7955611f,0.5782489f,0.6747824f,0.9154478f,0.6747844f,0.8457602f,0.6673341f,0.8632146f,0.6673341f,0.8632146f,0.5896047f,0.8446537f,0.5969934f,0.8632146f,0.66739f,0.9209891f,0.7881327f,0.9154478f,0.6747824f,0.9154478f,0.2322873f,0.6202381f,0.227075f,0.6235066f,0.2322873f,0.7125932f,0.2435426f,0.7180821f,0.2322873f,0.7125932f,0.1675928f,0.7125518f,0.2322873f,0.6202381f,0.227075f,0.6235066f,0.1661949f,0.6202586f,0.2322873f,0.6202381f,0.1665536f,0.6042193f,0.2435425f,0.6097605f,0.1661949f,0.6202586f,0.1664215f,0.6233091f,0.227075f,0.6235066f,0.3380421f,0.821141f,0.328162f,0.8143474f,0.2594851f,0.8144339f,0.9940886f,0.6244688f,0.7955609f,0.6150557f,0.9940886f,0.6150557f,0.2435426f,0.6097605f,0.1665536f,0.6042193f,0.2844852f,0.6042193f,0.6747824f,0.9154478f,0.6673341f,0.8632146f,0.66739f,0.9209891f,0.7881327f,0.9874872f,0.7881327f,0.9154478f,0.66739f,0.9209891f,0.2322873f,0.7125932f,0.227075f,0.6235066f,0.227075f,0.7083358f,0.1675928f,0.7125518f,0.2322873f,0.7125932f,0.227075f,0.7083358f,0.2322873f,0.7125932f,0.227075f,0.6235066f,0.2322873f,0.6202381f,0.227075f,0.6235066f,0.1664215f,0.6233091f,0.1661949f,0.6202586f,0.2435426f,0.7180821f,0.2322873f,0.6202381f,0.2435426f,0.6097605f,0.5771412f,0.6196232f,0.3979907f,0.5858347f,0.4782766f,0.6196232f,0.2594856f,0.8583415f,0.3380421f,0.8211411f,0.2594851f,0.8144341f,0.9940882f,0.6244686f,0.7955606f,0.6244686f,0.7955606f,0.6150555f,0.2435426f,0.6097605f,0.2844852f,0.6042193f,0.2844852f,0.6097605f,0.7881327f,0.9874872f,0.66739f,0.9209891f,0.6672306f,0.9874872f,0.4776734f,0.8104947f,0.4782766f,0.6196232f,0.3979906f,0.7872189f,0.2269993f,0.7083487f,0.1671625f,0.7121829f,0.1675273f,0.7125749f,0.1636743f,0.7084349f,0.2435426f,0.7180821f,0.2322873f,0.7125932f,0.2322873f,0.6202381f,0.2322873f,0.7125932f,0.227075f,0.7083358f,0.227075f,0.6235066f,0.5771412f,0.6196232f,0.4782766f,0.6196232f,0.3979907f,0.5858347f,0.8807409f,0.8457602f,0.7955613f,0.8446537f,0.7955613f,0.6606416f,0.397991f,0.7872197f,0.4782771f,0.6196238f,0.3979911f,0.5858353f,0.5771414f,0.6196234f,0.5771414f,0.5857509f,0.3979909f,0.5858349f,0.2594856f,0.8583415f,0.2594851f,0.8144341f,0.3380421f,0.8211411f,0.2594856f,0.8583415f,0.3380421f,0.8466899f,0.3380421f,0.8211411f,0.994089f,0.6244691f,0.994089f,0.6606416f,0.7955613f,0.6244691f,0.7955613f,0.6244691f,0.994089f,0.6606416f,0.7955613f,0.6606416f,0.6672306f,0.9874872f,0.66739f,0.9209891f,0.5971689f,0.9874872f,0.8733465f,0.9209891f,0.9940892f,0.9874872f,0.8731871f,0.9874872f,0.3979887f,0.9780205f,0.4776734f,0.8104947f,0.3979906f,0.7872189f,0.3979887f,0.9780205f,0.5771412f,0.8099297f,0.4776734f,0.8104947f,1.292352f,1.9212956f,1.2962044f,1.9254355f,1.2961189f,1.9651265f,0.227075f,0.7083358f,0.1675928f,0.7125518f,0.1637405f,0.7084118f,0.167597f,0.7125565f,0.1672322f,0.7121645f,0.167241f,0.7157705f,0.2435426f,0.7180821f,0.1675928f,0.7125518f,0.2322873f,0.7125932f,0.227075f,0.7083358f,0.2322873f,0.7125932f,0.1675928f,0.7125518f,0.4776734f,0.8123403f,0.3979906f,0.7872189f,0.4782766f,0.6196232f,0.3979902f,0.7872182f,0.3979904f,0.5858342f,0.4782762f,0.6196227f,0.577141f,0.619623f,0.3979906f,0.5858346f,0.577141f,0.5857505f,0.994089f,0.6606416f,0.8807409f,0.8457602f,0.7955613f,0.6606416f,0.8807409f,0.8457602f,0.8732906f,0.8632146f,0.7955613f,0.8446537f,0.2594856f,0.8583415f,0.3380421f,0.8211411f,0.3380421f,0.8466899f,0.3380419f,0.8211405f,0.2594849f,0.8144334f,0.3281618f,0.8143469f,0.3281621f,0.8143475f,0.328066f,0.640906f,0.3647715f,0.640906f,0.8733465f,0.9209891f,0.8731871f,0.9874872f,0.8031254f,0.9874872f,0.5971689f,0.9874872f,0.66739f,0.9209891f,0.5969935f,0.9209939f,0.9940892f,0.9154478f,0.9940892f,0.9874872f,0.8733465f,0.9209891f,0.3979887f,0.9780205f,0.5771412f,0.9747538f,0.5771412f,0.8099297f,0.3979887f,0.9780205f,0.4776734f,0.8123403f,0.5771412f,0.8117754f,0.2373568f,0.7596466f,0.1675851f,0.7157855f,0.1675928f,0.7125518f,0.1675072f,0.7483207f,0.1675952f,0.712552f,0.1672392f,0.7157659f,0.1675097f,0.7483208f,0.2373594f,0.7184911f,0.1675928f,0.7125518f,0.2435426f,0.7180821f,0.3979887f,0.9780205f,0.3979906f,0.7872189f,0.4776734f,0.8123403f,0.9940892f,0.9154478f,0.8807409f,0.8457602f,0.994089f,0.6606416f,0.8807389f,0.9154478f,0.8732906f,0.8632146f,0.8807409f,0.8457602f,0.7955613f,0.8446537f,0.8732906f,0.8632146f,0.8029499f,0.8632146f,0.3380421f,0.8211411f,0.3281621f,0.8143475f,0.3647715f,0.640906f,0.8733465f,0.9209891f,0.8031254f,0.9874872f,0.80295f,0.9209939f,0.1676379f,0.7593766f,0.2373568f,0.7596466f,0.1675072f,0.7483207f,0.9940892f,0.9154478f,0.8733465f,0.9209891f,0.8807389f,0.9154478f,0.3979887f,0.9780205f,0.5771412f,0.8117754f,0.5771412f,0.9747538f,-0.04111f,0.7668978f,-0.046573f,0.8118677f,-0.0410992f,0.7623982f,0.2373568f,0.7596466f,0.1675928f,0.7125518f,0.2373594f,0.7184911f,0.1676379f,0.7593766f,0.1675072f,0.7483207f,0.2373568f,0.7596466f,0.1675072f,0.7483207f,0.1636549f,0.7481028f,0.1675851f,0.7157855f,0.2373568f,0.7596466f,0.1675928f,0.7125518f,0.1675072f,0.7483207f,0.9940892f,0.9154478f,0.8807389f,0.9154478f,0.8807409f,0.8457602f,0.8807389f,0.9154478f,0.8733465f,0.9209891f,0.8732906f,0.8632146f,0.3380421f,0.8211411f,0.3647715f,0.640906f,0.3647715f,0.8211411f,0.2373568f,0.7596466f,0.2373594f,0.7184911f,0.1675928f,0.7125518f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,0,9,9,10,1,11,10,12,11,13,12,14,5,15,4,16,13,17,14,18,15,19,16,20,17,21,18,22,19,23,20,24,21,25,22,26,23,27,5,28,13,29,24,30,15,31,14,32,25,33,14,34,16,35,26,36,27,37,28,38,29,39,30,40,31,41,32,42,33,43,34,44,35,45,5,46,23,47,36,48,23,49,13,50,37,51,25,52,16,53,38,54,39,55,40,56,41,57,42,58,43,59,44,60,45,61,46,62,47,63,48,64,49,65,35,66,50,67,51,68,52,69,53,70,54,71,55,72,56,73,57,74,58,75,59,76,60,77,40,78,39,79,61,80,38,81,62,82,39,83,63,84,40,85,61,86,64,87,65,88,66,89,67,90,68,91,69,92,44,93,46,94,70,95,71,96,72,97,73,98,74,99,75,100,76,101,35,102,51,103,77,104,78,105,79,106,55,107,54,108,53,109,80,110,55,111,81,112,56,113,58,114,60,115,82,116,83,117,84,118,85,119,80,120,53,121,86,122,67,123,69,124,87,125,88,126,72,127,71,128,76,129,75,130,89,131,90,132,91,133,92,134,93,135,94,136,95,137,79,138,81,139,55,140,96,141,54,142,80,143,97,144,98,145,99,146,100,147,58,148,82,149,101,150,102,151,103,152,80,153,86,154,104,155,88,156,71,157,105,158,106,159,107,160,108,161,92,162,109,163,90,164,109,163,92,162,110,165,111,166,112,167,113,168,93,169,114,170,94,171,115,172,116,173,117,174,118,175,119,176,120,177,108,178,107,179,121,180,97,181,122,182,98,183,100,184,82,185,123,186,100,187,124,188,58,189,125,190,126,191,127,192,128,193,129,194,130,195,105,196,71,197,131,198,132,199,88,200,105,201,133,202,106,203,108,204,133,205,134,206,106,207,135,208,136,209,137,210,138,211,139,212,140,213,141,214,142,215,143,216,144,217,145,218,146,219,138,220,147,221,139,222,148,223,149,224,116,225,149,226,117,227,116,228,115,229,117,230,150,231,151,232,152,233,153,234,154,235,155,236,156,237,100,238,123,239,157,240,123,241,82,242,158,243,158,244,159,245,160,246,132,247,105,248,131,249,161,250,162,251,163,252,164,253,88,254,132,255,133,256,165,257,134,258,166,259,148,260,167,261,168,262,169,263,145,264,169,263,168,262,170,265,171,266,172,267,173,268,174,269,145,270,144,271,166,272,149,273,148,274,175,275,176,276,177,277,178,278,179,279,180,280,156,281,155,282,181,283,123,284,158,285,160,286,182,287,183,288,184,289,185,290,186,291,170,292,164,293,132,294,187,295,188,296,189,297,190,298,191,299,192,300,193,301,168,302,145,303,174,304,185,305,170,306,168,307,194,308,195,309,196,310,186,311,197,312,170,313,198,314,199,315,200,316,178,317,201,318,179,319,123,320,160,321,202,322,186,323,203,324,197,325,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID100(GL2 gl){
double[] positionsArray = {
49.703851,-338.9759477,118.0685584,45.54703,-338.9759477,117.7769271,97.3281129,-338.9759477,113.2977486,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 3, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID106(GL2 gl){
double[] positionsArray = {
168.3142127,-524.0207452,51.5019159,97.3280467,-524.0344982,37.5330127,168.3142127,-524.0345067,37.5329999,26.3418948,-524.0344897,37.5330255,26.3418948,-524.0207452,51.5019415,97.3280561,-524.0200223,52.0712266,168.3142127,-524.0207452,51.5019159,168.0006672,-522.6014759,52.9218526,97.3280561,-524.0200223,52.0712266,97.3280561,-524.0200223,52.0712266,26.6554403,-522.6014589,52.9218782,26.3418948,-524.0207452,51.5019415,22.1713721,-522.4812288,37.5310244,26.3418948,-524.0344897,37.5330255,26.6554497,-522.6188606,36.1121223,97.3280467,-524.0344982,37.5330127,97.3280467,-524.0344982,37.5330127,168.0006389,-522.6188776,36.1120968,168.3142127,-524.0345067,37.5329999,172.4847354,-522.4812459,37.5309946,171.5918209,-521.264027,52.8912283,168.0006672,-522.6014759,52.9218526,97.3280561,-522.600753,53.4886471,97.3280561,-524.0200223,52.0712266,23.0642961,-521.26401,52.8912539,26.6554403,-522.6014589,52.9218782,22.1713721,-522.4812288,37.5310244,26.3418948,-524.0207452,51.5019415,22.1713768,-522.4675014,51.4664083,22.1713721,-522.4812288,37.5310244,97.3280467,-524.0344982,37.5330127,26.6554497,-522.6188606,36.1121223,97.3280561,-522.6188691,36.1121053,172.4847354,-522.4812459,37.5309946,97.3280467,-524.0344982,37.5330127,97.3280561,-522.6188691,36.1121053,168.0006389,-522.6188776,36.1120968,168.3142127,-524.0207452,51.5019159,172.4847354,-522.4812459,37.5309946,172.4847354,-522.4675184,51.4663785,171.5918209,-521.264027,52.8912283,97.332379,-502.6512203,53.4627997,168.0006672,-522.6014759,52.9218526,172.4847354,-522.4675184,51.4663785,171.5918209,-521.264027,52.8912283,168.3142127,-524.0207452,51.5019159,168.0006672,-522.6014759,52.9218526,97.332379,-502.6512203,53.4627997,97.3280561,-522.600753,53.4886471,97.332379,-502.6512203,53.4627997,23.0642961,-521.26401,52.8912539,26.6554403,-522.6014589,52.9218782,26.3418948,-524.0207452,51.5019415,23.0642961,-521.26401,52.8912539,22.1713768,-522.4675014,51.4664083,26.6554403,-522.6014589,52.9218782,26.6554497,-522.6188606,36.1121223,22.1713721,-522.4812288,37.5310244,23.0643481,-521.2813947,36.1103938,19.6677333,-520.2164026,51.4433964,19.6677333,-520.2300961,37.5281208,97.3352641,-502.6693534,36.0863644,97.3280561,-522.6188691,36.1121053,26.6554497,-522.6188606,36.1121223,172.4847354,-522.4812459,37.5309946,168.0006389,-522.6188776,36.1120968,171.5917452,-521.2814117,36.1103682,168.0006389,-522.6188776,36.1120968,97.3280561,-522.6188691,36.1121053,97.3352641,-502.6693534,36.0863644,174.9883695,-520.2301131,37.528091,173.6520058,-519.4116368,52.8722398,97.332379,-502.6512203,53.4627997,171.5918209,-521.264027,52.8912283,173.6520058,-519.4116368,52.8722398,97.332379,-502.6512203,53.4627997,21.0041065,-519.4116198,52.8722696,23.0642961,-521.26401,52.8912539,21.0041065,-519.4116198,52.8722696,19.6677333,-520.2300961,37.5281208,17.9402488,-516.480187,37.5232885,22.1713768,-522.4675014,51.4664083,21.0041065,-519.4116198,52.8722696,19.6677333,-520.2164026,51.4433964,97.3352641,-502.6693534,36.0863644,26.6554497,-522.6188606,36.1121223,19.5166881,-516.2000754,36.1038372,174.9883695,-520.2301131,37.528091,175.1394147,-516.2000924,36.1038117,168.0006389,-522.6188776,36.1120968,97.3352641,-502.6693534,36.0863644,172.4847354,-522.4675184,51.4663785,174.9883695,-520.2301131,37.528091,174.9883695,-520.2164196,51.4433666,175.1394714,-516.1827757,52.8560612,97.332379,-502.6512203,53.4627997,173.6520058,-519.4116368,52.8722398,174.9883695,-520.2164196,51.4433666,173.6520058,-519.4116368,52.8722398,172.4847354,-522.4675184,51.4663785,97.332379,-502.6512203,53.4627997,19.5166408,-516.1827587,52.856091,21.0041065,-519.4116198,52.8722696,23.0643481,-521.2813947,36.1103938,19.6677333,-520.2300961,37.5281208,21.004168,-519.4289875,36.1080011,17.9402488,-516.480187,37.5232885,17.9402488,-516.4665275,51.4246718,17.9402488,-516.480187,37.5232885,19.6677333,-520.2164026,51.4433964,19.5166408,-516.1827587,52.856091,97.3352641,-502.6693534,36.0863644,19.5166881,-516.2000754,36.1038372,19.5253055,-502.6693534,36.0863729,174.9883695,-520.2301131,37.528091,171.5917452,-521.2814117,36.1103682,173.6519301,-519.4290045,36.107967,175.1394525,-502.6693662,36.0863558,175.1394147,-516.2000924,36.1038117,97.3352641,-502.6693534,36.0863644,176.7158729,-516.480204,37.5232587,175.1394714,-516.1827757,52.8560612,175.1394714,-516.1827757,52.8560612,172.0449942,-502.6519857,52.8734702,97.332379,-502.6512203,53.4627997,97.332379,-502.6512203,53.4627997,22.6197638,-502.6519687,52.873483,19.5166408,-516.1827587,52.856091,21.004168,-519.4289875,36.1080011,17.9402488,-516.480187,37.5232885,19.5166881,-516.2000754,36.1038372,19.6677333,-520.2164026,51.4433964,19.5166408,-516.1827587,52.856091,17.9402488,-516.4665275,51.4246718,17.9488756,-502.6582626,51.473033,19.5253055,-502.6693534,36.0863729,19.5166881,-516.2000754,36.1038372,17.9488756,-502.6680351,37.5054623,176.7158729,-516.480204,37.5232587,176.7158918,-502.6680564,37.5054453,175.1394147,-516.2000924,36.1038117,175.1394525,-502.6693662,36.0863558,176.7158729,-516.4665446,51.4246463,174.9883695,-520.2164196,51.4433666,176.7158729,-516.480204,37.5232587,176.7158729,-516.4665446,51.4246463,175.1394714,-516.1827757,52.8560612,174.9883695,-520.2164196,51.4433666,175.1394714,-516.1827757,52.8560612,174.8737424,-501.5984757,52.8511566,172.0449942,-502.6519857,52.8734702,22.6197638,-502.6519687,52.873483,19.791025,-501.5984715,52.8511736,19.5166408,-516.1827587,52.856091,17.9488756,-502.6680351,37.5054623,19.791025,-501.5984715,52.8511736,17.9488756,-502.6582626,51.473033,17.9488756,-502.6582626,51.473033,17.9488756,-502.6680351,37.5054623,17.9402488,-516.480187,37.5232885,176.7158729,-516.480204,37.5232587,173.6519301,-519.4290045,36.107967,175.1394147,-516.2000924,36.1038117,176.7158918,-502.6680564,37.5054453,176.7158918,-502.6582754,51.4730202,174.8737424,-501.5984757,52.8511566,176.7158918,-502.6582754,51.4730202,176.7158729,-516.480204,37.5232587,176.7158918,-502.6680564,37.5054453,176.7158918,-502.6582754,51.4730202,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.4837012f,0.1394144f,0.3007417f,0.0667925f,0.4837012f,0.0667925f,0.1177822f,0.0667925f,0.1177821f,0.1394144f,0.3007417f,0.1423741f,0.4837012f,0.139414f,0.4828938f,0.1467959f,0.3007417f,0.1423737f,0.3007417f,0.1423737f,0.1185895f,0.1467959f,0.1177821f,0.139414f,0.1177821f,0.139414f,0.1000396f,0.0667817f,0.1177821f,0.066792f,0.1177821f,0.066792f,0.1185898f,0.059405f,0.3007417f,0.066792f,0.3007417f,0.066792f,0.4828936f,0.059405f,0.4837012f,0.066792f,0.4837012f,0.139414f,0.4837012f,0.066792f,0.5014436f,0.0667817f,0.5010483f,0.1467499f,0.4828938f,0.1467959f,0.4837012f,0.139414f,0.4828938f,0.1467959f,0.3007417f,0.1497425f,0.3007417f,0.1423737f,0.1185895f,0.1467959f,0.1002228f,0.147011f,0.1177821f,0.139414f,0.3007417f,0.1497425f,0.1185895f,0.1467959f,0.3007417f,0.1423737f,0.1185897f,0.059405f,0.1177821f,0.066792f,0.1000396f,0.0667816f,0.1177821f,0.139414f,0.1000396f,0.1392292f,0.1000396f,0.0667817f,0.3007417f,0.066792f,0.1185898f,0.059405f,0.3007417f,0.0599885f,0.5014434f,0.0667816f,0.483701f,0.066792f,0.4828934f,0.059405f,0.3007417f,0.066792f,0.3007417f,0.0599885f,0.4828936f,0.059405f,0.4837012f,0.139414f,0.5014436f,0.0667817f,0.5014436f,0.1392292f,0.5015008f,0.1500307f,0.3007417f,0.212072f,0.4828938f,0.1467959f,0.5014436f,0.1392292f,0.5010483f,0.1467499f,0.4837012f,0.139414f,0.4828938f,0.1467959f,0.3007417f,0.212072f,0.3007417f,0.1497425f,0.3007417f,0.212072f,0.1002086f,0.1501212f,0.1185895f,0.1467959f,0.1177821f,0.139414f,0.1002228f,0.147011f,0.1000396f,0.1392292f,0.3007417f,0.212072f,0.1185895f,0.1467959f,0.3007417f,0.1497425f,0.1185898f,0.059405f,0.1000396f,0.0667817f,0.1005012f,0.059396f,0.1000396f,0.0667817f,0.086007f,0.1391096f,0.086007f,0.0667666f,0.1000396f,0.1392292f,0.3007417f,0.0225168f,0.3007417f,0.0599885f,0.1185898f,0.059405f,0.5014437f,0.0667817f,0.4828936f,0.059405f,0.5009822f,0.059396f,0.4828936f,0.059405f,0.3007417f,0.0599885f,0.3007417f,0.0225168f,0.5014436f,0.1392292f,0.5014436f,0.0667817f,0.5154763f,0.0667666f,0.5159248f,0.155471f,0.3007417f,0.212072f,0.5015008f,0.1500307f,0.5154723f,0.1466511f,0.5010483f,0.1467499f,0.5014436f,0.1392292f,0.3007417f,0.212072f,0.0861695f,0.1565797f,0.1002086f,0.1501212f,0.1002228f,0.147011f,0.0859675f,0.1470096f,0.1000396f,0.1392292f,0.1005012f,0.059396f,0.1000396f,0.0667816f,0.086007f,0.0667666f,0.0735914f,0.0667414f,0.086007f,0.0667666f,0.086007f,0.1391096f,0.1000396f,0.1392292f,0.0859675f,0.1470096f,0.086007f,0.1391096f,0.3007417f,0.0225168f,0.1185898f,0.059405f,0.0737705f,0.059362f,0.5154763f,0.0667666f,0.5014435f,0.0667816f,0.5009821f,0.059396f,0.5277128f,0.059362f,0.4828936f,0.059405f,0.3007417f,0.0225168f,0.5014436f,0.1392292f,0.5154763f,0.0667666f,0.5154763f,0.1391096f,0.523461f,0.1643199f,0.3007417f,0.212072f,0.5159248f,0.155471f,0.5154763f,0.1391096f,0.5154723f,0.1466511f,0.5014436f,0.1392292f,0.3007417f,0.212072f,0.0781355f,0.1664393f,0.0861695f,0.1565797f,0.1005012f,0.059396f,0.086007f,0.0667666f,0.0861809f,0.0591793f,0.0861809f,0.0591793f,0.086007f,0.0667666f,0.0735914f,0.0667414f,0.0735912f,0.1390122f,0.0735914f,0.0667414f,0.086007f,0.1391096f,0.0859675f,0.1470096f,0.0735905f,0.1470311f,0.086007f,0.1391096f,0.3007417f,0.0225168f,0.0737705f,0.059362f,0.0737705f,0.0233695f,0.5154763f,0.0667666f,0.5009822f,0.059396f,0.5153024f,0.0591793f,0.5277128f,0.0233695f,0.5277128f,0.059362f,0.3007417f,0.0225168f,0.527892f,0.0667414f,0.5154763f,0.1391096f,0.5154763f,0.0667666f,0.52776f,0.1467934f,0.5154723f,0.1466511f,0.5154763f,0.1391096f,0.523461f,0.1643199f,0.4991442f,0.2113419f,0.3007417f,0.212072f,0.3007417f,0.212072f,0.1023391f,0.2113419f,0.0781355f,0.1664393f,0.0861809f,0.0591793f,0.0735914f,0.0667414f,0.0737705f,0.059362f,0.086007f,0.1391096f,0.0735905f,0.1470311f,0.0735912f,0.1390122f,0.0228027f,0.1389179f,0.0735914f,0.0667414f,0.0735912f,0.1390122f,0.0226531f,0.0595447f,0.0737705f,0.059362f,0.0228257f,0.0669041f,0.527892f,0.0667414f,0.5154763f,0.0667666f,0.5153024f,0.0591793f,0.5786575f,0.0669041f,0.5277128f,0.059362f,0.5788302f,0.0595447f,0.5278921f,0.1390122f,0.5154763f,0.1391096f,0.527892f,0.0667414f,0.5278921f,0.1390122f,0.52776f,0.1467934f,0.5154763f,0.1391096f,0.523461f,0.1643199f,0.5237308f,0.2112258f,0.4991442f,0.2113419f,0.1023391f,0.2113419f,0.0777526f,0.2112258f,0.0781355f,0.1664393f,0.0737705f,0.059362f,0.0735914f,0.0667414f,0.0228257f,0.0669041f,0.0228323f,0.1466926f,0.0735912f,0.1390122f,0.0735905f,0.1470311f,0.0228323f,0.1466926f,0.0228027f,0.1389179f,0.0735912f,0.1390122f,0.0228027f,0.1389179f,0.0228257f,0.0669041f,0.0735914f,0.0667414f,0.5153024f,0.0591793f,0.5277128f,0.059362f,0.5786575f,0.0669041f,0.527892f,0.0667414f,0.5277128f,0.059362f,0.5786806f,0.1389179f,0.5278921f,0.1390122f,0.527892f,0.0667414f,0.5278921f,0.1390122f,0.578651f,0.1466926f,0.52776f,0.1467934f,0.5786806f,0.1389179f,0.527892f,0.0667414f,0.5786575f,0.0669041f,0.5786806f,0.1389179f,0.578651f,0.1466926f,0.5278921f,0.1390122f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,3,3,0,0,4,4,4,4,0,0,5,5,6,6,7,7,8,8,9,9,10,10,11,11,4,12,12,13,3,14,13,15,14,16,15,17,16,18,17,19,18,20,0,21,2,22,19,23,20,24,7,25,6,26,21,27,22,28,23,29,10,30,24,31,11,32,22,33,25,34,23,35,14,36,13,37,26,38,27,39,28,40,29,41,30,42,31,43,32,44,33,45,18,46,17,47,34,48,35,49,36,50,37,51,38,52,39,53,40,54,41,55,42,56,43,57,44,58,45,59,46,60,47,61,48,62,49,63,50,64,51,65,52,66,53,67,54,68,47,69,55,70,48,71,56,72,57,73,58,74,29,75,59,76,60,77,59,76,29,75,28,78,61,79,62,80,63,81,64,82,65,83,66,84,67,85,68,86,69,87,39,88,38,89,70,90,71,91,72,92,73,93,74,94,44,95,43,96,75,97,76,98,77,99,53,100,78,101,54,102,58,103,57,104,79,105,80,106,60,107,59,108,81,109,82,110,83,111,84,112,85,113,86,114,87,115,64,116,66,117,88,118,89,119,90,120,91,121,92,122,93,123,94,124,95,125,96,126,97,127,98,128,99,129,100,130,101,131,102,132,103,133,104,134,105,135,105,136,104,137,106,138,107,139,108,140,109,141,82,142,110,143,83,144,111,145,112,146,113,147,114,148,115,149,116,150,117,151,118,152,119,153,120,154,93,155,92,156,121,157,98,158,97,159,122,160,123,161,124,162,125,163,126,164,127,165,128,166,129,167,130,168,131,169,132,170,133,171,134,172,108,173,107,174,135,175,136,176,137,177,138,178,114,179,116,180,139,181,140,182,141,183,142,184,143,185,144,186,145,187,146,188,147,189,148,190,149,191,150,192,151,193,152,194,153,195,130,196,129,197,154,198,155,199,133,200,132,201,155,202,156,203,133,204,157,205,158,206,159,207,160,154,161,208,162,209,163,210,160,211,162,212,164,213,142,214,144,215,145,216,165,217,146,218,166,219,167,220,168,221,169,222,165,223,145,224,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID114(GL2 gl){
double[] positionsArray = {
175.1394147,-516.2000924,36.1038117,171.5917452,-521.2814117,36.1103682,168.0006389,-522.6188776,36.1120968,173.6519301,-519.4290045,36.107967,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 6, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID120(GL2 gl){
double[] positionsArray = {
26.6554497,-522.6188606,36.1121223,21.004168,-519.4289875,36.1080011,19.5166881,-516.2000754,36.1038372,23.0643481,-521.2813947,36.1103938,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 6, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID126(GL2 gl){
double[] positionsArray = {
148.1872555,-3.9955563,122.0467295,46.4863185,-21.2084942,122.0467466,46.4863138,-3.9955223,122.0467466,148.1872461,-21.2085282,122.0467295,46.4863138,-3.9955223,122.0467466,46.4863185,-21.2084942,122.0467466,46.4863185,-21.2084942,125.2778941,46.4863138,-3.9955223,125.2778941,148.1872555,-3.9955563,122.0467295,46.4863138,-3.9955223,122.0467466,148.1872555,-3.9955563,125.2778771,148.1872461,-21.2085282,122.0467295,148.1872555,-3.9955563,122.0467295,46.4863138,-3.9955223,125.2778941,46.4863138,-3.9955223,125.2778941,148.1872555,-3.9955563,125.2778771,148.1872555,-3.9955563,122.0467295,148.1872555,-3.9955563,125.2778771,148.1872555,-21.2085282,125.2778771,148.1872461,-21.2085282,122.0467295,46.4863185,-21.2084942,125.2778941,148.1872555,-3.9955563,125.2778771,46.4863138,-3.9955223,125.2778941,148.1872555,-21.2085282,125.2778771,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.3053074f,0.2394809f,0.5363278f,0.2978722f,0.5363278f,0.2394806f,0.3053074f,0.2978725f,0.2859968f,0.2393741f,0.2859969f,0.2986172f,0.2640499f,0.2978722f,0.2640499f,0.2394806f,0.0335321f,0.2206323f,0.2635469f,0.2207844f,0.0330292f,0.2394809f,0.0110823f,0.2986175f,0.0110822f,0.2393745f,0.2859968f,0.2393741f,0.2640499f,0.2978722f,0.2640499f,0.2394806f,0.2640499f,0.2394806f,0.0330292f,0.2394809f,0.0335321f,0.2206323f,0.0330292f,0.2394809f,0.0330292f,0.2978725f,0.0110823f,0.2986175f,0.2640499f,0.2978722f,0.0330292f,0.2394809f,0.2640499f,0.2394806f,0.0330292f,0.2978725f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,4,13,6,14,13,15,14,16,15,17,16,18,17,19,18,20,19,21,20,22,21,23,22,24,21,23,20,22,23,25,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID134(GL2 gl){
double[] positionsArray = {
23.5822558,-13.8462227,110.1972983,23.582095,-260.1411883,106.3987347,23.5821092,-260.1411883,110.1973068,23.5821092,-260.1411883,110.1973068,23.582095,-260.1411883,106.3987347,30.3663053,-260.1411883,106.3987347,23.5821092,-260.1411883,110.1973068,25.0598214,-67.496045,110.1972983,23.5822558,-13.8462227,110.1972983,30.36631,-260.1411883,110.1972983,23.5822558,-13.8462227,106.3987261,23.582095,-260.1411883,106.3987347,23.5822558,-13.8462227,110.1972983,30.3664567,-13.8462227,106.3987261,30.3663053,-260.1411883,106.3987347,23.582095,-260.1411883,106.3987347,30.36631,-260.1411883,110.1972983,25.0598214,-67.496045,110.1972983,30.3664567,-13.8462227,110.1972983,23.5822558,-13.8462227,110.1972983,30.36631,-260.1411883,110.1972983,30.3664567,-13.8462227,110.1972983,23.5822558,-13.8462227,106.3987261,23.5822558,-13.8462227,110.1972983,30.3664567,-13.8462227,106.3987261,23.582095,-260.1411883,106.3987347,23.5822558,-13.8462227,106.3987261,30.3664567,-13.8462227,110.1972983,30.3663053,-260.1411883,106.3987347,30.3664567,-13.8462227,106.3987261,30.3664567,-13.8462227,110.1972983,30.36631,-260.1411883,110.1972983,30.3663053,-260.1411883,106.3987347,30.3664567,-13.8462227,106.3987261,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.2821498f,0.3130264f,0.270977f,0.5827265f,0.2825952f,0.5827265f,0.2825952f,0.5827265f,0.270977f,0.5827265f,0.2708174f,0.5907527f,0.2825952f,0.5827265f,0.2838502f,0.371762f,0.2821498f,0.3130264f,0.2899569f,0.582669f,0.2705316f,0.3130264f,0.270977f,0.5827265f,0.2821498f,0.3130264f,0.2631698f,0.313084f,0.2638219f,0.582669f,0.270977f,0.5827265f,0.2825952f,0.5827265f,0.2708174f,0.5907527f,0.2824951f,0.5907526f,0.2838502f,0.371762f,0.2893049f,0.3130839f,0.2821498f,0.3130264f,0.2899569f,0.582669f,0.2823094f,0.3054257f,0.2705316f,0.3130264f,0.2821498f,0.3130264f,0.2631698f,0.313084f,0.270977f,0.5827265f,0.2705316f,0.3130264f,0.3104541f,0.3130263f,0.298077f,0.5827265f,0.2976142f,0.3130264f,0.3104541f,0.3130263f,0.3109168f,0.5827264f,0.298077f,0.5827265f,0.2823094f,0.3054257f,0.2706317f,0.3054257f,0.2705316f,0.3130264f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,7,7,6,6,9,9,10,10,11,11,12,12,13,13,14,14,15,15,3,16,5,17,16,18,17,19,18,20,19,21,18,20,17,19,20,22,21,23,22,24,23,25,24,26,25,27,26,28,27,29,28,30,29,31,30,32,31,33,32,34,21,35,33,36,22,37,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID142(GL2 gl){
double[] positionsArray = {
25.0596332,-23.034365,131.0548058,25.0596284,-25.8407198,108.8371925,25.0596332,-25.8407198,131.0548143,25.0596332,-25.8407198,131.0548143,25.0596284,-25.8407198,108.8371925,28.3385514,-25.8407198,108.8371925,25.0596284,-23.034365,108.8371925,25.0596284,-25.8407198,108.8371925,25.0596332,-23.034365,131.0548058,28.3385562,-25.8407198,131.0548058,25.0596332,-23.034365,131.0548058,28.3385467,-23.034365,108.8371925,25.0596284,-23.034365,108.8371925,28.3385514,-23.034365,131.0548058,28.3385514,-23.034365,131.0548058,28.3385562,-25.8407198,131.0548058,28.3385514,-25.8407198,108.8371925,28.3385514,-23.034365,131.0548058,28.3385514,-25.8407198,108.8371925,28.3385467,-23.034365,108.8371925,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.966621f,0.5257632f,0.9628023f,0.4641285f,0.9628023f,0.5257789f,0.9628023f,0.5257789f,0.9628023f,0.4641285f,0.9607593f,0.4641285f,0.966621f,0.4641128f,0.9628023f,0.4641285f,0.966621f,0.5257632f,0.9628023f,0.5257789f,0.9607593f,0.4641285f,0.9607593f,0.5257789f,0.966621f,0.5257632f,0.9686641f,0.4641128f,0.966621f,0.4641128f,0.9686641f,0.5257632f,0.9752413f,0.5257632f,0.9706455f,0.5257789f,0.9706455f,0.4641285f,0.9706455f,0.4641285f,0.9752413f,0.4641128f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,3,9,5,10,9,11,10,12,11,13,12,14,11,13,10,12,13,15,14,16,15,17,16,18,17,16,18,19,19,20,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID150(GL2 gl){
double[] positionsArray = {
23.5822605,-13.8462227,133.5162542,23.5821139,-260.1412053,129.7176906,23.5821139,-260.1412053,133.5162542,23.5821139,-260.1412053,133.5162542,23.5821139,-260.1412053,129.7176906,30.36631,-260.1411883,129.7176906,30.36631,-260.1411883,133.5162542,23.5822605,-13.8462227,133.5162542,23.5821139,-260.1412053,133.5162542,23.5822605,-13.8462227,129.7176821,30.3664567,-13.8462227,129.7176821,30.36631,-260.1411883,129.7176906,23.5821139,-260.1412053,129.7176906,23.5821139,-260.1412053,133.5162542,30.36631,-260.1411883,129.7176906,30.36631,-260.1411883,133.5162542,30.3664614,-13.8462227,133.5162542,30.3664614,-13.8462227,133.5162542,23.5822605,-13.8462227,129.7176821,23.5822605,-13.8462227,133.5162542,30.3664567,-13.8462227,129.7176821,23.5821139,-260.1412053,129.7176906,23.5822605,-13.8462227,129.7176821,30.3664614,-13.8462227,133.5162542,30.36631,-260.1411883,129.7176906,30.3664567,-13.8462227,129.7176821,30.3664614,-13.8462227,133.5162542,30.36631,-260.1411883,133.5162542,30.36631,-260.1411883,129.7176906,30.3664567,-13.8462227,129.7176821,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.219f,0.3130266f,0.2078273f,0.5827267f,0.2194455f,0.5827267f,0.2194455f,0.5827267f,0.2078273f,0.5827267f,0.2076677f,0.5907528f,0.2268072f,0.5826691f,0.219f,0.3130266f,0.2194455f,0.5827267f,0.2073818f,0.3130266f,0.2078273f,0.5827267f,0.219f,0.3130266f,0.2000201f,0.3130842f,0.2006722f,0.5826692f,0.2078273f,0.5827267f,0.2194455f,0.5827267f,0.2076677f,0.5907528f,0.2193454f,0.5907528f,0.2261551f,0.3130841f,0.219f,0.3130266f,0.2268072f,0.5826691f,0.2191596f,0.3054259f,0.2073818f,0.3130266f,0.219f,0.3130266f,0.2000201f,0.3130842f,0.2078273f,0.5827267f,0.2073818f,0.3130266f,0.2473044f,0.3130265f,0.2349273f,0.5827267f,0.2344645f,0.3130266f,0.2473044f,0.3130265f,0.2477672f,0.5827267f,0.2349273f,0.5827267f,0.2191596f,0.3054259f,0.2074819f,0.3054259f,0.2073818f,0.3130266f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,1,10,0,11,10,12,11,13,12,14,13,15,14,16,15,17,16,18,7,19,6,20,17,21,18,22,19,23,20,24,21,25,22,26,23,27,24,28,25,29,26,30,27,31,28,32,17,33,29,34,18,35,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID158(GL2 gl){
double[] positionsArray = {
37.203757,-32.3586931,157.3447325,37.2037286,-197.4351189,157.3447325,29.5306003,-200.7117114,151.4807035,37.203757,-32.3586931,157.3447325,29.5306003,-200.7117114,151.4807035,29.5306428,-29.0820666,151.4807205,29.5306428,-29.0820666,151.4807205,29.5306003,-200.7117114,151.4807035,21.8574767,-197.4351189,157.3447325,29.5306428,-29.0820666,151.4807205,21.8574767,-197.4351189,157.3447325,21.8575192,-32.3586931,157.3447325,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.2785962f,0.651848f,0.2785963f,0.7948113f,0.2905834f,0.797649f,0.2785962f,0.651848f,0.2905834f,0.797649f,0.2905831f,0.6490102f,0.2905831f,0.6490102f,0.2905834f,0.797649f,0.3025702f,0.7948113f,0.2905831f,0.6490102f,0.3025702f,0.7948113f,0.3025701f,0.651848f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID166(GL2 gl){
double[] positionsArray = {
151.8376145,-523.5435673,44.8796405,151.8376051,-533.1949219,44.8796405,150.9104292,-533.1949389,41.7647827,151.8376145,-523.5435673,44.8796405,150.9104292,-533.1949219,47.9944982,151.8376051,-533.1949219,44.8796405,150.9104386,-523.5435673,47.9944982,151.8376051,-533.1949219,44.8796405,138.9237449,-533.1949389,41.7647827,150.9104292,-533.1949389,41.7647827,137.996569,-533.1949389,44.8796405,150.9104386,-523.5435673,41.7647827,151.8376145,-523.5435673,44.8796405,150.9104292,-533.1949389,41.7647827,150.9104292,-533.1949219,47.9944982,137.996569,-533.1949389,44.8796405,151.8376051,-533.1949219,44.8796405,138.9237449,-533.1949389,47.9945025,150.9104386,-523.5435673,47.9944982,148.3773579,-523.5435673,50.274734,150.9104292,-533.1949219,47.9944982,150.9104292,-533.1949389,41.7647827,141.4568257,-533.1949389,39.484547,148.3773484,-533.1949389,39.484547,138.9237449,-533.1949389,41.7647827,137.996569,-533.1949389,44.8796405,138.9237449,-523.5435673,41.7647827,138.9237449,-533.1949389,41.7647827,137.9965785,-523.5435673,44.8796447,150.9104386,-523.5435673,41.7647827,150.9104292,-533.1949389,41.7647827,148.3773484,-533.1949389,39.484547,148.3773484,-533.1949389,50.2747383,138.9237449,-533.1949389,47.9945025,150.9104292,-533.1949219,47.9944982,141.4568351,-533.1949389,50.2747383,138.9237544,-523.5435673,47.9945025,137.996569,-533.1949389,44.8796405,138.9237449,-533.1949389,47.9945025,137.9965785,-523.5435673,44.8796447,150.9104292,-533.1949219,47.9944982,148.3773579,-523.5435673,50.274734,148.3773484,-533.1949389,50.2747383,144.9170823,-533.1949389,38.649925,141.4568351,-523.5435673,39.484547,141.4568257,-533.1949389,39.484547,138.9237449,-533.1949389,41.7647827,141.4568351,-523.5435673,39.484547,138.9237449,-533.1949389,41.7647827,138.9237449,-523.5435673,41.7647827,150.9104386,-523.5435673,41.7647827,148.3773484,-533.1949389,39.484547,148.3773484,-523.5435673,39.484547,144.9170823,-533.1949389,51.1093603,141.4568351,-533.1949389,50.2747383,148.3773484,-533.1949389,50.2747383,141.4568351,-533.1949389,50.2747383,138.9237544,-523.5435673,47.9945025,138.9237449,-533.1949389,47.9945025,148.3773579,-523.5435673,50.274734,144.9171012,-523.5435673,51.1093603,148.3773484,-533.1949389,50.2747383,144.9171012,-523.5435673,38.649925,144.9170823,-533.1949389,38.649925,141.4568257,-533.1949389,39.484547,148.3773484,-523.5435673,39.484547,148.3773484,-533.1949389,39.484547,144.9170823,-533.1949389,38.649925,144.9171012,-523.5435673,38.649925,141.4568257,-533.1949389,39.484547,141.4568351,-523.5435673,39.484547,148.3773484,-533.1949389,50.2747383,144.9171012,-523.5435673,51.1093603,144.9170823,-533.1949389,51.1093603,144.9170823,-533.1949389,51.1093603,141.4568351,-523.5435673,50.274734,141.4568351,-533.1949389,50.2747383,141.4568351,-523.5435673,50.274734,138.9237544,-523.5435673,47.9945025,141.4568351,-533.1949389,50.2747383,148.3773484,-523.5435673,39.484547,144.9170823,-533.1949389,38.649925,144.9171012,-523.5435673,38.649925,144.9171012,-523.5435673,51.1093603,141.4568351,-523.5435673,50.274734,144.9170823,-533.1949389,51.1093603,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.7381486f,0.2195409f,0.7381486f,0.347559f,0.7274805f,0.347559f,0.7381486f,0.2195409f,0.7488168f,0.347559f,0.7381486f,0.347559f,0.7488168f,0.2195409f,0.7317904f,0.2145654f,0.7446154f,0.1667022f,0.7446154f,0.211129f,0.7317904f,0.1632658f,0.7274805f,0.2195409f,0.7381486f,0.2195409f,0.7274805f,0.347559f,0.7189659f,0.2111289f,0.7317906f,0.1632658f,0.7317906f,0.2145653f,0.7189659f,0.1667022f,0.7488168f,0.2195409f,0.7594849f,0.2195409f,0.7488168f,0.347559f,0.7446156f,0.2111289f,0.7540041f,0.1760907f,0.7540041f,0.2017405f,0.7446156f,0.1667022f,0.8021583f,0.3475597f,0.8128263f,0.2195416f,0.8128263f,0.3475597f,0.8021583f,0.2195416f,0.7274805f,0.2195409f,0.7274805f,0.347559f,0.7168123f,0.347559f,0.7095772f,0.2017405f,0.7189656f,0.1667022f,0.7189656f,0.2111289f,0.7095772f,0.1760907f,0.7914894f,0.2195408f,0.8021576f,0.3475589f,0.7914894f,0.3475589f,0.8021576f,0.2195408f,0.7488168f,0.347559f,0.7594849f,0.2195409f,0.7594849f,0.347559f,0.7540041f,0.1760907f,0.7574404f,0.1889156f,0.7540041f,0.2017405f,0.823494f,0.2195409f,0.823494f,0.347559f,0.8128257f,0.347559f,0.823494f,0.2195409f,0.8128257f,0.347559f,0.8128257f,0.2195409f,0.7274805f,0.2195409f,0.7168123f,0.347559f,0.7168123f,0.2195409f,0.7061408f,0.1889156f,0.7095774f,0.1760907f,0.7095774f,0.2017405f,0.7808214f,0.347559f,0.7914894f,0.2195409f,0.7914894f,0.347559f,0.7594849f,0.2195409f,0.7701531f,0.2195409f,0.7594849f,0.347559f,0.8341622f,0.2195409f,0.8341622f,0.347559f,0.823494f,0.347559f,0.7168123f,0.2195409f,0.7168123f,0.347559f,0.7061442f,0.347559f,0.8341622f,0.2195409f,0.823494f,0.347559f,0.823494f,0.2195409f,0.7594849f,0.347559f,0.7701531f,0.2195409f,0.7701531f,0.347559f,0.7701531f,0.347559f,0.7808214f,0.2195409f,0.7808214f,0.347559f,0.7808214f,0.2195409f,0.7914894f,0.2195409f,0.7808214f,0.347559f,0.7168123f,0.2195409f,0.7061442f,0.347559f,0.7061442f,0.2195409f,0.7701531f,0.2195409f,0.7808214f,0.2195409f,0.7701531f,0.347559f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,4,4,3,3,6,6,7,7,8,8,9,9,8,8,7,7,10,10,11,11,12,12,13,13,14,14,15,15,16,16,15,15,14,14,17,17,18,18,19,19,20,20,21,21,22,22,23,23,22,22,21,21,24,24,25,25,26,26,27,27,26,26,25,25,28,28,29,29,30,30,31,31,32,32,33,33,34,34,33,33,32,32,35,35,36,36,37,37,38,38,37,37,36,36,39,39,40,40,41,41,42,42,22,43,43,44,23,45,44,46,45,47,46,48,47,49,48,50,49,51,50,52,51,53,52,54,53,55,54,56,55,57,56,58,57,59,58,60,59,61,60,62,61,63,62,64,63,65,64,66,65,67,66,68,67,69,68,70,69,71,70,72,71,73,72,74,73,75,74,76,75,77,76,78,77,79,78,80,79,81,80,82,81,83,82,84,83,85,84,86,85,87,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID174(GL2 gl){
double[] positionsArray = {
23.698245,-271.5292448,33.5432313,16.4706516,-269.4269707,27.8455094,24.2289084,-272.2257049,31.5254671,24.2289084,-272.2257049,31.5254671,16.4706516,-269.4269707,27.8455094,17.9983806,-269.0355426,26.189949,38.3719969,-276.501578,37.0907718,23.698245,-271.5292448,33.5432313,15.4391119,-268.5493491,29.6207485,16.4706516,-269.4269707,27.8455094,19.0687552,-262.7822183,28.4721815,17.9983806,-269.0355426,26.189949,16.4706516,-269.4269707,27.8455094,24.2289084,-272.2257049,31.5254671,17.9983806,-269.0355426,26.189949,25.2557753,-271.6531321,29.6273902,38.6518155,-274.8404026,38.4894848,23.698245,-271.5292448,33.5432313,38.3719969,-276.501578,37.0907718,38.7220929,-277.1361029,35.0212618,23.8664681,-269.8297619,34.9099618,15.4391119,-268.5493491,29.6207485,15.4391119,-268.5493491,29.6207485,19.0687552,-262.7822183,28.4721815,16.4706516,-269.4269707,27.8455094,16.1006345,-264.6845682,31.0312547,17.5410215,-263.1736294,30.1277419,19.0687552,-262.7822183,28.4721815,20.1003091,-263.65984,26.6969254,17.9983806,-269.0355426,26.189949,25.2557753,-271.6531321,29.6273902,17.9983806,-269.0355426,26.189949,19.4387676,-267.5246038,25.2864362,38.7220929,-277.1361029,35.0212618,23.8664681,-269.8297619,34.9099618,15.2977625,-266.7379202,30.8375889,15.4391119,-268.5493491,29.6207485,25.8001546,-266.1535252,34.0502247,17.5410215,-263.1736294,30.1277419,16.1006345,-264.6845682,31.0312547,26.8270262,-265.5809524,32.1521393,19.0687552,-262.7822183,28.4721815,17.5410215,-263.1736294,30.1277419,16.1006345,-264.6845682,31.0312547,15.4391119,-268.5493491,29.6207485,15.2977625,-266.7379202,30.8375889,27.3576896,-266.2774125,30.1343836,20.1003091,-263.65984,26.6969254,19.0687552,-262.7822183,28.4721815,20.1003091,-263.65984,26.6969254,19.4387676,-267.5246038,25.2864362,17.9983806,-269.0355426,26.189949,26.3865992,-270.0302304,28.5740043,25.2557753,-271.6531321,29.6273902,19.4387676,-267.5246038,25.2864362,38.7220929,-277.1361029,35.0212618,25.2557753,-271.6531321,29.6273902,39.568397,-276.501578,33.071439,39.4546686,-272.7870507,38.6831336,23.8664681,-269.8297619,34.9099618,38.6518155,-274.8404026,38.4894848,24.6693212,-267.7764269,35.1036106,15.2977625,-266.7379202,30.8375889,23.8664681,-269.8297619,34.9099618,25.8001546,-266.1535252,34.0502247,26.8270262,-265.5809524,32.1521393,17.5410215,-263.1736294,30.1277419,25.8001546,-266.1535252,34.0502247,16.1006345,-264.6845682,31.0312547,24.6693212,-267.7764269,35.1036106,26.8270262,-265.5809524,32.1521393,27.3576896,-266.2774125,30.1343836,19.0687552,-262.7822183,28.4721815,24.6693212,-267.7764269,35.1036106,16.1006345,-264.6845682,31.0312547,15.2977625,-266.7379202,30.8375889,27.3576896,-266.2774125,30.1343836,27.1894665,-267.9768954,28.7676531,20.1003091,-263.65984,26.6969254,20.1003091,-263.65984,26.6969254,20.2416396,-265.4712689,25.480085,19.4387676,-267.5246038,25.2864362,20.2416396,-265.4712689,25.480085,26.3865992,-270.0302304,28.5740043,19.4387676,-267.5246038,25.2864362,27.1894665,-267.9768954,28.7676531,39.568397,-276.501578,33.071439,39.4546686,-272.7870507,38.6831336,41.3202107,-270.4913504,35.647934,40.4739065,-271.1258753,37.5977567,41.6703114,-271.1258753,33.5784239,41.3904881,-272.7870507,32.179711,27.1894665,-267.9768954,28.7676531,20.2416396,-265.4712689,25.480085,20.1003091,-263.65984,26.6969254,40.5876255,-274.8404026,31.9860621,40.5876255,-274.8404026,31.9860621,39.4546686,-272.7870507,38.6831336,41.3202107,-270.4913504,35.647934,40.4739065,-271.1258753,37.5977567,41.6703114,-271.1258753,33.5784239,41.3904881,-272.7870507,32.179711,40.5876255,-274.8404026,31.9860621,27.1894665,-267.9768954,28.7676531,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.3768876f,0.3690941f,0.3667054f,0.3181828f,0.3667054f,0.3690941f,0.3667054f,0.3690941f,0.3667054f,0.3181828f,0.3565231f,0.3181828f,0.3768876f,0.4200054f,0.3768876f,0.3690941f,0.3667054f,0.3690941f,0.3768876f,0.3690941f,0.3768876f,0.3181828f,0.3667054f,0.3181828f,0.485937f,0.3769592f,0.5020257f,0.4264751f,0.485937f,0.4317026f,0.3667054f,0.3690941f,0.3565231f,0.3181828f,0.3565231f,0.3690941f,0.3870699f,0.4200054f,0.3768876f,0.3690941f,0.3768876f,0.4200054f,0.3768876f,0.4200054f,0.3667054f,0.3690941f,0.3667054f,0.4200054f,0.3870699f,0.3690941f,0.3768876f,0.3181828f,0.3768876f,0.3690941f,0.4698491f,0.4264749f,0.4859378f,0.3769591f,0.4859377f,0.4317024f,0.4599057f,0.3958724f,0.4698491f,0.3821866f,0.485937f,0.3769592f,0.5020257f,0.3821867f,0.5020257f,0.4264751f,0.3565231f,0.3690941f,0.3565231f,0.3181828f,0.3463408f,0.3181828f,0.3667054f,0.4200054f,0.3667054f,0.3690941f,0.3565231f,0.3690941f,0.3870699f,0.4200054f,0.3870699f,0.3690941f,0.3768876f,0.3690941f,0.3870699f,0.3690941f,0.3870699f,0.3181828f,0.3768876f,0.3181828f,0.4076784f,0.3690941f,0.4076784f,0.3181828f,0.3973742f,0.3181828f,0.4178607f,0.3690941f,0.4178607f,0.3181828f,0.4076784f,0.3181828f,0.459905f,0.3958726f,0.4698483f,0.426475f,0.459905f,0.4127892f,0.4280429f,0.3690941f,0.4280429f,0.3181828f,0.4178607f,0.3181828f,0.5020257f,0.3821867f,0.511969f,0.4127892f,0.5020257f,0.4264751f,0.3463408f,0.3690941f,0.3565231f,0.3690941f,0.3463408f,0.3181828f,0.3667054f,0.4200054f,0.3565231f,0.3690941f,0.3565231f,0.4200054f,0.3973742f,0.4200054f,0.3870699f,0.4200054f,0.3973742f,0.3690941f,0.3870699f,0.3181828f,0.3870699f,0.3690941f,0.4076784f,0.3690941f,0.4178607f,0.3690941f,0.4076784f,0.3181828f,0.4076784f,0.3690941f,0.3973742f,0.3181828f,0.3973742f,0.3690941f,0.4178607f,0.3690941f,0.4280429f,0.3690941f,0.4178607f,0.3181828f,0.3973742f,0.3690941f,0.3973742f,0.3181828f,0.3870699f,0.3181828f,0.4280429f,0.3690941f,0.4382252f,0.3690941f,0.4280429f,0.3181828f,0.5020257f,0.3821867f,0.511969f,0.3958726f,0.511969f,0.4127892f,0.3361582f,0.3181841f,0.3463405f,0.3690954f,0.3463404f,0.3181841f,0.3361582f,0.3690954f,0.3565231f,0.4200054f,0.3565231f,0.3690941f,0.3463408f,0.3690941f,0.3973742f,0.4200054f,0.3973742f,0.3690941f,0.3870699f,0.3690941f,0.4178607f,0.4200054f,0.4178607f,0.3690941f,0.4076784f,0.4200054f,0.4076784f,0.3690941f,0.3973742f,0.3690941f,0.4280429f,0.4200054f,0.4280429f,0.3690941f,0.4178607f,0.3690941f,0.4382252f,0.4200054f,0.4382252f,0.3690941f,0.4280429f,0.3690941f,0.4382252f,0.3690941f,0.4382252f,0.3181828f,0.4280429f,0.3181828f,0.3463408f,0.4200054f,0.3463408f,0.3690941f,0.3361585f,0.3690941f,0.3463408f,0.4200054f,0.3565231f,0.4200054f,0.3463408f,0.3690941f,0.4076784f,0.4200054f,0.3973742f,0.3690941f,0.3973742f,0.4200054f,0.4178607f,0.4200054f,0.4280429f,0.4200054f,0.4178607f,0.3690941f,0.4076784f,0.4200054f,0.4178607f,0.4200054f,0.4076784f,0.3690941f,0.4280429f,0.4200054f,0.4382252f,0.4200054f,0.4280429f,0.3690941f,0.3361585f,0.4200054f,0.3463408f,0.4200054f,0.3361585f,0.3690941f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,0,7,2,8,7,9,8,10,9,11,10,12,11,13,12,14,13,15,14,16,15,17,16,18,17,19,18,20,6,21,2,22,19,23,20,24,21,25,17,26,22,27,23,28,24,29,23,28,22,27,25,30,23,28,25,30,26,31,27,32,28,33,29,34,30,35,31,36,32,37,33,38,13,39,15,40,16,41,20,42,17,43,34,44,35,45,36,46,37,47,38,48,39,49,40,50,41,51,42,52,43,53,44,54,45,55,46,56,47,57,48,58,49,59,50,60,51,61,52,62,53,63,54,64,55,65,56,66,57,67,58,68,59,44,60,69,61,70,62,71,63,72,64,73,65,74,66,75,67,76,68,77,69,78,70,79,71,80,72,81,73,82,74,83,75,84,76,85,77,86,78,87,79,88,80,89,81,90,82,91,83,92,84,93,83,92,82,91,85,94,86,95,53,96,52,97,87,98,61,99,63,100,88,101,65,102,64,76,89,103,67,104,69,105,90,106,71,107,70,108,91,109,77,110,76,111,92,112,93,113,94,114,95,115,83,116,85,117,96,118,86,119,52,120,89,121,69,122,97,123,98,124,90,125,70,126,99,127,88,128,64,129,100,130,91,131,76,132,101,133,102,134,103,135,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID182(GL2 gl){
double[] positionsArray = {
54.2033992,-100.9218448,48.3790583,17.957493,-100.9698824,48.3529938,54.2014317,-100.1597413,38.1018721,17.957493,-100.1597413,38.1018763,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,3,2,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 6, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID188(GL2 gl){
double[] positionsArray = {
40.9923581,-20.8490968,167.5286749,38.082757,-20.8491308,167.1765614,38.0999917,-90.8297317,167.1765614,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 3, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID194(GL2 gl){
double[] positionsArray = {
59.1471155,-482.5916709,167.0206086,59.1471155,-484.1084031,167.0203617,35.3224416,-485.6016936,167.0208555,159.3509574,-469.9318613,167.0208555,61.423813,-482.3893411,167.0203787,60.7485791,-482.3893411,167.0206146,159.3509574,-485.6016978,167.0208555,61.423813,-484.1084031,167.0203617,35.3224416,-469.9318571,167.0208555,59.1471155,-482.5916709,167.0206086,35.3224416,-485.6016936,167.0208555,59.1471155,-482.3893411,167.0203617,59.1471156,-469.9318579,167.0206171,60.7485791,-482.3893411,167.0206146,61.423813,-469.931858,167.0206171,159.3509574,-469.9318613,167.0208555,135.5091102,-469.9318605,167.0206171,133.2324128,-469.9318604,167.0206171,59.1471155,-482.5916709,167.0206086,61.423813,-484.1084031,167.0203617,59.1471155,-484.1084031,167.0203617,60.7485791,-482.3893411,167.0206146,61.423813,-482.3893411,167.0203787,160.789708,-485.6016978,167.9231252,159.3509574,-485.6016978,167.0208555,159.3509574,-469.9318613,167.0208555,159.3509574,-485.6016978,167.0208555,35.3224416,-486.8953405,167.9231252,35.3224416,-485.6016936,167.0208555,60.7485791,-482.3893411,167.0206146,59.1471155,-482.5916709,167.0206086,59.1471155,-482.3893411,167.0203617,35.3224416,-469.9318571,167.0208555,35.3224416,-485.6016936,167.0208555,33.883691,-469.9318571,167.9231252,159.3509574,-468.6382144,167.9231252,59.1471156,-469.9318579,167.0206171,35.3224416,-469.9318571,167.0208555,61.423813,-469.931858,167.0206171,133.2324128,-469.9318604,167.0206171,135.5091102,-469.9318605,167.0206171,159.3509574,-469.9318613,167.0208555,160.789708,-485.6016978,167.9231252,159.3509574,-486.8953448,167.9231252,159.3509574,-485.6016978,167.0208555,160.789708,-469.9318613,167.9231252,35.3224416,-485.6016936,167.0208555,35.3224416,-486.8953405,167.9231252,33.883691,-485.6016936,167.9231252,159.3509574,-485.6016978,167.0208555,159.3509574,-486.8953448,167.9231252,35.3224416,-486.8953405,167.9231252,35.3224416,-468.6382101,167.9231252,35.3224416,-469.9318571,167.0208555,33.883691,-469.9318571,167.9231252,35.3224416,-485.6016936,167.0208555,33.883691,-485.6016936,167.9231252,33.883691,-469.9318571,167.9231252,160.789708,-469.9318613,167.9231252,159.3509574,-469.9318613,167.0208555,159.3509574,-468.6382144,167.9231252,159.3509574,-468.6382144,167.9231252,35.3224416,-469.9318571,167.0208555,35.3224416,-468.6382101,167.9231252,160.789708,-485.6016978,171.954907,159.3509574,-486.8953448,167.9231252,160.789708,-485.6016978,167.9231252,160.789708,-469.9318613,171.954907,160.789708,-485.6016978,167.9231252,160.789708,-469.9318613,167.9231252,35.3224416,-486.8953405,171.954907,33.883691,-485.6016936,167.9231252,35.3224416,-486.8953405,167.9231252,159.3509574,-486.8953448,171.954907,35.3224416,-486.8953405,167.9231252,159.3509574,-486.8953448,167.9231252,33.883691,-469.9318571,171.954907,35.3224416,-468.6382101,167.9231252,33.883691,-469.9318571,167.9231252,33.883691,-469.9318571,167.9231252,33.883691,-485.6016936,167.9231252,33.883691,-485.6016936,171.954907,159.3509574,-468.6382144,171.954907,160.789708,-469.9318613,167.9231252,159.3509574,-468.6382144,167.9231252,35.3224416,-468.6382101,171.954907,159.3509574,-468.6382144,167.9231252,35.3224416,-468.6382101,167.9231252,160.789708,-485.6016978,171.954907,159.3509574,-486.8953448,171.954907,160.789708,-469.9318613,171.954907,35.3224416,-486.8953405,171.954907,33.883691,-485.6016936,171.954907,33.883691,-469.9318571,171.954907,35.3224416,-468.6382101,171.954907,159.3509574,-468.6382144,171.954907,160.789708,-485.6016978,171.954907,159.3509574,-469.9318613,172.8571766,159.3509574,-485.6016978,172.8571766,160.789708,-469.9318613,171.954907,160.789708,-485.6016978,171.954907,159.3509574,-485.6016978,172.8571766,159.3509574,-486.8953448,171.954907,160.789708,-469.9318613,171.954907,159.3509574,-468.6382144,171.954907,159.3509574,-469.9318613,172.8571766,159.3509574,-486.8953448,171.954907,35.3224416,-485.6016936,172.8571766,35.3224416,-486.8953405,171.954907,159.3509574,-485.6016978,172.8571766,35.3224416,-485.6016936,172.8571766,33.883691,-485.6016936,171.954907,35.3224416,-486.8953405,171.954907,35.3224416,-469.9318571,172.8571766,33.883691,-469.9318571,171.954907,33.883691,-485.6016936,171.954907,35.3224416,-468.6382101,171.954907,33.883691,-469.9318571,171.954907,35.3224416,-469.9318571,172.8571766,159.3509574,-468.6382144,171.954907,35.3224416,-468.6382101,171.954907,159.3509574,-469.9318613,172.8571766,159.3509574,-469.9318613,172.8571766,35.3224416,-485.6016936,172.8571766,159.3509574,-485.6016978,172.8571766,35.3224416,-469.9318571,172.8571766,33.883691,-485.6016936,171.954907,35.3224416,-485.6016936,172.8571766,159.3509574,-469.9318613,172.8571766,35.3224416,-468.6382101,171.954907,35.3224416,-469.9318571,172.8571766,35.3224416,-469.9318571,172.8571766,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.7844223f,0.521071f,0.7879167f,0.521071f,0.7913568f,0.4665792f,0.7552562f,0.7502574f,0.7839561f,0.5262783f,0.7839561f,0.5247339f,0.7913583f,0.7502573f,0.7879167f,0.5262782f,0.7552526f,0.466578f,0.78442f,0.5210697f,0.7913546f,0.4665778f,0.7839538f,0.5210697f,0.7552528f,0.5210698f,0.7839538f,0.5247325f,0.7552528f,0.526277f,0.7552539f,0.7502561f,0.7552537f,0.695725f,0.7552536f,0.6905177f,1.2177135f,0.5940824f,1.2225704f,0.6021317f,1.2225704f,0.5940823f,1.2170656f,0.5997444f,1.2170656f,0.6021318f,0.8222806f,0.6527842f,0.8250802f,0.6527841f,0.8250805f,0.6949781f,0.6827077f,0.7480624f,0.6862785f,0.4708164f,0.6827067f,0.4708164f,-1.885155f,0.390878f,-1.8851393f,0.3965851f,-1.8844968f,0.3964933f,0.8250802f,0.6481772f,0.82508f,0.6059833f,0.8222806f,0.6481772f,0.654504f,0.7480625f,0.650931f,0.5240728f,0.6509312f,0.4708165f,0.6509311f,0.529162f,0.6509316f,0.6896787f,0.6509316f,0.6947679f,0.6509321f,0.7480626f,0.6862795f,0.7512785f,0.6862795f,0.7480623f,0.6827077f,0.7480624f,0.8222809f,0.6949781f,0.8222806f,0.6527842f,0.8250805f,0.6949781f,0.6827067f,0.4708164f,0.6862785f,0.4708164f,0.6862785f,0.4676003f,0.6827077f,0.7480624f,0.6862795f,0.7480623f,0.6862785f,0.4708164f,0.6544272f,0.4708165f,0.6508554f,0.4708165f,0.6544272f,0.4676004f,0.82508f,0.6059833f,0.8222804f,0.6059833f,0.8222806f,0.6481772f,0.6544282f,0.7512786f,0.6508563f,0.7480626f,0.6544282f,0.7480625f,0.6544282f,0.7480625f,0.6508554f,0.4708165f,0.6544272f,0.4708165f,0.7022399f,0.7512784f,0.6862795f,0.7480623f,0.6862795f,0.7512785f,0.809771f,0.6949784f,0.8222806f,0.6527842f,0.8222809f,0.6949781f,0.7022389f,0.4708163f,0.6862785f,0.4676003f,0.6862785f,0.4708164f,0.7022399f,0.7480623f,0.6862785f,0.4708164f,0.6862795f,0.7480623f,0.6703876f,0.4676004f,0.6544272f,0.4708165f,0.6544272f,0.4676004f,0.8222804f,0.6059833f,0.8097706f,0.6059834f,0.6703886f,0.7480624f,0.6544282f,0.7512786f,0.6544282f,0.7480625f,0.6703876f,0.4708165f,0.6544282f,0.7480625f,0.6544272f,0.4708165f,0.809771f,0.6949784f,0.8097708f,0.6527843f,0.8222806f,0.6527842f,0.7022399f,0.7480623f,0.6862795f,0.7480623f,0.7022399f,0.7512784f,0.6703886f,0.7512785f,0.6544282f,0.7512786f,0.6703886f,0.7480624f,0.7022389f,0.4708163f,0.6862785f,0.4708164f,0.7022399f,0.7480623f,0.7022389f,0.4676003f,0.6862785f,0.4676003f,0.7022389f,0.4708163f,0.8222806f,0.6481772f,0.8097706f,0.6059834f,0.8097708f,0.6481774f,0.6703876f,0.4708165f,0.6544272f,0.4708165f,0.6703876f,0.4676004f,0.6703886f,0.7480624f,0.6544282f,0.7480625f,0.6703876f,0.4708165f,0.8097708f,0.6527843f,0.8069714f,0.6949784f,0.8069712f,0.6527843f,0.809771f,0.6949784f,0.7022399f,0.7512784f,0.7058117f,0.7480623f,0.7022399f,0.7480623f,0.6703886f,0.7512785f,0.6703886f,0.7480624f,0.6739604f,0.7480624f,0.7058107f,0.4708163f,0.7022389f,0.4708163f,0.7058117f,0.7480623f,0.7058107f,0.4708163f,0.7022389f,0.4676003f,0.7022389f,0.4708163f,0.8069712f,0.6481774f,0.8097708f,0.6481774f,0.8097706f,0.6059834f,0.6703876f,0.4708165f,0.6703876f,0.4676004f,0.6739594f,0.4708164f,0.6703886f,0.7480624f,0.6703876f,0.4708165f,0.6739604f,0.7480624f,0.7151635f,0.7502564f,0.7512642f,0.4665781f,0.7512656f,0.7502562f,0.8069712f,0.6481774f,0.8097706f,0.6059834f,0.806971f,0.6059836f,0.6739604f,0.7480624f,0.6703876f,0.4708165f,0.6739594f,0.4708164f,0.7151635f,0.7502564f,0.7151621f,0.4665782f,0.7512642f,0.4665781f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,4,4,3,3,6,6,1,1,6,6,2,2,6,6,1,1,7,7,6,6,7,7,4,4,8,8,9,9,10,10,9,9,8,8,11,11,11,11,8,8,12,12,11,11,12,12,13,13,13,13,12,12,14,14,13,13,14,14,15,15,15,15,14,14,16,16,16,16,14,14,17,17,18,18,19,19,20,20,19,19,18,18,21,21,19,19,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,36,36,35,35,38,38,38,38,35,35,39,39,39,39,35,35,40,40,40,40,35,35,41,41,42,42,43,43,44,44,45,45,23,46,25,47,46,48,47,49,48,50,49,51,50,52,51,53,52,54,53,55,54,56,55,57,56,58,57,59,58,60,59,61,60,62,61,63,62,64,63,65,64,66,65,67,66,68,67,69,68,70,69,71,70,72,71,73,72,74,73,75,74,76,75,77,76,78,77,79,78,80,79,59,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,67,89,88,90,68,91,89,92,65,93,64,94,90,95,83,96,82,97,91,98,74,99,73,100,92,101,71,102,70,103,79,104,81,105,93,106,94,107,77,108,76,109,95,110,86,111,85,112,96,113,97,114,98,115,97,114,96,113,99,116,100,117,101,118,102,119,103,120,104,121,105,122,106,75,107,123,108,124,107,123,106,75,109,125,110,126,111,127,112,128,113,129,114,130,115,131,116,132,117,133,118,134,119,135,120,136,121,137,122,138,123,139,124,140,125,141,126,142,127,143,128,144,129,145,130,146,122,147,131,148,123,149,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID202(GL2 gl){
double[] positionsArray = {
123.8496306,-272.6520385,147.873413,122.5519741,-303.0496457,155.2486386,123.8496306,-303.0496457,147.873413,122.5519835,-272.6520385,155.2486386,118.7860421,-303.0496457,161.9019428,118.7860515,-272.6520385,161.9019428,122.5519741,-303.0496457,155.2486386,70.8230731,-303.0496457,147.873413,123.8496306,-303.0496457,147.873413,72.1207344,-272.6520385,155.2486386,123.8496306,-272.6520385,147.873413,70.8230826,-272.6520385,147.873413,122.5519835,-272.6520385,155.2486386,112.9204612,-303.0496457,167.182011,112.9204612,-303.0496457,167.182011,118.7860421,-303.0496457,161.9019428,112.9204706,-272.6520385,167.182028,118.7860515,-272.6520385,161.9019428,72.1207297,-303.0496457,155.2486386,72.1207344,-272.6520385,155.2486386,70.8230731,-303.0496457,147.873413,72.1207297,-303.0496457,155.2486386,70.8230826,-272.6520385,147.873413,97.3363613,-272.6520385,171.7401749,118.7860515,-272.6520385,161.9019428,112.9204706,-272.6520385,167.182028,112.9204612,-303.0496457,167.182011,97.3363519,-303.0496457,171.7401579,75.8866664,-272.6520385,161.9019428,75.8866617,-303.0496457,161.9019428,81.7522426,-272.6520385,167.182011,105.5294074,-303.0496457,170.572049,105.5294074,-303.0496457,170.572049,105.5294074,-272.6520385,170.572049,81.7522378,-303.0496457,167.182011,75.8866617,-303.0496457,161.9019428,81.7522378,-303.0496457,167.182011,81.7522426,-272.6520385,167.182011,75.8866664,-272.6520385,161.9019428,89.1433058,-272.6520385,170.572049,112.9204706,-272.6520385,167.182028,105.5294074,-272.6520385,170.572049,105.5294074,-303.0496457,170.572049,97.3363519,-303.0496457,171.7401579,105.5294074,-272.6520385,170.572049,97.3363613,-272.6520385,171.7401749,97.3363519,-303.0496457,171.7401579,89.1432963,-303.0496457,170.572049,89.1432963,-303.0496457,170.572049,89.1433058,-272.6520385,170.572049,97.3363613,-272.6520385,171.7401749,89.1432963,-303.0496457,170.572049,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.9934069f,0.4587553f,0.9741581f,0.5920863f,0.9934069f,0.5920863f,0.9741581f,0.4587553f,0.9741583f,0.4587554f,0.954712f,0.5920863f,0.9741583f,0.5920863f,0.954712f,0.4587554f,0.5242129f,0.5813554f,0.4681422f,0.5731325f,0.5256194f,0.5731325f,0.4695488f,0.5633324f,0.5256194f,0.5715553f,0.4681422f,0.5715553f,0.5242129f,0.5633324f,0.954712f,0.4587554f,0.9367275f,0.5920863f,0.954712f,0.5920863f,0.513773f,0.5946603f,0.5242129f,0.5813554f,0.5201309f,0.5887734f,0.513773f,0.5500275f,0.5201309f,0.5559144f,0.5242129f,0.5633324f,0.4695488f,0.5813554f,0.4681422f,0.5731325f,0.5242129f,0.5813554f,0.8209268f,0.4587554f,0.8016778f,0.5920863f,0.8209268f,0.5920863f,0.8016778f,0.4587554f,0.4968808f,0.5449455f,0.5242129f,0.5633324f,0.4695488f,0.5633324f,0.954712f,0.4587554f,0.9367275f,0.4587554f,0.9367275f,0.5920863f,0.4968808f,0.5997424f,0.5242129f,0.5813554f,0.513773f,0.5946603f,0.4968808f,0.5449455f,0.513773f,0.5500275f,0.5242129f,0.5633324f,0.4968808f,0.5997424f,0.4695488f,0.5813554f,0.5242129f,0.5813554f,0.840373f,0.4587554f,0.8209268f,0.5920863f,0.840373f,0.5920863f,0.8209268f,0.4587554f,0.4968808f,0.5449455f,0.4695488f,0.5633324f,0.4799887f,0.5500275f,0.9367275f,0.4587554f,0.9181433f,0.5920863f,0.9367275f,0.5920863f,0.4968808f,0.5997424f,0.513773f,0.5946603f,0.5057616f,0.5984399f,0.4968808f,0.5449455f,0.5057616f,0.5462478f,0.513773f,0.5500275f,0.4968808f,0.5997424f,0.4799887f,0.5946603f,0.4695488f,0.5813554f,0.4799887f,0.5946603f,0.4736308f,0.5887734f,0.4695488f,0.5813554f,0.8583575f,0.5920863f,0.840373f,0.4587554f,0.840373f,0.5920863f,0.8583575f,0.4587554f,0.4799887f,0.5500275f,0.4695488f,0.5633324f,0.4736308f,0.5559144f,0.4968808f,0.5449455f,0.4799887f,0.5500275f,0.4880001f,0.5462478f,0.9367275f,0.4587554f,0.9181433f,0.4587554f,0.9181433f,0.5920863f,0.9181433f,0.4587554f,0.8975425f,0.5920863f,0.9181433f,0.5920863f,0.9181433f,0.4587554f,0.8975425f,0.4587554f,0.8975425f,0.5920863f,0.4968808f,0.5997424f,0.4880001f,0.5984399f,0.4799887f,0.5946603f,0.8769417f,0.5920863f,0.8583575f,0.4587554f,0.8583575f,0.5920863f,0.8769417f,0.4587554f,0.8975425f,0.4587554f,0.8769417f,0.4587554f,0.8769417f,0.5920863f,0.8975425f,0.4587554f,0.8769417f,0.5920863f,0.8975425f,0.5920863f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,3,4,4,5,1,6,4,5,3,4,5,7,6,8,7,9,8,10,9,11,10,12,11,13,10,12,9,11,12,14,5,15,13,16,4,17,14,18,6,19,15,20,16,21,17,22,12,23,18,24,7,25,6,26,19,27,20,28,21,29,20,28,19,27,22,30,23,31,12,32,9,33,24,34,25,35,26,36,27,37,6,38,14,39,23,40,16,41,12,42,27,43,18,44,6,45,28,46,21,47,29,48,21,47,28,46,19,49,23,50,9,51,30,52,25,53,31,54,26,55,27,56,14,57,32,58,23,59,33,60,16,61,27,62,34,63,18,64,34,65,35,66,18,67,36,68,28,69,29,70,28,69,36,68,37,71,30,72,9,73,38,74,23,75,30,76,39,77,40,78,41,79,42,80,41,81,43,82,42,83,44,84,45,85,46,86,27,87,47,88,34,89,48,90,37,91,36,92,37,91,48,90,49,93,50,94,49,95,48,96,45,97,51,98,46,99,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID210(GL2 gl){
double[] positionsArray = {
49.7052651,-304.6241866,147.4118473,49.7038557,-304.6514544,118.0685584,49.7056624,-338.9759477,147.4143337,49.7038557,-304.6514544,118.0685584,49.703851,-338.9759477,118.0685584,49.7056624,-338.9759477,147.4143337,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.9227296f,0.2186308f,0.9226717f,0.1232571f,0.997301f,0.2189298f,0.9226717f,0.1232571f,0.9972371f,0.1234869f,0.997301f,0.2189298f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID218(GL2 gl){
double[] positionsArray = {
144.9523653,-304.7730113,118.0685414,144.950568,-339.0974876,147.4143166,144.9523653,-339.0974876,118.0685499,144.9509748,-304.7457265,147.4118473,144.950568,-339.0974876,147.4143166,144.9523653,-304.7730113,118.0685414,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.9983655f,0.1251249f,0.9210855f,0.2212442f,0.9210852f,0.1251252f,0.9984351f,0.2212378f,0.9210855f,0.2212442f,0.9983655f,0.1251249f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID226(GL2 gl){
double[] positionsArray = {
34.5854154,-22.8824954,147.712513,34.5854059,-203.6122702,147.712513,35.7678158,-22.8824954,144.4367127,24.5679655,-22.8824954,147.712513,35.7678158,-22.8824954,144.4367127,23.385565,-22.8824954,144.4367127,34.5854154,-22.8824954,147.712513,27.6635258,-22.8824954,149.7370807,34.5854154,-22.8824954,147.712513,31.4898409,-203.6122702,149.7370807,34.5854059,-203.6122702,147.712513,35.7678158,-22.8824954,144.4367127,34.5854059,-203.6122702,147.712513,35.7678016,-203.6122702,144.4367127,31.4898551,-22.8824954,149.7370807,34.5854154,-22.8824954,141.1609123,24.5679655,-22.8824954,147.712513,23.3855509,-203.6122702,144.4367127,24.5679513,-203.6122702,147.712513,23.385565,-22.8824954,144.4367127,27.6635258,-22.8824954,149.7370807,24.5679655,-22.8824954,147.712513,24.5679513,-203.6122702,147.712513,32.2288225,-207.6959158,151.7844178,34.5854059,-203.6122702,147.712513,31.4898409,-203.6122702,149.7370807,32.3968166,-208.6242718,152.2498492,34.5854154,-22.8824954,147.712513,31.4898551,-22.8824954,149.7370807,31.4898409,-203.6122702,149.7370807,34.5854059,-203.6122702,147.712513,36.959912,-208.6242718,149.2655013,35.7678016,-203.6122702,144.4367127,34.5854154,-22.8824954,141.1609123,35.7678158,-22.8824954,144.4367127,35.7678016,-203.6122702,144.4367127,31.4898551,-22.8824954,149.7370807,27.6635258,-22.8824954,149.7370807,27.6635163,-203.6122702,149.7370807,24.5679655,-22.8824954,141.1608953,23.385565,-22.8824954,144.4367127,24.5679513,-203.6122702,141.1608953,23.3855509,-203.6122702,144.4367127,23.3855509,-203.6122702,144.4367127,20.4504902,-208.6242718,144.4367127,24.5679513,-203.6122702,147.712513,27.6635258,-22.8824954,149.7370807,24.5679513,-203.6122702,147.712513,27.6635163,-203.6122702,149.7370807,32.3968166,-208.6242718,152.2498492,31.4898409,-203.6122702,149.7370807,26.7565264,-208.6242718,152.2498492,32.2288225,-207.6959158,151.7844178,33.1084677,-208.6242718,151.7844163,34.5854059,-203.6122702,147.712513,32.3968166,-208.6242718,152.2498492,36.959912,-208.6242718,149.2655013,31.4898409,-203.6122702,149.7370807,35.7678016,-203.6122702,144.4367127,38.7028575,-208.6242718,144.4367127,34.5854154,-22.8824954,141.1609123,35.7678016,-203.6122702,144.4367127,34.5854059,-203.6122702,141.1608953,31.4898551,-22.8824954,139.1363446,24.5679655,-22.8824954,141.1608953,23.3855509,-203.6122702,144.4367127,24.5679513,-203.6122702,141.1608953,22.1934358,-208.6242718,139.607924,23.3855509,-203.6122702,144.4367127,22.1934358,-208.6242718,139.607924,20.4504902,-208.6242718,144.4367127,24.5679513,-203.6122702,147.712513,20.4504902,-208.6242718,144.4367127,22.1934358,-208.6242718,149.2655013,27.6635163,-203.6122702,149.7370807,24.5679513,-203.6122702,147.712513,22.1934358,-208.6242718,149.2655013,26.9245234,-209.5526216,151.7844176,32.3968166,-208.6242718,152.2498492,26.7565264,-208.6242718,152.2498492,27.6635069,-213.6362394,149.7370807,31.4898409,-203.6122702,149.7370807,26.9245251,-207.6959158,151.7844176,26.7565264,-208.6242718,152.2498492,27.6635163,-203.6122702,149.7370807,36.959912,-208.6242718,149.2655013,32.2288207,-209.5526216,151.7844178,31.4898314,-213.6362394,149.7370807,33.1084677,-208.6242718,151.7844163,32.3968166,-208.6242718,152.2498492,36.959912,-208.6242718,149.2655013,34.5853965,-213.6362394,147.712513,38.7028575,-208.6242718,144.4367127,34.5854059,-203.6122702,141.1608953,35.7678016,-203.6122702,144.4367127,38.7028575,-208.6242718,144.4367127,34.5854154,-22.8824954,141.1609123,34.5854059,-203.6122702,141.1608953,31.4898551,-22.8824954,139.1363446,27.6635258,-22.8824954,139.1363446,27.6635163,-203.6122702,139.1363446,24.5679513,-203.6122702,141.1608953,24.5679655,-22.8824954,141.1608953,26.7565264,-208.6242718,136.6235762,22.1934358,-208.6242718,139.607924,24.5679513,-203.6122702,141.1608953,20.4504902,-208.6242718,144.4367127,22.1934358,-208.6242718,139.607924,24.5679418,-213.6362394,141.1608953,20.4504902,-208.6242718,144.4367127,23.3855414,-213.6362394,144.4367127,22.1934358,-208.6242718,149.2655013,26.044878,-208.6242718,151.7844176,27.6635163,-203.6122702,149.7370807,22.1934358,-208.6242718,149.2655013,26.9245251,-207.6959158,151.7844176,26.7565264,-208.6242718,152.2498492,27.6635069,-213.6362394,149.7370807,26.7565264,-208.6242718,152.2498492,24.5679418,-213.6362394,147.712513,26.9245234,-209.5526216,151.7844176,31.4898314,-213.6362394,149.7370807,32.3968166,-208.6242718,152.2498492,27.6635069,-213.6362394,149.7370807,32.2288207,-209.5526216,151.7844178,36.959912,-208.6242718,149.2655013,31.4898314,-213.6362394,149.7370807,34.5853965,-213.6362394,147.712513,38.7028575,-208.6242718,144.4367127,34.5853965,-213.6362394,147.712513,35.7677969,-213.6362394,144.4367127,34.5854059,-203.6122702,141.1608953,38.7028575,-208.6242718,144.4367127,36.959912,-208.6242718,139.607924,34.5854059,-203.6122702,141.1608953,31.4898409,-203.6122702,139.1363446,31.4898551,-22.8824954,139.1363446,31.4898551,-22.8824954,139.1363446,31.4898409,-203.6122702,139.1363446,27.6635258,-22.8824954,139.1363446,27.6635258,-22.8824954,139.1363446,27.6635163,-203.6122702,139.1363446,24.5679655,-22.8824954,141.1608953,27.6635163,-203.6122702,139.1363446,26.7565264,-208.6242718,136.6235762,24.5679513,-203.6122702,141.1608953,27.6635069,-213.6362394,139.1363446,22.1934358,-208.6242718,139.607924,26.7565264,-208.6242718,136.6235762,27.6635069,-213.6362394,139.1363446,24.5679418,-213.6362394,141.1608953,22.1934358,-208.6242718,139.607924,20.4504902,-208.6242718,144.4367127,24.5679418,-213.6362394,141.1608953,23.3855414,-213.6362394,144.4367127,22.1934358,-208.6242718,149.2655013,23.3855414,-213.6362394,144.4367127,24.5679418,-213.6362394,147.712513,24.5679418,-213.6362394,147.712513,26.044878,-208.6242718,151.7844176,22.1934358,-208.6242718,149.2655013,26.7565264,-208.6242718,152.2498492,31.4898314,-213.6362394,149.7370807,24.5679418,-213.6362394,147.712513,34.5853965,-213.6362394,147.712513,27.6635069,-213.6362394,149.7370807,23.3855414,-213.6362394,144.4367127,35.7677969,-213.6362394,144.4367127,36.959912,-208.6242718,139.607924,38.7028575,-208.6242718,144.4367127,35.7677969,-213.6362394,144.4367127,36.959912,-208.6242718,139.607924,31.4898409,-203.6122702,139.1363446,34.5854059,-203.6122702,141.1608953,27.6635163,-203.6122702,139.1363446,32.3968213,-208.6242718,136.6235762,26.7565264,-208.6242718,136.6235762,27.6635163,-203.6122702,139.1363446,31.4898314,-213.6362394,139.1363446,27.6635069,-213.6362394,139.1363446,26.7565264,-208.6242718,136.6235762,34.5853965,-213.6362394,141.1608953,27.6635069,-213.6362394,139.1363446,31.4898314,-213.6362394,139.1363446,24.5679418,-213.6362394,141.1608953,36.959912,-208.6242718,139.607924,35.7677969,-213.6362394,144.4367127,34.5853965,-213.6362394,141.1608953,36.959912,-208.6242718,139.607924,32.3968213,-208.6242718,136.6235762,31.4898409,-203.6122702,139.1363446,32.3968213,-208.6242718,136.6235762,27.6635163,-203.6122702,139.1363446,31.4898409,-203.6122702,139.1363446,32.3968213,-208.6242718,136.6235762,31.4898314,-213.6362394,139.1363446,26.7565264,-208.6242718,136.6235762,34.5853965,-213.6362394,141.1608953,31.4898314,-213.6362394,139.1363446,32.3968213,-208.6242718,136.6235762,36.959912,-208.6242718,139.607924,34.5853965,-213.6362394,141.1608953,32.3968213,-208.6242718,136.6235762,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.0463013f,0.3223799f,0.0463013f,0.5200626f,0.0334175f,0.3223799f,0.0301096f,0.5369946f,0.0379187f,0.5622653f,0.0379187f,0.5343267f,0.0301096f,0.5595974f,0.0252833f,0.5439793f,0.0463013f,0.3223799f,0.0598731f,0.5200626f,0.0463013f,0.5200626f,0.0463013f,0.5200626f,0.0334175f,0.5200626f,0.0252833f,0.5526128f,0.0301096f,0.5595974f,0.0252833f,0.5439793f,0.0379187f,0.5622653f,0.0457278f,0.5595974f,0.0379187f,0.5343267f,0.087534f,0.3223799f,0.1004177f,0.5200626f,0.0875339f,0.5200626f,0.1004178f,0.3223799f,0.0739324f,0.3223799f,0.087534f,0.3223799f,0.0875339f,0.5200626f,0.0598732f,0.5245292f,0.0463013f,0.5200626f,0.0598732f,0.5200626f,0.0598732f,0.5255446f,0.0463013f,0.3223799f,0.0598732f,0.3223799f,0.0598731f,0.5200626f,0.0463013f,0.5255446f,0.0334175f,0.5200626f,0.0205336f,0.3223799f,0.0334175f,0.3223799f,0.0334175f,0.5200626f,0.0598732f,0.3223799f,0.0739324f,0.3223799f,0.0739324f,0.5200626f,0.0379187f,0.5343267f,0.0457278f,0.5595974f,0.0457278f,0.5369946f,0.1004178f,0.3223799f,0.113387f,0.5200626f,0.1004177f,0.5200626f,0.1004177f,0.5200626f,0.1004177f,0.5255446f,0.0875339f,0.5200626f,0.0739324f,0.3223799f,0.0875339f,0.5200626f,0.0739324f,0.5200626f,0.0598732f,0.5255446f,0.0598731f,0.5200626f,0.0739324f,0.5255446f,0.0598732f,0.5245292f,0.0577565f,0.5255446f,0.0463013f,0.5200626f,0.0598732f,0.5255446f,0.0463013f,0.5255446f,0.0598732f,0.3223799f,0.0739324f,0.5200626f,0.0598731f,0.5200626f,0.0334175f,0.5200626f,0.0463013f,0.5255446f,0.0334175f,0.5255446f,0.0205336f,0.3223799f,0.0334175f,0.5200626f,0.0205337f,0.5200626f,0.0457278f,0.5595974f,0.0505541f,0.5526128f,0.0457278f,0.5369946f,0.1004178f,0.3223799f,0.113387f,0.3223799f,0.113387f,0.5200626f,0.1004177f,0.5200626f,0.113387f,0.5200626f,0.113387f,0.5255446f,0.1004177f,0.5200626f,0.113387f,0.5255446f,0.1004177f,0.5255446f,0.0875339f,0.5200626f,0.1004177f,0.5255446f,0.0875339f,0.5255446f,0.0739324f,0.5200626f,0.0875339f,0.5200626f,0.0875339f,0.5255446f,0.0739324f,0.5265601f,0.0598732f,0.5255446f,0.0739324f,0.5255446f,0.0739324f,0.5310268f,0.0598731f,0.5200626f,0.0739324f,0.5245292f,0.0739324f,0.5255446f,0.0739324f,0.5200626f,0.0463013f,0.5255446f,0.0598732f,0.5265601f,0.0598732f,0.5310268f,0.0577566f,0.5255446f,0.0598732f,0.5255446f,0.0463013f,0.5255446f,0.0463013f,0.5310268f,0.0334175f,0.5255446f,0.0205337f,0.5200626f,0.0334175f,0.5200626f,0.0334175f,0.5255446f,0.0205336f,0.3223799f,0.0205337f,0.5200626f,0.0069617f,0.3223799f,0.0457278f,0.5369946f,0.0505541f,0.5526128f,0.0505541f,0.5439793f,0.1270443f,0.5200626f,0.113387f,0.5200626f,0.113387f,0.3223799f,0.1270443f,0.5255446f,0.113387f,0.5255446f,0.113387f,0.5200626f,0.1004177f,0.5255446f,0.113387f,0.5255446f,0.113387f,0.5310268f,0.1004177f,0.5255446f,0.1004177f,0.5310268f,0.0875339f,0.5255446f,0.0760536f,0.5255446f,0.0739324f,0.5200626f,0.0875339f,0.5255446f,0.0739324f,0.5245292f,0.0739324f,0.5255446f,0.0739324f,0.5310268f,0.0739324f,0.5255446f,0.0875339f,0.5310268f,0.0739324f,0.5265601f,0.0598731f,0.5310268f,0.0598731f,0.5255446f,0.0739324f,0.5310268f,0.0598731f,0.5265601f,0.0463013f,0.5255446f,0.0598732f,0.5310268f,0.0463013f,0.5310268f,0.0334175f,0.5255446f,0.0463013f,0.5310268f,0.0334175f,0.5310268f,0.0205337f,0.5200626f,0.0334175f,0.5255446f,0.0205337f,0.5255446f,0.0205337f,0.5200626f,0.0069618f,0.5200626f,0.0069617f,0.3223799f,0.1410737f,0.3223799f,0.1410739f,0.5200626f,0.1270442f,0.3223799f,0.1270442f,0.3223799f,0.1270443f,0.5200626f,0.113387f,0.3223799f,0.1270443f,0.5200626f,0.1270443f,0.5255446f,0.113387f,0.5200626f,0.1270443f,0.5310268f,0.113387f,0.5255446f,0.1270443f,0.5255446f,0.113387f,0.5310268f,0.113387f,0.5255446f,0.1004177f,0.5255446f,0.113387f,0.5310268f,0.1004177f,0.5310268f,0.0875339f,0.5255446f,0.1004177f,0.5310268f,0.0875339f,0.5310268f,0.0875339f,0.5310268f,0.0760536f,0.5255446f,0.0875339f,0.5255446f,0.0739324f,0.5255446f,0.0519438f,0.5529797f,0.0567702f,0.5373616f,0.0567702f,0.5599644f,0.0519438f,0.5443462f,0.0567702f,0.5599644f,0.0645792f,0.5346937f,0.0645792f,0.5626323f,0.0567702f,0.5373616f,0.0205337f,0.5255446f,0.0334175f,0.5255446f,0.0334175f,0.5310268f,0.0205337f,0.5255446f,0.0069618f,0.5200626f,0.0205337f,0.5200626f,0.1410739f,0.5200626f,0.1270443f,0.5200626f,0.1270442f,0.3223799f,0.1410738f,0.5255446f,0.1270443f,0.5255446f,0.1270443f,0.5200626f,0.1410738f,0.5310268f,0.1270443f,0.5310268f,0.1270443f,0.5255446f,0.0723883f,0.5599644f,0.0772146f,0.5443462f,0.0772146f,0.5529797f,0.0723883f,0.5373616f,0.0645792f,0.5626323f,0.0723883f,0.5373616f,0.0723883f,0.5599644f,0.0645792f,0.5346937f,0.0205337f,0.5255446f,0.0334175f,0.5310268f,0.0205337f,0.5310268f,0.0205337f,0.5255446f,0.0069618f,0.5255446f,0.0069618f,0.5200626f,0.1410738f,0.5255446f,0.1270443f,0.5200626f,0.1410739f,0.5200626f,0.1410738f,0.5255446f,0.1410738f,0.5310268f,0.1270443f,0.5255446f,0.0205337f,0.5310268f,0.0069618f,0.5310268f,0.0069618f,0.5255446f,0.0205337f,0.5255446f,0.0205337f,0.5310268f,0.0069618f,0.5255446f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,4,4,3,3,6,6,6,6,3,3,7,7,8,8,9,9,10,10,11,2,12,11,13,12,14,13,6,14,7,15,4,16,15,17,5,18,16,19,17,20,18,21,17,20,16,19,19,22,20,23,21,24,22,25,23,26,24,27,25,28,24,27,23,26,26,29,27,30,28,31,29,32,30,11,31,33,32,34,33,35,34,36,35,37,36,38,37,39,38,40,5,41,15,42,39,43,40,44,41,45,42,46,43,47,44,48,45,49,46,50,47,51,48,52,49,53,50,54,51,55,50,54,49,53,52,56,53,57,54,58,55,59,54,58,53,57,56,60,36,61,38,62,57,63,58,64,31,65,59,66,60,67,61,68,62,69,15,70,63,71,39,72,40,73,64,74,41,75,65,76,66,77,67,78,68,79,69,80,70,81,71,82,72,83,73,84,74,85,75,86,76,87,77,88,78,89,79,90,78,89,77,88,80,91,81,92,82,93,83,94,82,93,81,92,84,95,85,96,86,97,87,98,86,97,85,96,88,99,86,97,88,99,89,100,90,101,91,102,92,103,93,104,94,105,95,106,96,107,97,108,98,109,39,110,63,111,99,112,100,113,101,114,102,115,103,116,104,117,105,118,106,119,107,120,108,121,109,122,110,123,111,124,112,125,113,126,114,127,113,126,112,125,115,128,115,128,112,125,116,129,117,130,118,131,119,132,118,131,117,130,120,133,121,134,122,135,123,136,122,135,121,134,124,137,125,138,126,139,127,140,128,141,129,142,130,143,131,144,132,145,133,146,134,147,135,148,136,149,137,150,138,151,139,152,140,153,141,154,142,155,143,156,144,157,145,158,146,159,147,160,148,161,149,159,150,162,151,163,152,164,153,165,154,166,155,167,156,168,157,169,158,170,159,171,160,172,159,171,158,170,161,173,162,174,163,175,164,176,163,175,162,174,165,177,164,178,166,179,167,180,166,179,164,178,163,181,168,182,169,183,170,184,171,185,172,186,173,187,138,188,174,189,139,190,175,191,176,192,177,193,178,194,179,195,180,196,181,197,182,198,183,199,182,198,181,197,184,200,167,201,184,202,181,203,184,202,167,201,166,204,185,205,186,206,187,207,188,208,189,209,190,210,191,211,192,212,193,213,194,214,195,215,196,216,197,217,198,218,199,219,200,220,201,221,202,222,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID234(GL2 gl){
double[] positionsArray = {
165.259294,-383.8049732,52.8433015,172.7088343,-384.4915144,54.3567332,172.7088343,-383.8049817,52.8432972,165.259294,-385.7678464,57.1703547,176.539458,-383.8352093,52.909944,172.7088343,-383.8049817,52.8432972,176.539458,-383.8049817,52.8432972,172.7088343,-384.4915144,54.3567332,176.539458,-383.8352093,52.909944,176.7159107,-383.8049732,52.8433015,176.539458,-383.8049817,52.8432972,176.539458,-383.9253873,53.1087363,172.7088343,-384.4915144,54.3567332,176.539458,-383.8352093,52.909944,172.7088343,-386.5393729,58.8711217,172.7088343,-382.2650353,47.4183911,176.539458,-381.4731825,44.6288518,176.539458,-388.5144689,63.2250991,172.7088343,-386.5393729,58.8711217,176.539458,-383.9253873,53.1087363,172.7088343,-388.5144689,63.2250991,176.539458,-381.4731825,44.6288518,172.7088343,-381.4367062,44.5003512,176.539458,-381.4367062,44.5003512,172.7088343,-382.2650353,47.4183911,176.539458,-394.9114722,69.569908,172.7088343,-394.9114722,69.569908,176.539458,-381.4367062,44.5003512,174.5636307,-380.5014912,36.0863686,176.539458,-380.5014956,36.0863644,172.7088343,-381.4367062,44.5003512,172.7088343,-380.5014871,36.0863644,176.539458,-403.2433629,75.0971178,172.7088343,-398.4974336,71.9487655,174.5636307,-359.4465964,36.0863686,176.539458,-380.5014956,36.0863644,174.5636307,-380.5014912,36.0863686,176.539458,-359.4465964,36.0863644,172.7088343,-398.4974336,71.9487655,176.539458,-403.4619852,75.2421445,172.7088343,-403.4619852,75.2421445,176.539458,-403.2433629,75.0971178,172.7088437,-359.5214426,53.5858419,174.5254018,-359.4465964,36.0863686,172.7088437,-359.4465964,36.0863644,174.5636307,-359.4465964,36.0863686,176.5394582,-359.5203855,53.3610638,176.539458,-359.5214426,53.5858462,176.539458,-359.4465964,36.0863644,172.7088343,-403.4619852,75.2421445,176.539458,-409.7288839,77.9338478,172.7088248,-409.7288839,77.9338478,176.539458,-403.4619852,75.2421445,176.5394601,-403.6237764,75.3112202,172.7088438,-359.5218441,54.5852029,176.5394581,-359.5214602,53.6298573,176.5394576,-409.7352694,80.310667,172.7088248,-409.7288839,77.9338478,176.539458,-409.7288839,77.9338478,172.7088248,-409.873893,131.9091815,172.7088438,-359.5218441,54.5852029,176.5394581,-359.614128,169.0449307,176.5394581,-359.5214602,53.6298573,172.7088438,-359.583043,130.8066431,176.5394391,-409.9783595,170.6885005,172.7088248,-409.873893,131.9091815,176.5394576,-409.7352694,80.310667,172.7088248,-409.9783595,170.6885005,172.7088438,-359.5981694,149.4139344,176.5394581,-359.614128,169.0449307,172.7088438,-359.583043,130.8066431,176.5394581,-359.6147941,169.8643094,176.5394391,-409.9783595,170.6885005,172.7088437,-359.6154765,170.5987351,172.7088248,-409.9783595,170.6885005,176.539458,-359.6154765,170.5987521,172.7088439,-359.6039,156.8655797,176.5394581,-359.6147941,169.8643094,172.7088438,-359.5981694,149.4139344,176.5394581,-359.6150464,170.1924454,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,4,5,6,5,4,7,8,9,10,11,12,13,12,11,14,6,15,16,15,6,5,17,18,19,18,17,20,21,22,23,22,21,24,20,25,26,25,20,17,27,28,29,28,30,31,30,28,27,26,32,33,32,26,25,34,35,36,35,34,37,38,39,40,39,38,41,42,43,44,43,42,45,45,42,46,46,42,47,46,48,45,49,50,51,50,49,52,50,52,53,54,47,42,47,54,55,56,57,58,57,56,59,60,61,62,61,60,63,64,65,66,65,64,67,68,69,70,69,68,71,72,73,74,73,72,75,76,77,78,77,76,79,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 138, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID240(GL2 gl){
double[] positionsArray = {
148.9240358,-278.8042015,95.8249912,153.9346148,-278.8042015,95.8145433,148.9240358,-277.9133797,93.0801541,154.0988556,-281.1364062,97.5044873,153.9346148,-278.8042015,95.8145433,148.9240358,-278.8042015,95.8249912,153.6688479,-277.9133797,93.0801541,167.3627644,-281.1364232,94.9487435,148.9240358,-281.1364062,97.5213896,166.7182117,-278.8042015,93.3546531,153.6688479,-277.9133797,93.0801541,148.9240358,-278.8042015,90.3353255,148.9240358,-277.9133797,93.0801541,167.3627644,-281.1364232,94.9487435,154.0988556,-281.1364062,97.5044873,167.3627644,-284.0191891,94.9487435,167.3627644,-281.1364232,94.9487435,166.7182117,-278.8042015,93.3546531,153.9346148,-278.8042015,95.8145433,154.0988556,-284.0191891,97.5044873,148.9240358,-281.1364062,97.5213896,148.9240358,-284.0191891,97.5213896,154.0988556,-281.1364062,97.5044873,166.7182117,-278.8042015,93.3546531,165.6753304,-277.9133797,90.7753482,153.6688479,-277.9133797,93.0801541,153.4031,-278.8042015,90.3457649,167.3627644,-281.1364232,94.9487435,167.3627644,-284.0191891,94.9487435,166.7182212,-286.3513939,93.3546531,167.3627644,-284.0191891,94.9487435,166.7182117,-278.8042015,93.3546531,167.3627644,-281.1364232,94.9487435,166.7182212,-286.3513939,93.3546531,154.0988556,-284.0191891,97.5044873,148.9240358,-284.0191891,97.5213896,153.9346148,-286.3513939,95.8145433,164.6324396,-286.3513939,88.1960518,166.7182212,-286.3513939,93.3546531,165.6753304,-287.2422156,90.7753482,166.7182117,-278.8042015,93.3546531,164.6324396,-278.8042015,88.1960518,165.6753304,-277.9133797,90.7753482,165.6753304,-277.9133797,90.7753482,153.4031,-278.8042015,90.3457649,148.9240358,-281.1364062,88.6389271,148.9240358,-278.8042015,90.3353255,167.3627644,-284.0191891,94.9487435,154.0988556,-284.0191891,97.5044873,166.7182212,-286.3513939,93.3546531,166.7182212,-286.3513939,93.3546531,148.9240358,-286.3513939,95.8249912,153.9346148,-286.3513939,95.8145433,165.6753304,-287.2422156,90.7753482,166.7182212,-286.3513939,93.3546531,153.6688479,-287.2422156,93.0801541,164.6324396,-286.3513939,88.1960518,165.6753304,-287.2422156,90.7753482,164.6324396,-278.8042015,88.1960518,164.6324396,-286.3513939,88.1960518,163.9878963,-284.0191891,86.601953,165.6753304,-277.9133797,90.7753482,164.6324396,-278.8042015,88.1960518,153.4031,-278.8042015,90.3457649,153.2388498,-281.1364062,88.6558209,148.9240358,-286.3513939,95.8249912,153.6688479,-287.2422156,93.0801541,153.9346148,-286.3513939,95.8145433,165.6753304,-287.2422156,90.7753482,153.6688479,-287.2422156,93.0801541,153.4031,-286.3513939,90.3457649,164.6324396,-286.3513939,88.1960518,164.6324396,-286.3513939,88.1960518,153.4031,-286.3513939,90.3457649,163.9878963,-284.0191891,86.601953,164.6324396,-278.8042015,88.1960518,163.9878963,-284.0191891,86.601953,163.9878963,-281.1364062,86.601953,164.6324396,-278.8042015,88.1960518,148.9240358,-281.1364062,88.6389271,153.2388498,-284.0191891,88.6558209,148.9240358,-284.0191891,88.6389271,153.2388498,-281.1364062,88.6558209,148.9240358,-287.2422156,93.0801541,148.9240358,-287.2422156,93.0801541,163.9878963,-284.0191891,86.601953,153.4031,-286.3513939,90.3457649,153.2388498,-284.0191891,88.6558209,163.9878963,-284.0191891,86.601953,163.9878963,-281.1364062,86.601953,164.6324396,-278.8042015,88.1960518,163.9878963,-281.1364062,86.601953,153.2388498,-281.1364062,88.6558209,148.9240358,-286.3513939,90.3353255,148.9240358,-284.0191891,88.6389271,148.9240358,-286.3513939,90.3353255,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.5868875f,0.0993962f,0.6168717f,0.0993962f,0.5868875f,0.0894449f,0.6168717f,0.1093477f,0.6168717f,0.0993962f,0.5868875f,0.0993962f,0.6168717f,0.0993962f,0.6168717f,0.0894449f,0.5868875f,0.0894449f,0.6864018f,0.1093477f,0.6168717f,0.0993962f,0.6168717f,0.1093477f,0.6168717f,0.1093477f,0.5868875f,0.0993962f,0.5868875f,0.1093477f,0.6168717f,0.0993962f,0.6864018f,0.0993962f,0.6168717f,0.0894449f,0.6168717f,0.0894449f,0.5868875f,0.0794934f,0.5868875f,0.0894449f,0.6864018f,0.0098333f,0.6168717f,0.0098333f,0.6864018f,0.0197848f,0.6864018f,0.1093477f,0.6864018f,0.0993962f,0.6168717f,0.0993962f,0.6168717f,0.0197848f,0.5868875f,0.0098333f,0.5868875f,0.0197848f,0.6168717f,0.0098333f,0.6864018f,0.0993962f,0.6864018f,0.0894449f,0.6168717f,0.0894449f,0.6168717f,0.0894449f,0.6168717f,0.0794934f,0.5868875f,0.0794934f,0.5705464f,0.0393276f,0.5604308f,0.0393276f,0.552247f,0.0333817f,0.6864018f,0.0197848f,0.6168717f,0.0098333f,0.6168717f,0.0197848f,0.5787302f,0.0333817f,0.5705464f,0.0393276f,0.552247f,0.0333817f,0.6168717f,0.0197848f,0.5868875f,0.0197848f,0.6168717f,0.0297363f,0.5522469f,0.0141416f,0.5522469f,0.0333827f,0.549121f,0.0237621f,0.5787301f,0.0333827f,0.5787301f,0.0141416f,0.581856f,0.0237621f,0.6168717f,0.0894449f,0.6864018f,0.0894449f,0.6168717f,0.0794934f,0.6168717f,0.0794934f,0.5868875f,0.0695419f,0.5868875f,0.0794934f,0.6864018f,0.0197848f,0.6168717f,0.0197848f,0.6864018f,0.0297363f,0.6864018f,0.0297363f,0.6168717f,0.0197848f,0.6168717f,0.0297363f,0.6168717f,0.0297363f,0.5868875f,0.0197848f,0.5868875f,0.0297363f,0.6168717f,0.0297363f,0.6864018f,0.0396876f,0.6864018f,0.0297363f,0.6168717f,0.0396876f,0.6864018f,0.0496391f,0.6864018f,0.0396876f,0.5787302f,0.0141406f,0.552247f,0.0141406f,0.5604308f,0.0081947f,0.6864018f,0.0894449f,0.6864018f,0.0794934f,0.6168717f,0.0794934f,0.6168717f,0.0794934f,0.6168717f,0.0695419f,0.5868875f,0.0695419f,0.5868875f,0.0297363f,0.6168717f,0.0396876f,0.6168717f,0.0297363f,0.6168717f,0.0297363f,0.6168717f,0.0396876f,0.6864018f,0.0396876f,0.6168717f,0.0396876f,0.6168717f,0.0496391f,0.6864018f,0.0496391f,0.6864018f,0.0496391f,0.6168717f,0.0496391f,0.6864018f,0.0595906f,0.5787302f,0.0141406f,0.5604308f,0.0081947f,0.5705464f,0.0081947f,0.6864018f,0.0794934f,0.6168717f,0.0695419f,0.6168717f,0.0794934f,0.5868875f,0.0695419f,0.6168717f,0.0595906f,0.5868875f,0.0595906f,0.6168717f,0.0695419f,0.5868875f,0.0297363f,0.5868875f,0.0396876f,0.6168717f,0.0396876f,0.5868875f,0.0396876f,0.6168717f,0.0496391f,0.6168717f,0.0396876f,0.6864018f,0.0595906f,0.6168717f,0.0496391f,0.6168717f,0.0595906f,0.6168717f,0.0695419f,0.6864018f,0.0595906f,0.6168717f,0.0595906f,0.6864018f,0.0695419f,0.6864018f,0.0794934f,0.6864018f,0.0695419f,0.6168717f,0.0695419f,0.6168717f,0.0595906f,0.5868875f,0.0496391f,0.5868875f,0.0595906f,0.5868875f,0.0396876f,0.5868875f,0.0496391f,0.6168717f,0.0496391f,0.5868875f,0.0496391f,0.6168717f,0.0595906f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,1,6,6,7,2,8,7,9,4,10,3,11,3,12,5,13,8,14,1,15,9,16,6,17,10,18,11,19,12,20,13,21,14,22,15,23,16,24,17,25,18,26,19,27,20,28,21,29,20,28,19,27,22,30,23,31,24,32,25,33,10,34,26,35,11,36,27,37,28,38,29,39,30,40,22,41,19,42,31,43,32,44,33,45,34,46,35,47,36,48,37,49,38,50,39,51,38,50,37,49,40,52,40,52,37,49,41,53,40,52,41,53,42,54,10,55,43,56,26,57,44,58,45,59,46,60,47,61,48,62,49,63,50,64,34,65,36,66,36,67,35,68,51,69,52,70,53,71,54,72,55,73,56,74,57,75,58,76,59,77,60,78,61,79,62,80,63,81,44,82,64,83,45,84,65,85,66,86,67,87,67,88,66,89,68,90,69,91,70,92,71,93,72,94,73,95,74,96,75,97,76,98,77,99,78,100,64,101,44,102,79,103,80,104,81,105,80,104,79,103,82,106,65,107,83,108,66,109,84,110,70,111,69,112,85,113,86,114,87,115,82,116,88,117,80,118,88,117,82,116,89,119,90,120,91,121,92,122,87,123,93,124,94,125,84,126,95,127,70,95,86,128,93,129,87,130,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID248(GL2 gl){
double[] positionsArray = {
25.0596332,-208.4219832,131.0548058,25.0596284,-211.228338,108.8371925,25.0596332,-211.228338,131.0548143,25.0596332,-211.228338,131.0548143,25.0596284,-211.228338,108.8371925,28.3385514,-211.228338,108.8371925,25.0596284,-208.4219832,108.8371925,25.0596284,-211.228338,108.8371925,25.0596332,-208.4219832,131.0548058,28.3385562,-211.228338,131.0548058,25.0596332,-208.4219832,131.0548058,28.3385467,-208.4219832,108.8371925,25.0596284,-208.4219832,108.8371925,28.3385514,-208.4219832,131.0548058,28.3385514,-208.4219832,131.0548058,28.3385562,-211.228338,131.0548058,28.3385514,-211.228338,108.8371925,28.3385514,-208.4219832,131.0548058,28.3385514,-211.228338,108.8371925,28.3385467,-208.4219832,108.8371925,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.966621f,0.5257632f,0.9628023f,0.4641285f,0.9628023f,0.5257789f,0.9628023f,0.5257789f,0.9628023f,0.4641285f,0.9607593f,0.4641285f,0.966621f,0.4641128f,0.9628023f,0.4641285f,0.966621f,0.5257632f,0.9628023f,0.5257789f,0.9607593f,0.4641285f,0.9607593f,0.5257789f,0.966621f,0.5257632f,0.9686641f,0.4641128f,0.966621f,0.4641128f,0.9686641f,0.5257632f,0.9752413f,0.5257632f,0.9706455f,0.5257789f,0.9706455f,0.4641285f,0.9752413f,0.5257632f,0.9706455f,0.4641285f,0.9752413f,0.4641128f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,3,9,5,10,9,11,10,12,11,13,12,14,11,13,10,12,13,15,14,16,15,17,16,18,17,19,18,20,19,21,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID256(GL2 gl){
double[] positionsArray = {
25.0596332,-187.3431758,131.0548058,25.0596284,-190.1495647,108.8371925,25.0596332,-190.1495647,131.0548143,25.0596332,-190.1495647,131.0548143,25.0596284,-190.1495647,108.8371925,28.3385514,-190.1495647,108.8371925,25.0596284,-187.3431758,108.8371925,25.0596284,-190.1495647,108.8371925,25.0596332,-187.3431758,131.0548058,28.3385562,-190.1495647,131.0548058,25.0596332,-187.3431758,131.0548058,28.3385467,-187.3431758,108.8371925,25.0596284,-187.3431758,108.8371925,28.3385514,-187.3431758,131.0548058,28.3385514,-187.3431758,131.0548058,28.3385562,-190.1495647,131.0548058,28.3385514,-190.1495647,108.8371925,28.3385514,-187.3431758,131.0548058,28.3385514,-190.1495647,108.8371925,28.3385467,-187.3431758,108.8371925,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.966621f,0.5257632f,0.9628023f,0.4641285f,0.9628023f,0.5257789f,0.9628023f,0.5257789f,0.9628023f,0.4641285f,0.9607593f,0.4641285f,0.966621f,0.4641128f,0.9628023f,0.4641285f,0.966621f,0.5257632f,0.9628023f,0.5257789f,0.9607593f,0.4641285f,0.9607593f,0.5257789f,0.966621f,0.5257632f,0.9686641f,0.4641128f,0.966621f,0.4641128f,0.9686641f,0.5257632f,0.9752413f,0.5257632f,0.9706455f,0.5257789f,0.9706455f,0.4641285f,0.9752413f,0.5257632f,0.9706455f,0.4641285f,0.9752413f,0.4641128f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,3,9,5,10,9,11,10,12,11,13,12,14,11,13,10,12,13,15,14,16,15,17,16,18,17,19,18,20,19,21,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID264(GL2 gl){
double[] positionsArray = {
25.0596284,-169.0446632,131.0548143,28.3385467,-169.0446632,108.8371925,28.3385514,-169.0446632,131.0548058,28.3385514,-166.2383084,131.0548058,28.3385514,-169.0446632,131.0548058,28.3385467,-169.0446632,108.8371925,25.0596237,-169.0446632,108.8371925,28.3385467,-166.2383084,108.8371925,25.0596332,-166.2383084,131.0548058,25.0596237,-169.0446632,108.8371925,25.0596284,-169.0446632,131.0548143,25.0596332,-166.2383084,131.0548058,28.3385467,-166.2383084,108.8371925,25.0596284,-166.2383084,108.8371925,28.3385514,-166.2383084,131.0548058,25.0596284,-166.2383084,108.8371925,25.0596237,-169.0446632,108.8371925,25.0596332,-166.2383084,131.0548058,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.9628023f,0.5257789f,0.9607593f,0.4641285f,0.9607593f,0.5257789f,0.9752413f,0.5257632f,0.9706455f,0.5257789f,0.9706455f,0.4641285f,0.9628023f,0.5257789f,0.9628023f,0.4641285f,0.9607593f,0.4641285f,0.9752413f,0.5257632f,0.9706455f,0.4641285f,0.9752413f,0.4641128f,0.966621f,0.5257632f,0.9628023f,0.4641285f,0.9628023f,0.5257789f,0.966621f,0.5257632f,0.9686641f,0.4641128f,0.966621f,0.4641128f,0.9686641f,0.5257632f,0.966621f,0.4641128f,0.9628023f,0.4641285f,0.966621f,0.5257632f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,0,6,6,7,1,8,3,9,5,10,7,11,8,12,9,13,10,14,11,15,12,16,13,17,12,16,11,15,14,18,15,19,16,20,17,21,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID272(GL2 gl){
double[] positionsArray = {
51.7293394,-501.9627211,64.3904534,50.7655751,-504.790288,63.3143494,51.7293394,-504.790288,64.3904534,72.3681456,-504.790288,64.3904619,51.7293394,-504.790288,64.3904534,50.7655751,-504.790288,63.3143494,72.3681456,-501.9627211,64.3904619,51.7293394,-501.9627211,64.3904534,51.7293394,-504.790288,64.3904534,50.7655751,-501.9627211,63.3143494,50.7655751,-504.790288,63.3143494,51.7293394,-501.9627211,64.3904534,72.3681456,-504.790288,64.3904619,73.3319146,-504.790288,56.8627918,51.7293441,-504.790288,55.7866835,50.7655751,-501.9627211,63.3143494,50.7655751,-504.790288,56.8627875,50.7655751,-504.790288,63.3143494,72.3681456,-501.9627211,64.3904619,72.3681456,-504.790288,64.3904619,73.3319098,-501.9627211,63.3143579,73.3319146,-504.790288,63.3143579,50.7655751,-504.790288,56.8627875,72.3681503,-504.790288,55.7866878,50.7655751,-501.9627211,56.8627875,73.3319098,-501.9627211,63.3143579,72.3681456,-504.790288,64.3904619,73.3319146,-504.790288,63.3143579,73.3319098,-501.9627211,56.8627961,73.3319146,-504.790288,63.3143579,73.3319146,-504.790288,56.8627918,50.7655751,-501.9627211,56.8627875,51.7293441,-504.790288,55.7866835,50.7655751,-504.790288,56.8627875,72.3681503,-504.790288,55.7866878,51.7293441,-504.790288,55.7866835,51.7293394,-501.9627211,55.7866835,72.3681456,-501.9627211,55.7866878,73.3319146,-504.790288,56.8627918,72.3681503,-504.790288,55.7866878,73.3319098,-501.9627211,63.3143579,73.3319146,-504.790288,63.3143579,73.3319098,-501.9627211,56.8627961,72.3681456,-501.9627211,55.7866878,73.3319098,-501.9627211,56.8627961,73.3319146,-504.790288,56.8627918,50.7655751,-501.9627211,56.8627875,51.7293394,-501.9627211,55.7866835,51.7293441,-504.790288,55.7866835,72.3681503,-504.790288,55.7866878,51.7293394,-501.9627211,55.7866835,72.3681456,-501.9627211,55.7866878,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.7111511f,0.1438572f,0.713716f,0.1305183f,0.7188558f,0.1390706f,0.8289229f,0.1390706f,0.7188558f,0.1390706f,0.713716f,0.1305183f,0.836627f,0.143857f,0.7111505f,0.1438571f,0.7188552f,0.1390705f,0.7052917f,0.1341075f,0.713716f,0.1305183f,0.836628f,0.1438572f,0.7188561f,0.1390707f,0.8289233f,0.1390707f,0.8340626f,0.093743f,0.7137161f,0.1305182f,0.7188558f,0.0851906f,0.8289229f,0.1390706f,0.7052917f,0.1341075f,0.713716f,0.093743f,0.713716f,0.1305183f,0.8366277f,0.1438571f,0.8289229f,0.1390706f,0.8424869f,0.1341074f,0.8289229f,0.1390706f,0.8340626f,0.093743f,0.8340626f,0.1305182f,0.713716f,0.1305183f,0.713716f,0.093743f,0.7188558f,0.0851906f,0.8340626f,0.093743f,0.7188558f,0.0851906f,0.8289229f,0.0851906f,0.7052917f,0.0901538f,0.713716f,0.093743f,0.7052917f,0.1341075f,0.8424869f,0.1341074f,0.8289229f,0.1390706f,0.8340626f,0.1305182f,0.8424869f,0.0901538f,0.8340626f,0.1305182f,0.8340626f,0.093743f,0.7052917f,0.0901538f,0.7188558f,0.0851906f,0.713716f,0.093743f,0.8289236f,0.0851906f,0.7188564f,0.0851907f,0.7111517f,0.0804042f,0.8366277f,0.0804041f,0.8340626f,0.093743f,0.8289229f,0.0851906f,0.8424869f,0.1341074f,0.8340626f,0.1305182f,0.8424869f,0.0901538f,0.8366277f,0.0804041f,0.8424869f,0.0901538f,0.8340626f,0.093743f,0.7052917f,0.0901538f,0.7111511f,0.0804041f,0.7188558f,0.0851906f,0.8289226f,0.0851905f,0.7111508f,0.0804041f,0.8366273f,0.080404f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,7,6,11,8,12,12,13,13,14,5,15,14,16,5,15,13,14,3,17,15,18,16,19,17,20,18,21,19,22,20,23,3,24,13,25,21,26,5,27,22,28,14,29,13,30,14,31,23,32,24,33,16,34,15,35,25,36,26,37,27,38,28,39,29,40,30,41,31,42,32,43,33,44,34,45,35,46,36,47,37,48,38,49,39,50,40,51,41,52,42,53,43,54,44,55,45,56,46,57,47,58,48,59,49,60,50,61,51,62,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID280(GL2 gl){
double[] positionsArray = {
30.3043047,-78.4128644,156.8527681,37.6912958,-78.4128644,103.5076008,30.3042953,-78.4128644,103.5076093,30.3043047,-75.0919085,156.8527681,30.3043047,-78.4128644,156.8527681,30.3042953,-78.4128644,103.5076093,37.6913052,-78.4128644,156.8527681,30.3042953,-75.0918745,103.5076093,30.3043047,-75.0919085,156.8527681,30.3042953,-78.4128644,103.5076093,30.3043047,-75.0919085,156.8527681,30.3042953,-75.0918745,103.5076093,37.6913052,-75.0918745,156.8527681,37.6913052,-75.0918745,156.8527681,30.3042953,-75.0918745,103.5076093,37.6912958,-75.0918745,103.5076008,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.5228199f,0.823592f,0.5184981f,0.6911775f,0.5228199f,0.6911775f,0.5315508f,0.823592f,0.5228199f,0.823592f,0.5228199f,0.6911775f,0.5184981f,0.823592f,0.5184981f,0.6911775f,0.5228199f,0.823592f,0.5315508f,0.6911775f,0.5315508f,0.823592f,0.5228199f,0.6911775f,0.5315508f,0.823592f,0.5315508f,0.6911775f,0.5358726f,0.823592f,0.5358726f,0.823592f,0.5315508f,0.6911775f,0.5358725f,0.6911775f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,1,7,0,8,7,9,8,10,9,11,10,12,11,13,12,14,13,15,14,16,15,17,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID288(GL2 gl){
double[] positionsArray = {
30.3043047,-75.0919085,156.8527681,37.6913052,-78.4128644,156.8527681,30.3043047,-78.4128644,156.8527681,37.6913052,-75.0918745,156.8527681,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 6, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID294(GL2 gl){
double[] positionsArray = {
25.0596284,-147.6826994,131.0548143,28.3385467,-147.6826994,108.8371925,28.3385514,-147.6826994,131.0548058,28.3385467,-144.8763445,131.0548058,28.3385514,-147.6826994,131.0548058,28.3385467,-147.6826994,108.8371925,25.0596237,-147.6826994,108.8371925,28.3385467,-144.8763445,131.0548058,28.3385467,-147.6826994,108.8371925,28.338542,-144.8763445,108.8371925,25.0596284,-144.8763445,131.0548058,25.0596237,-147.6826994,108.8371925,25.0596284,-147.6826994,131.0548143,25.0596284,-144.8763445,131.0548058,28.338542,-144.8763445,108.8371925,25.0596237,-144.8763445,108.8371925,28.3385467,-144.8763445,131.0548058,25.0596237,-144.8763445,108.8371925,25.0596237,-147.6826994,108.8371925,25.0596284,-144.8763445,131.0548058,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.9628023f,0.5257789f,0.9607593f,0.4641285f,0.9607593f,0.5257789f,0.9752413f,0.5257632f,0.9706455f,0.5257789f,0.9706455f,0.4641285f,0.9628023f,0.5257789f,0.9628023f,0.4641285f,0.9607593f,0.4641285f,0.9752413f,0.5257632f,0.9706455f,0.4641285f,0.9752413f,0.4641128f,0.966621f,0.5257632f,0.9628023f,0.4641285f,0.9628023f,0.5257789f,0.966621f,0.5257632f,0.9686641f,0.4641128f,0.966621f,0.4641128f,0.9686641f,0.5257632f,0.966621f,0.4641128f,0.9628023f,0.4641285f,0.966621f,0.5257632f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,0,6,6,7,1,8,7,9,8,10,9,11,10,12,11,13,12,14,13,15,14,16,15,17,14,16,13,15,16,18,17,19,18,20,19,21,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID302(GL2 gl){
double[] positionsArray = {
25.0596284,-126.9587306,131.0548143,28.3385467,-126.9587306,108.8371925,28.3385514,-126.9587306,131.0548058,28.3385467,-124.1523417,131.0548058,28.3385514,-126.9587306,131.0548058,28.3385467,-126.9587306,108.8371925,25.0596237,-126.9587306,108.8371925,28.3385467,-124.1523417,131.0548058,28.3385467,-126.9587306,108.8371925,28.338542,-124.1523417,108.8371925,25.0596284,-124.1523417,131.0548058,25.0596237,-126.9587306,108.8371925,25.0596284,-126.9587306,131.0548143,25.0596284,-124.1523417,131.0548058,28.338542,-124.1523417,108.8371925,25.0596237,-124.1523417,108.8371925,28.3385467,-124.1523417,131.0548058,25.0596237,-124.1523417,108.8371925,25.0596237,-126.9587306,108.8371925,25.0596284,-124.1523417,131.0548058,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.9628023f,0.5257789f,0.9607593f,0.4641285f,0.9607593f,0.5257789f,0.9752413f,0.5257632f,0.9706455f,0.5257789f,0.9706455f,0.4641285f,0.9628023f,0.5257789f,0.9628023f,0.4641285f,0.9607593f,0.4641285f,0.9752413f,0.5257632f,0.9706455f,0.4641285f,0.9752413f,0.4641128f,0.966621f,0.5257632f,0.9628023f,0.4641285f,0.9628023f,0.5257789f,0.966621f,0.5257632f,0.9686641f,0.4641128f,0.966621f,0.4641128f,0.9686641f,0.5257632f,0.966621f,0.4641128f,0.9628023f,0.4641285f,0.966621f,0.5257632f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,0,6,6,7,1,8,7,9,8,10,9,11,10,12,11,13,12,14,13,15,14,16,15,17,14,16,13,15,16,18,17,19,18,20,19,21,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID310(GL2 gl){
double[] positionsArray = {
25.0596284,-106.8927611,131.0548143,28.3385467,-106.8927611,108.8371925,28.3385514,-106.8927611,131.0548058,28.3385467,-104.0863723,131.0548058,28.3385514,-106.8927611,131.0548058,28.3385467,-106.8927611,108.8371925,25.0596237,-106.8927611,108.8371925,28.3385467,-104.0863723,131.0548058,28.3385467,-106.8927611,108.8371925,28.338542,-104.0863723,108.8371925,25.0596284,-104.0863723,131.0548058,25.0596237,-106.8927611,108.8371925,25.0596284,-106.8927611,131.0548143,25.0596284,-104.0863723,131.0548058,28.338542,-104.0863723,108.8371925,25.0596237,-104.0863723,108.8371925,28.3385467,-104.0863723,131.0548058,25.0596237,-104.0863723,108.8371925,25.0596237,-106.8927611,108.8371925,25.0596284,-104.0863723,131.0548058,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.9628023f,0.5257789f,0.9607593f,0.4641285f,0.9607593f,0.5257789f,0.9752413f,0.5257632f,0.9706455f,0.5257789f,0.9706455f,0.4641285f,0.9628023f,0.5257789f,0.9628023f,0.4641285f,0.9607593f,0.4641285f,0.9752413f,0.5257632f,0.9706455f,0.4641285f,0.9752413f,0.4641128f,0.966621f,0.5257632f,0.9628023f,0.4641285f,0.9628023f,0.5257789f,0.966621f,0.5257632f,0.9686641f,0.4641128f,0.966621f,0.4641128f,0.9686641f,0.5257632f,0.966621f,0.4641128f,0.9628023f,0.4641285f,0.966621f,0.5257632f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,0,6,6,7,1,8,7,9,8,10,9,11,10,12,11,13,12,14,13,15,14,16,15,17,14,16,13,15,16,18,17,19,18,20,19,21,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID318(GL2 gl){
double[] positionsArray = {
25.0596332,-88.1439471,131.0548143,28.3385514,-88.1439471,108.8371925,28.3385562,-88.1439471,131.0548058,28.3385514,-85.3375583,131.0548058,28.3385562,-88.1439471,131.0548058,28.3385514,-88.1439471,108.8371925,25.0596284,-88.1439471,108.8371925,28.3385514,-85.3375583,131.0548058,28.3385514,-88.1439471,108.8371925,28.3385467,-85.3375583,108.8371925,25.0596332,-85.3375583,131.0548058,25.0596284,-88.1439471,108.8371925,25.0596332,-88.1439471,131.0548143,25.0596332,-85.3375583,131.0548058,28.3385467,-85.3375583,108.8371925,25.0596284,-85.3375583,108.8371925,28.3385514,-85.3375583,131.0548058,25.0596284,-85.3375583,108.8371925,25.0596284,-88.1439471,108.8371925,25.0596332,-85.3375583,131.0548058,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.9628023f,0.5257789f,0.9607593f,0.4641285f,0.9607593f,0.5257789f,0.9752413f,0.5257632f,0.9706455f,0.5257789f,0.9706455f,0.4641285f,0.9628023f,0.5257789f,0.9628023f,0.4641285f,0.9607593f,0.4641285f,0.9752413f,0.5257632f,0.9706455f,0.4641285f,0.9752413f,0.4641128f,0.966621f,0.5257632f,0.9628023f,0.4641285f,0.9628023f,0.5257789f,0.966621f,0.5257632f,0.9686641f,0.4641128f,0.966621f,0.4641128f,0.9686641f,0.5257632f,0.966621f,0.4641128f,0.9628023f,0.4641285f,0.966621f,0.5257632f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,0,6,6,7,1,8,7,9,8,10,9,11,10,12,11,13,12,14,13,15,14,16,15,17,14,16,13,15,16,18,17,19,18,20,19,21,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID326(GL2 gl){
double[] positionsArray = {
25.0596284,-228.2611179,131.0548058,25.0596237,-231.0674898,108.8371925,25.0596284,-231.0674898,131.0548143,25.0596284,-231.0674898,131.0548143,25.0596237,-231.0674898,108.8371925,28.3385467,-231.0674898,108.8371925,25.0596237,-228.2611179,108.8371925,25.0596237,-231.0674898,108.8371925,25.0596284,-228.2611179,131.0548058,28.3385514,-231.0674898,131.0548058,25.0596284,-228.2611179,131.0548058,28.338542,-228.2611179,108.8371925,25.0596237,-228.2611179,108.8371925,28.3385467,-228.2611179,131.0548058,28.3385467,-228.2611179,131.0548058,28.3385514,-231.0674898,131.0548058,28.3385467,-231.0674898,108.8371925,28.338542,-228.2611179,108.8371925,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.966621f,0.5257632f,0.9628023f,0.4641285f,0.9628023f,0.5257789f,0.9628023f,0.5257789f,0.9628023f,0.4641285f,0.9607593f,0.4641285f,0.966621f,0.4641128f,0.9628023f,0.4641285f,0.966621f,0.5257632f,0.9628023f,0.5257789f,0.9607593f,0.4641285f,0.9607593f,0.5257789f,0.966621f,0.5257632f,0.9686641f,0.4641128f,0.966621f,0.4641128f,0.9686641f,0.5257632f,0.9752413f,0.5257632f,0.9706455f,0.5257789f,0.9706455f,0.4641285f,0.9752413f,0.5257632f,0.9706455f,0.4641285f,0.9752413f,0.4641128f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,3,9,5,10,9,11,10,12,11,13,12,14,11,13,10,12,13,15,14,16,15,17,16,18,14,19,16,20,17,21,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID334(GL2 gl){
double[] positionsArray = {
25.0596379,-67.4960492,131.0548143,28.3385562,-67.4960492,108.8371925,28.3385609,-67.4960492,131.0548058,28.3385562,-64.6896603,131.0548058,28.3385609,-67.4960492,131.0548058,28.3385562,-67.4960492,108.8371925,28.3385562,-67.4960492,108.8371925,25.0598214,-67.496045,110.1972983,25.0596332,-67.4960492,108.8371925,25.0596379,-67.4960492,131.0548143,28.3385562,-64.6896603,131.0548058,28.3385562,-67.4960492,108.8371925,28.3385514,-64.6896603,108.8371925,25.0596379,-64.6896603,131.0548058,25.0598214,-67.496045,110.1972983,25.0596379,-67.4960492,131.0548143,25.0596332,-67.4960492,108.8371925,25.0596379,-64.6896603,131.0548058,28.3385514,-64.6896603,108.8371925,25.0596332,-64.6896603,108.8371925,28.3385562,-64.6896603,131.0548058,25.0596332,-64.6896603,108.8371925,25.0596332,-67.4960492,108.8371925,25.0596379,-64.6896603,131.0548058,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.9628023f,0.5257789f,0.9607593f,0.4641285f,0.9607593f,0.5257789f,0.9752413f,0.5257632f,0.9706455f,0.5257789f,0.9706455f,0.4641285f,0.9607592f,0.4641285f,0.9628021f,0.4679026f,0.9628023f,0.4641285f,0.9628023f,0.525779f,0.9752413f,0.5257632f,0.9706455f,0.4641285f,0.9752413f,0.4641128f,0.966621f,0.525763f,0.9628022f,0.4679024f,0.9628022f,0.5257787f,0.9628022f,0.4641283f,0.966621f,0.5257632f,0.9686641f,0.4641128f,0.966621f,0.4641128f,0.9686641f,0.5257632f,0.966621f,0.4641128f,0.9628023f,0.4641285f,0.966621f,0.5257632f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,7,7,6,6,9,9,10,10,11,11,12,12,13,13,14,14,15,15,13,13,16,16,14,14,17,17,18,18,19,19,18,18,17,17,20,20,21,21,22,22,23,23,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID342(GL2 gl){
double[] positionsArray = {
25.0596379,-46.4087365,131.0548143,28.3385562,-46.4087365,108.8371925,28.3385609,-46.4087365,131.0548058,28.3385562,-43.6023477,131.0548058,28.3385609,-46.4087365,131.0548058,28.3385562,-46.4087365,108.8371925,25.0596332,-46.4087365,108.8371925,28.3385562,-43.6023477,131.0548058,28.3385562,-46.4087365,108.8371925,28.3385514,-43.6023477,108.8371925,25.0596379,-43.6023477,131.0548058,25.0596332,-46.4087365,108.8371925,25.0596379,-46.4087365,131.0548143,25.0596379,-43.6023477,131.0548058,28.3385514,-43.6023477,108.8371925,25.0596332,-43.6023477,108.8371925,28.3385562,-43.6023477,131.0548058,25.0596332,-43.6023477,108.8371925,25.0596332,-46.4087365,108.8371925,25.0596379,-43.6023477,131.0548058,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.9628023f,0.5257789f,0.9607593f,0.4641285f,0.9607593f,0.5257789f,0.9752413f,0.5257632f,0.9706455f,0.5257789f,0.9706455f,0.4641285f,0.9628023f,0.5257789f,0.9628023f,0.4641285f,0.9607593f,0.4641285f,0.9752413f,0.5257632f,0.9706455f,0.4641285f,0.9752413f,0.4641128f,0.966621f,0.5257632f,0.9628023f,0.4641285f,0.9628023f,0.5257789f,0.966621f,0.5257632f,0.9686641f,0.4641128f,0.966621f,0.4641128f,0.9686641f,0.5257632f,0.966621f,0.4641128f,0.9628023f,0.4641285f,0.966621f,0.5257632f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,0,6,6,7,1,8,7,9,8,10,9,11,10,12,11,13,12,14,13,15,14,16,15,17,14,16,13,15,16,18,17,19,18,20,19,21,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID350(GL2 gl){
double[] positionsArray = {
166.2243636,-29.0821006,151.4807205,158.5511975,-197.4351529,157.3447325,158.5512353,-32.3587272,157.3447325,166.2243636,-29.0821006,151.4807205,166.2243258,-200.7117454,151.4807035,158.5511975,-197.4351529,157.3447325,173.8974731,-32.3586591,157.3447325,166.2243258,-200.7117454,151.4807035,166.2243636,-29.0821006,151.4807205,173.8974731,-32.3586591,157.3447325,173.8974447,-197.4351529,157.3447325,166.2243258,-200.7117454,151.4807035,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.2905831f,0.6490102f,0.3025702f,0.7948113f,0.3025701f,0.651848f,0.2905831f,0.6490102f,0.2905834f,0.797649f,0.3025702f,0.7948113f,0.2785962f,0.651848f,0.2905834f,0.797649f,0.2905831f,0.6490102f,0.2785962f,0.651848f,0.2785963f,0.7948113f,0.2905834f,0.797649f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID358(GL2 gl){
double[] positionsArray = {
29.5306428,-29.0820666,136.4383402,21.8574767,-197.4351189,142.3023522,21.8575145,-32.3587272,142.3023522,29.5306428,-29.0820666,136.4383402,29.5306003,-200.7117114,136.4383402,21.8574767,-197.4351189,142.3023522,37.2037523,-32.3586931,142.3023522,29.5306003,-200.7117114,136.4383402,29.5306428,-29.0820666,136.4383402,37.2037523,-32.3586931,142.3023522,37.2037286,-197.4351189,142.3023522,29.5306003,-200.7117114,136.4383402,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.2905831f,0.6490102f,0.3025702f,0.7948113f,0.3025701f,0.651848f,0.2905831f,0.6490102f,0.2905834f,0.797649f,0.3025702f,0.7948113f,0.2785962f,0.651848f,0.2905834f,0.797649f,0.2905831f,0.6490102f,0.2785962f,0.651848f,0.2785963f,0.7948113f,0.2905834f,0.797649f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID366(GL2 gl){
double[] positionsArray = {
30.3043047,-178.0870597,156.8527681,37.6912957,-178.0870597,103.5076008,30.3042953,-178.0870257,103.5076093,30.3042953,-178.0870257,103.5076093,30.3043047,-174.7661038,156.8527681,30.3043047,-178.0870597,156.8527681,30.3042953,-174.7660698,103.5076093,37.6913052,-178.0870597,156.8527681,37.6912957,-178.0870597,103.5076008,30.3043047,-178.0870597,156.8527681,30.3043047,-174.7661038,156.8527681,30.3042953,-174.7660698,103.5076093,37.6913052,-174.7660698,156.8527681,37.6913052,-174.7660698,156.8527681,30.3042953,-174.7660698,103.5076093,37.6912957,-174.7660698,103.5076008,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.5228199f,0.823592f,0.5184981f,0.6911775f,0.5228199f,0.6911775f,0.5228199f,0.6911775f,0.5315508f,0.823592f,0.5228199f,0.823592f,0.5315508f,0.6911775f,0.5184981f,0.823592f,0.5184981f,0.6911775f,0.5228199f,0.823592f,0.5315508f,0.823592f,0.5315508f,0.6911775f,0.5358726f,0.823592f,0.5358726f,0.823592f,0.5315508f,0.6911775f,0.5358725f,0.6911775f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,4,4,3,3,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID374(GL2 gl){
double[] positionsArray = {
30.3043047,-174.7661038,156.8527681,37.6913052,-178.0870597,156.8527681,30.3043047,-178.0870597,156.8527681,37.6913052,-174.7660698,156.8527681,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 6, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID380(GL2 gl){
double[] positionsArray = {
166.1097744,-256.4290765,164.4586658,166.1097649,-235.1794499,164.4586658,163.3017324,-235.1794499,166.1100708,163.0586772,-256.4290765,155.1242851,166.1097649,-235.1794499,164.4586658,166.1097744,-256.4290765,164.4586658,163.0586678,-235.1794499,155.1242851,163.3017324,-235.1794499,166.1100708,166.1097649,-235.1794499,164.4586658,163.0586678,-235.1794499,155.1242851,166.1097744,-256.4290765,164.4586658,163.3017324,-235.1794499,166.1100708,163.3017419,-256.4290765,166.1100708,166.1097744,-256.4290765,164.4586658,157.1413921,-256.4290765,155.1242851,163.0586772,-256.4290765,155.1242851,157.1413827,-235.1794499,155.1242851,163.3017419,-256.4290765,166.1100708,163.3017324,-235.1794499,166.1100708,157.1413827,-235.1794499,163.0507226,163.3017419,-256.4290765,166.1100708,157.1413921,-256.4290765,163.0507226,157.1413827,-235.1794499,163.0507226,163.3017419,-256.4290765,166.1100708,157.1413827,-235.1794499,163.0507226,157.1413921,-256.4290765,163.0507226,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.6655266f,0.8134229f,0.7205505f,0.8134229f,0.7206432f,0.8241143f,0.6655266f,0.7647272f,0.7205505f,0.8134229f,0.7205505f,0.7647272f,0.7245913f,0.8183608f,0.7205505f,0.8134229f,0.7205505f,0.7647272f,0.6655266f,0.8134229f,0.7206432f,0.8241143f,0.6656586f,0.8241143f,0.6655266f,0.8134229f,0.6519512f,0.7647272f,0.6655266f,0.7647272f,0.7245913f,0.8183608f,0.7205505f,0.7647272f,0.7356508f,0.7647272f,0.6656586f,0.8241143f,0.7206432f,0.8241143f,0.720601f,0.8348594f,0.6591104f,0.8183608f,0.6519512f,0.8021786f,0.6655266f,0.8134229f,0.6655266f,0.8134229f,0.6519512f,0.8021786f,0.6519512f,0.7647272f,0.7245913f,0.8183608f,0.7356508f,0.7647272f,0.7356508f,0.8021786f,0.6656586f,0.8241143f,0.720601f,0.8348594f,0.6657009f,0.8348594f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,0,4,4,3,3,6,5,7,6,8,7,9,8,10,9,11,10,12,11,13,12,14,13,15,14,7,15,9,16,16,17,17,18,18,19,19,20,20,21,21,22,13,23,13,24,21,25,14,26,7,27,16,28,22,29,23,30,24,31,25,32,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID388(GL2 gl){
double[] positionsArray = {
21.8244828,-333.0587165,174.7290187,21.8244781,-341.1226021,173.3210755,21.8244781,-335.5835479,176.3804238,45.4575976,-341.1226191,173.3210755,21.8244781,-335.5835479,176.3804238,21.8244781,-341.1226021,173.3210755,45.4575976,-335.5835649,176.3804238,21.8244828,-333.0587165,174.7290187,21.8244781,-335.5835479,176.3804238,21.8244828,-333.0587165,174.7290187,21.8244781,-341.1226021,165.394638,21.8244781,-341.1226021,173.3210755,45.4575976,-335.5835649,176.3804238,45.4575976,-333.0587335,174.7290187,21.8244828,-333.0587165,174.7290187,45.4575976,-335.5835649,176.3804238,21.8244828,-333.0587165,174.7290187,21.8244781,-335.8020985,165.394638,21.8244781,-341.1226021,165.394638,45.4575976,-335.5835649,176.3804238,45.4575976,-341.1226191,173.3210755,45.4575976,-341.1226191,165.394638,45.4575976,-333.0587335,174.7290187,45.4575976,-335.8021155,165.394638,21.8244828,-333.0587165,174.7290187,45.4575976,-335.8021155,165.394638,21.8244781,-335.8020985,165.394638,45.4575976,-333.0587335,174.7290187,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.6655266f,0.8134229f,0.6519512f,0.8021786f,0.6591104f,0.8183608f,0.720601f,0.8348594f,0.6656586f,0.8241143f,0.6657009f,0.8348594f,0.7206432f,0.8241143f,0.6655266f,0.8134229f,0.6656586f,0.8241143f,0.6655266f,0.8134229f,0.6519512f,0.7647272f,0.6519512f,0.8021786f,0.7206432f,0.8241143f,0.6656586f,0.8241143f,0.720601f,0.8348594f,0.7205505f,0.8134229f,0.6655266f,0.8134229f,0.7206432f,0.8241143f,0.6655266f,0.8134229f,0.6655266f,0.7647272f,0.6519512f,0.7647272f,0.7245913f,0.8183608f,0.7356508f,0.8021786f,0.7356508f,0.7647272f,0.7205505f,0.8134229f,0.7245913f,0.8183608f,0.7205505f,0.7647272f,0.6655266f,0.8134229f,0.7205505f,0.7647272f,0.6655266f,0.7647272f,0.7205505f,0.8134229f,0.7245913f,0.8183608f,0.7356508f,0.7647272f,0.7205505f,0.7647272f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,4,13,3,14,13,15,14,16,15,17,16,18,17,19,18,20,19,21,20,22,21,23,22,24,19,25,23,26,24,27,25,28,26,29,25,28,24,27,27,30,19,31,21,32,23,33,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID396(GL2 gl){
double[] positionsArray = {
21.8244781,-335.8020985,165.394638,45.4575976,-341.1226191,165.394638,21.8244781,-341.1226021,165.394638,45.4575976,-335.8021155,165.394638,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 6, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID402(GL2 gl){
double[] positionsArray = {
172.8317382,-333.0587165,174.7290187,172.8317382,-341.1226021,165.394638,172.8317382,-335.8020985,165.394638,149.1986187,-333.0587335,174.7290187,172.8317382,-335.8020985,165.394638,149.1986187,-335.8021155,165.394638,172.8317382,-333.0587165,174.7290187,172.8317382,-341.1226021,173.3210755,149.1986187,-333.0587335,174.7290187,149.1986187,-335.8021155,165.394638,149.1986187,-335.5835649,176.3804238,172.8317382,-333.0587165,174.7290187,149.1986187,-333.0587335,174.7290187,149.1986187,-335.5835649,176.3804238,172.8317382,-335.5835479,176.3804238,149.1986187,-341.1226191,165.394638,172.8317382,-333.0587165,174.7290187,149.1986187,-335.5835649,176.3804238,172.8317382,-335.5835479,176.3804238,172.8317382,-335.5835479,176.3804238,149.1986187,-341.1226191,173.3210755,172.8317382,-341.1226021,173.3210755,149.1986187,-341.1226191,173.3210755,172.8317382,-335.5835479,176.3804238,149.1986187,-335.5835649,176.3804238,149.1986187,-341.1226191,173.3210755,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.6655266f,0.8134229f,0.6519512f,0.7647272f,0.6655266f,0.7647272f,0.7205505f,0.8134229f,0.6655266f,0.7647272f,0.7205505f,0.7647272f,0.6655266f,0.8134229f,0.6655266f,0.8134229f,0.6519512f,0.8021786f,0.6519512f,0.7647272f,0.7205505f,0.8134229f,0.7205505f,0.7647272f,0.7245913f,0.8183608f,0.6655266f,0.8134229f,0.7205505f,0.8134229f,0.7206432f,0.8241143f,0.6591104f,0.8183608f,0.6519512f,0.8021786f,0.7245913f,0.8183608f,0.7205505f,0.7647272f,0.7356508f,0.7647272f,0.6655266f,0.8134229f,0.7206432f,0.8241143f,0.6656586f,0.8241143f,0.6656586f,0.8241143f,0.720601f,0.8348594f,0.6657009f,0.8348594f,0.7245913f,0.8183608f,0.7356508f,0.7647272f,0.7356508f,0.8021786f,0.6656586f,0.8241143f,0.7206432f,0.8241143f,0.720601f,0.8348594f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,4,4,3,3,6,6,0,7,7,8,1,9,8,10,9,11,10,12,11,13,12,14,13,15,0,7,14,16,7,17,10,18,9,19,15,20,16,21,17,22,18,23,19,24,20,25,21,26,10,27,15,28,22,29,23,30,24,31,25,32,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID410(GL2 gl){
double[] positionsArray = {
149.1986187,-335.8021155,165.394638,172.8317382,-341.1226021,165.394638,149.1986187,-341.1226191,165.394638,172.8317382,-335.8020985,165.394638,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 6, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID416(GL2 gl){
double[] positionsArray = {
183.1637836,-433.7862091,94.2755963,176.5650548,-433.7862091,91.7363546,176.5739654,-433.7862091,89.5394852,183.1637836,-432.0016653,94.2755963,183.1637836,-433.7862091,94.2755963,176.5739654,-433.7862091,89.5394852,181.553745,-433.7862091,95.3203053,183.1637836,-432.0016653,94.2755963,183.242352,-432.0016823,133.8691937,183.1637836,-433.7862091,94.2755963,176.5739654,-432.0016738,89.5394852,183.242352,-433.7862176,133.8691937,181.553745,-433.7862091,95.3203053,183.1637836,-433.7862091,94.2755963,181.553745,-433.7862091,95.3203053,176.5650548,-432.0016738,91.7363546,176.5650548,-433.7862091,91.7363546,183.242352,-432.0016823,133.8691937,183.1637836,-432.0016653,94.2755963,181.4752144,-432.0016823,133.0558891,183.242352,-432.0016823,133.8691937,183.242352,-433.7862176,133.8691937,183.1637836,-433.7862091,94.2755963,181.553745,-432.0016653,95.3203053,183.1637836,-432.0016653,94.2755963,176.5739654,-432.0016738,89.5394852,183.242352,-433.7862176,133.8691937,181.4752144,-433.7862176,133.0558891,181.553745,-433.7862091,95.3203053,181.553745,-432.0016653,95.3203053,176.5650548,-432.0016738,91.7363546,181.553745,-433.7862091,95.3203053,176.5592657,-432.0016823,136.4900094,183.242352,-432.0016823,133.8691937,181.4752144,-432.0016823,133.0558891,181.4752144,-432.0016823,133.0558891,183.1637836,-432.0016653,94.2755963,181.553745,-432.0016653,95.3203053,183.242352,-432.0016823,133.8691937,176.5797923,-432.0016823,138.7551267,183.242352,-433.7862176,133.8691937,181.553745,-432.0016653,95.3203053,176.5739654,-432.0016738,89.5394852,176.5650548,-432.0016738,91.7363546,176.5797923,-433.7862262,138.7551267,181.4752144,-433.7862176,133.0558891,183.242352,-433.7862176,133.8691937,181.553745,-432.0016653,95.3203053,181.553745,-433.7862091,95.3203053,181.4752144,-433.7862176,133.0558891,181.4752144,-432.0016823,133.0558891,176.5592657,-433.7862262,136.4900094,176.5592657,-432.0016823,136.4900094,176.5797923,-432.0016823,138.7551267,181.553745,-432.0016653,95.3203053,181.4752144,-433.7862176,133.0558891,181.4752144,-432.0016823,133.0558891,183.242352,-433.7862176,133.8691937,176.5797923,-432.0016823,138.7551267,176.5797923,-433.7862262,138.7551267,176.5797923,-433.7862262,138.7551267,176.5592657,-433.7862262,136.4900094,181.4752144,-433.7862176,133.0558891,181.4752144,-432.0016823,133.0558891,181.4752144,-433.7862176,133.0558891,176.5592657,-433.7862262,136.4900094,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.8944773f,0.3257114f,0.8864295f,0.3015586f,0.8944357f,0.3017742f,0.9010251f,0.3257114f,0.8944773f,0.3257114f,0.8944357f,0.3017742f,0.8864136f,0.3256272f,0.8864295f,0.3015586f,0.8944773f,0.3257114f,0.9010251f,0.3257114f,0.9010186f,0.4914463f,0.8944773f,0.3257114f,0.9010251f,0.3257114f,0.8944357f,0.3017742f,0.9009916f,0.3017742f,0.8944691f,0.4914463f,0.8864136f,0.3256272f,0.8944773f,0.3257114f,0.8864136f,0.3256272f,0.8799339f,0.3015586f,0.8864295f,0.3015586f,0.9010186f,0.4914463f,0.9010251f,0.3257114f,0.9091174f,0.4915085f,0.9010186f,0.4914463f,0.8944691f,0.4914463f,0.8944773f,0.3257114f,0.9091256f,0.3256272f,0.9010251f,0.3257114f,0.9009916f,0.3017742f,0.8944691f,0.4914463f,0.8864217f,0.4915085f,0.8864136f,0.3256272f,0.8798925f,0.3256272f,0.879934f,0.3015586f,0.8864136f,0.3256272f,0.9091375f,0.5175166f,0.9010186f,0.4914463f,0.9091174f,0.4915085f,0.9091174f,0.4915085f,0.9010251f,0.3257114f,0.9091256f,0.3256272f,0.9010186f,0.4914463f,0.901014f,0.517601f,0.8944691f,0.4914463f,0.9091256f,0.3256272f,0.9009916f,0.3017742f,0.9091097f,0.3015586f,0.8944635f,0.517601f,0.8864217f,0.4915085f,0.8944691f,0.4914463f,0.8798925f,0.3256272f,0.8864136f,0.3256272f,0.8864217f,0.4915085f,0.8799137f,0.4915085f,0.8864018f,0.5175166f,0.8798614f,0.5175166f,0.901014f,0.517601f,0.9010186f,0.4914463f,0.9091375f,0.5175166f,0.8798925f,0.3256272f,0.8864217f,0.4915085f,0.8799137f,0.4915085f,0.8944691f,0.4914463f,0.901014f,0.517601f,0.8944635f,0.517601f,0.8944635f,0.517601f,0.8864018f,0.5175166f,0.8864217f,0.4915085f,0.8799137f,0.4915085f,0.8864217f,0.4915085f,0.8864018f,0.5175166f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,1,7,0,8,7,9,8,10,9,11,3,12,5,13,10,14,11,15,12,16,13,17,14,18,15,19,16,20,17,21,18,22,19,23,20,24,21,25,22,26,23,27,24,28,25,29,26,30,27,31,28,32,29,33,30,34,31,35,32,36,33,37,34,38,35,39,36,40,37,41,38,42,39,43,40,44,41,45,42,46,43,47,44,48,45,49,46,50,47,51,48,52,49,53,50,54,51,55,52,56,53,57,33,58,32,59,54,60,55,61,56,62,57,63,58,64,59,65,60,66,61,67,62,68,63,69,64,70,65,71,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID424(GL2 gl){
double[] positionsArray = {
133.2324128,-482.3893411,167.0203787,135.5091102,-482.3893411,167.0203617,132.7842812,-483.6109827,159.6778168,133.2324128,-482.3893411,167.0203787,132.7842812,-483.6109827,159.6778168,132.7842812,-487.3821039,159.6778168,135.5091102,-482.3893411,167.0203617,135.9572323,-483.6109827,159.6778168,132.7842812,-483.6109827,159.6778168,133.2324128,-482.3893411,167.0203787,132.7842812,-487.3821039,159.6778168,133.2324128,-484.1084031,167.0203617,135.5091102,-482.3893411,167.0203617,135.5091102,-484.1084031,167.0203617,135.9572323,-483.6109827,159.6778168,133.2324128,-484.1084031,167.0203617,132.7842812,-487.3821039,159.6778168,135.9572323,-487.3821039,159.6778168,135.9572323,-483.6109827,159.6778168,135.5091102,-484.1084031,167.0203617,135.9572323,-487.3821039,159.6778168,133.2324128,-484.1084031,167.0203617,135.9572323,-487.3821039,159.6778168,135.5091102,-484.1084031,167.0203617,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.3275824f,0.4893402f,0.3275823f,0.4826172f,0.4022735f,0.4949837f,0.3275824f,0.4893402f,0.4022735f,0.4949837f,0.4022737f,0.5188262f,0.3275823f,0.4826172f,0.4022734f,0.4837669f,0.4022735f,0.4949837f,0.3275824f,0.4893402f,0.4022737f,0.5188262f,0.3275824f,0.4980913f,0.3275823f,0.4826172f,0.3275823f,0.4736599f,0.4022734f,0.4837669f,0.3275822f,0.466758f,0.4022731f,0.4460722f,0.4022732f,0.4603213f,0.4022734f,0.4837669f,0.3275823f,0.4736599f,0.4022732f,0.4603213f,0.3275822f,0.466758f,0.4022732f,0.4603213f,0.3275823f,0.4736599f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID432(GL2 gl){
double[] positionsArray = {
135.5091102,-471.6173361,167.0203787,132.7842812,-470.3956946,159.6778168,135.9572323,-470.3956946,159.6778168,135.9572323,-470.3956946,159.6778168,135.5091102,-469.9318605,167.0206171,135.5091102,-471.6173361,167.0203787,135.5091102,-469.8982741,167.0203787,133.2324128,-471.6173361,167.0203787,132.7842812,-470.3956946,159.6778168,135.5091102,-471.6173361,167.0203787,135.9572323,-466.6245734,159.6778168,135.5091102,-469.8982741,167.0203787,135.9572323,-470.3956946,159.6778168,132.7842812,-466.6245734,159.6778168,132.7842812,-470.3956946,159.6778168,133.2324128,-471.6173361,167.0203787,135.5091102,-469.8982741,167.0203787,135.9572323,-466.6245734,159.6778168,133.2324128,-469.8982741,167.0203787,133.2324128,-469.9318604,167.0206171,132.7842812,-466.6245734,159.6778168,133.2324128,-471.6173361,167.0203787,133.2324128,-469.8982741,167.0203787,133.2324128,-469.8982741,167.0203787,135.9572323,-466.6245734,159.6778168,132.7842812,-466.6245734,159.6778168,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.4043159f,0.5428013f,0.3265398f,0.5533173f,0.3265398f,0.5421005f,0.3265396f,0.5420981f,0.4043183f,0.5340165f,0.4043158f,0.542799f,0.4043158f,0.5338417f,0.4043159f,0.5495243f,0.3265398f,0.5533173f,0.4043159f,0.5428013f,0.3265398f,0.5186549f,0.4043159f,0.5338441f,0.3265398f,0.5421005f,0.3265398f,0.5771598f,0.3265398f,0.5533173f,0.4043159f,0.5495243f,0.4043159f,0.5338441f,0.3265398f,0.5186549f,0.4043159f,0.5269421f,0.4043145f,0.5581022f,0.3265358f,0.5771577f,0.4043119f,0.5495221f,0.4043119f,0.5582732f,0.4043159f,0.5269421f,0.3265398f,0.5186549f,0.3265398f,0.5044057f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,4,4,3,3,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,20,20,19,19,22,22,23,23,24,24,25,25,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID440(GL2 gl){
double[] positionsArray = {
183.1637836,-358.2599454,94.2755963,176.5650548,-358.2599284,91.7363546,176.5739464,-358.2599284,89.5394852,183.1637836,-356.4753931,94.2755963,183.1637836,-358.2599454,94.2755963,176.5739464,-358.2599284,89.5394852,181.553745,-358.2599454,95.3203053,176.5650548,-358.2599284,91.7363546,183.1637836,-358.2599454,94.2755963,183.1637836,-356.4753931,94.2755963,183.2423331,-356.4754101,133.8691937,183.1637836,-358.2599454,94.2755963,183.1637836,-356.4753931,94.2755963,176.5739464,-358.2599284,89.5394852,176.5739464,-356.4753931,89.5394852,183.2423331,-358.2599454,133.8691937,181.553745,-358.2599454,95.3203053,183.1637836,-358.2599454,94.2755963,181.553745,-358.2599454,95.3203053,176.5650548,-356.4753931,91.7363546,176.5650548,-358.2599284,91.7363546,183.2423331,-356.4754101,133.8691937,183.1637836,-356.4753931,94.2755963,181.4751955,-356.4754101,133.0558891,183.2423331,-356.4754101,133.8691937,183.2423331,-358.2599454,133.8691937,183.1637836,-358.2599454,94.2755963,181.553745,-356.4753931,95.3203053,183.1637836,-356.4753931,94.2755963,176.5739464,-356.4753931,89.5394852,181.4751955,-358.2599454,133.0558891,181.553745,-356.4753931,95.3203053,176.5650548,-356.4753931,91.7363546,181.553745,-358.2599454,95.3203053,176.5592468,-356.4754101,136.4900094,183.2423331,-356.4754101,133.8691937,181.4751955,-356.4754101,133.0558891,181.4751955,-356.4754101,133.0558891,183.1637836,-356.4753931,94.2755963,181.553745,-356.4753931,95.3203053,183.2423331,-356.4754101,133.8691937,176.5797733,-356.4754101,138.7551267,183.2423331,-358.2599454,133.8691937,176.5650548,-356.4753931,91.7363546,176.5797733,-358.2599454,138.7551267,181.553745,-356.4753931,95.3203053,181.553745,-358.2599454,95.3203053,181.4751955,-358.2599454,133.0558891,181.4751955,-356.4754101,133.0558891,176.5592468,-358.2599454,136.4900094,176.5592468,-356.4754101,136.4900094,176.5797733,-356.4754101,138.7551267,181.553745,-356.4753931,95.3203053,181.4751955,-358.2599454,133.0558891,181.4751955,-356.4754101,133.0558891,176.5797733,-358.2599454,138.7551267,176.5592468,-358.2599454,136.4900094,181.4751955,-356.4754101,133.0558891,181.4751955,-358.2599454,133.0558891,176.5592468,-358.2599454,136.4900094,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.8944773f,0.3257114f,0.8864295f,0.3015586f,0.8944357f,0.3017742f,0.9010251f,0.3257114f,0.8944773f,0.3257114f,0.8944357f,0.3017742f,0.8864136f,0.3256272f,0.8864295f,0.3015586f,0.8944773f,0.3257114f,0.9010251f,0.3257114f,0.9010186f,0.4914463f,0.8944773f,0.3257114f,0.9010251f,0.3257114f,0.8944357f,0.3017742f,0.9009916f,0.3017742f,0.8944691f,0.4914463f,0.8864136f,0.3256272f,0.8944773f,0.3257114f,0.8864136f,0.3256272f,0.8799339f,0.3015586f,0.8864295f,0.3015586f,0.9010186f,0.4914463f,0.9010251f,0.3257114f,0.9091174f,0.4915085f,0.9010186f,0.4914463f,0.8944691f,0.4914463f,0.8944773f,0.3257114f,0.9091256f,0.3256272f,0.9010251f,0.3257114f,0.9009916f,0.3017742f,0.8944691f,0.4914463f,0.8864217f,0.4915085f,0.8864136f,0.3256272f,0.8798925f,0.3256272f,0.879934f,0.3015586f,0.8864136f,0.3256272f,0.9091375f,0.5175166f,0.9010186f,0.4914463f,0.9091174f,0.4915085f,0.9010251f,0.3257114f,0.9091256f,0.3256272f,0.9010186f,0.4914463f,0.901014f,0.517601f,0.8944691f,0.4914463f,0.9091256f,0.3256272f,0.9009916f,0.3017742f,0.9091097f,0.3015586f,0.8944635f,0.517601f,0.8864217f,0.4915085f,0.8944691f,0.4914463f,0.8798925f,0.3256272f,0.8864136f,0.3256272f,0.8864217f,0.4915085f,0.8799137f,0.4915085f,0.8864018f,0.5175166f,0.8798614f,0.5175166f,0.901014f,0.517601f,0.9010186f,0.4914463f,0.9091375f,0.5175166f,0.8798925f,0.3256272f,0.8864217f,0.4915085f,0.8799137f,0.4915085f,0.8944691f,0.4914463f,0.901014f,0.517601f,0.8944635f,0.517601f,0.8944635f,0.517601f,0.8864018f,0.5175166f,0.8864217f,0.4915085f,0.8799137f,0.4915085f,0.8864217f,0.4915085f,0.8864018f,0.5175166f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,15,30,30,31,16,32,31,33,32,34,33,35,34,36,35,37,36,38,37,23,38,39,39,40,40,41,41,42,42,43,27,44,29,45,43,46,44,47,30,48,15,49,45,50,46,51,47,52,48,53,49,54,50,55,51,56,35,57,34,58,52,59,53,60,54,61,42,62,41,63,55,64,44,65,56,66,30,67,57,68,58,69,59,70,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID448(GL2 gl){
double[] positionsArray = {
85.5400254,-496.9785231,152.4250885,85.5400254,-505.5868292,152.4250885,85.5400349,-508.3569687,159.95212,109.173145,-508.3569602,159.95212,85.5400254,-505.5868292,152.4250885,109.173145,-505.5868207,152.4250885,85.5400349,-508.3569687,159.95212,85.5400254,-495.3214133,158.603237,85.5400254,-496.9785231,152.4250885,85.5400349,-508.3569687,159.95212,109.173145,-505.5868207,152.4250885,109.173145,-505.8321288,161.603542,109.173145,-508.3569602,159.95212,109.173145,-505.8321288,161.603542,85.5400349,-508.3569687,159.95212,109.173145,-508.3569602,159.95212,85.5400254,-495.3214133,158.603237,85.5400349,-508.3569687,159.95212,85.5400254,-505.8321373,161.603542,109.173145,-496.9785146,152.4250885,109.173145,-505.8321288,161.603542,85.5400254,-505.8321373,161.603542,85.5400349,-508.3569687,159.95212,109.173145,-495.3214048,158.603237,85.5400254,-495.3214133,158.603237,85.5400254,-505.8321373,161.603542,109.173145,-495.3214048,158.603237,109.173145,-495.3214048,158.603237,85.5400254,-505.8321373,161.603542,109.173145,-505.8321288,161.603542,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.6519512f,0.7647272f,0.6655266f,0.7647272f,0.6655266f,0.8134229f,0.7205505f,0.8134229f,0.6655266f,0.7647272f,0.7205505f,0.7647272f,0.6655267f,0.8134229f,0.6519512f,0.8021786f,0.6519512f,0.7647272f,0.6655266f,0.8134229f,0.7205505f,0.7647272f,0.7245913f,0.8183608f,0.7205505f,0.8134229f,0.7206432f,0.8241143f,0.6655266f,0.8134229f,0.7205505f,0.8134229f,0.6655266f,0.8134229f,0.6591104f,0.8183608f,0.7356508f,0.7647272f,0.7245913f,0.8183608f,0.7205505f,0.7647272f,0.7206432f,0.8241143f,0.6656586f,0.8241143f,0.6655266f,0.8134229f,0.720601f,0.8348594f,0.6657009f,0.8348594f,0.6656586f,0.8241143f,0.7356508f,0.8021786f,0.7245913f,0.8183608f,0.7356508f,0.7647272f,0.720601f,0.8348594f,0.6656586f,0.8241143f,0.7206432f,0.8241143f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,4,4,3,3,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,7,17,16,18,17,19,18,11,19,10,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,11,28,19,29,27,30,28,31,29,32,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID456(GL2 gl){
double[] positionsArray = {
85.5400254,-496.9785231,152.4250885,109.173145,-505.5868207,152.4250885,85.5400254,-505.5868292,152.4250885,109.173145,-496.9785146,152.4250885,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 6, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID462(GL2 gl){
double[] positionsArray = {
117.0508294,-501.9627211,55.8002139,117.0508294,-501.9627381,90.0327865,117.0508294,-504.790305,90.0327865,117.0508294,-501.9627381,90.0327865,116.0870651,-504.790305,91.1088905,117.0508294,-504.790305,90.0327865,117.0508294,-501.9627211,55.8002139,117.0508294,-504.790305,90.0327865,117.0508199,-504.790305,55.8002182,97.3195144,-504.790305,91.108899,117.0508294,-504.790305,90.0327865,116.0870651,-504.790305,91.1088905,116.0870651,-501.9627381,91.1088905,116.0870651,-504.790305,91.1088905,117.0508294,-501.9627381,90.0327865,116.0870557,-504.790305,54.7241099,117.0508199,-504.790305,55.8002182,116.0870557,-501.9627211,54.7241099,117.0508294,-501.9627211,55.8002139,117.0508199,-504.790305,55.8002182,116.0870651,-504.790305,91.1088905,97.3195144,-501.9627381,91.1088905,97.3195144,-504.790305,91.108899,116.0870651,-501.9627381,91.1088905,97.3195144,-501.9627381,91.1088905,116.0870651,-504.790305,91.1088905,116.0870557,-501.9627211,54.7241099,117.0508199,-504.790305,55.8002182,116.0870557,-504.790305,54.7241099,97.3195144,-501.9627381,91.1088905,78.5519684,-504.790305,91.1088905,97.3195144,-504.790305,91.108899,97.3195144,-504.790305,91.108899,97.3195144,-504.790288,54.7241142,116.0870557,-504.790305,54.7241099,116.0870557,-501.9627211,54.7241099,116.0870557,-504.790305,54.7241099,97.3195144,-504.790288,54.7241142,78.5519684,-504.790305,91.1088905,77.5882089,-504.790305,90.0327865,78.5519684,-501.9627381,91.1088905,78.5519684,-504.790305,91.1088905,97.3195144,-504.790305,91.108899,78.5519779,-504.790305,54.7241099,97.3195144,-504.790288,54.7241142,116.0870557,-501.9627211,54.7241099,97.3195144,-504.790288,54.7241142,97.3195144,-501.9627381,54.7241099,77.5882042,-501.9627381,90.0327865,77.5882089,-504.790305,90.0327865,78.5519684,-504.790305,91.1088905,78.5519779,-504.790305,54.7241099,77.5882042,-501.9627381,90.0327865,78.5519684,-504.790305,91.1088905,78.5519684,-501.9627381,91.1088905,97.3195144,-504.790288,54.7241142,78.5519779,-504.790305,54.7241099,78.5519779,-501.9627211,54.7241099,97.3195144,-501.9627381,54.7241099,97.3195144,-504.790288,54.7241142,78.5519779,-501.9627211,54.7241099,77.5882089,-501.9627211,55.8002139,77.5882089,-504.790305,90.0327865,77.5882042,-501.9627381,90.0327865,77.5882136,-504.790305,55.8002182,78.5519779,-501.9627211,54.7241099,78.5519779,-504.790305,54.7241099,77.5882136,-504.790305,55.8002182,77.5882089,-501.9627211,55.8002139,77.5882136,-504.790305,55.8002182,77.5882089,-504.790305,90.0327865,77.5882089,-501.9627211,55.8002139,78.5519779,-501.9627211,54.7241099,77.5882136,-504.790305,55.8002182,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.9902005f,0.0183329f,0.9902006f,0.270319f,0.9839929f,0.2619666f,0.9902006f,0.270319f,0.9717675f,0.2693627f,0.9839929f,0.2619666f,0.9902005f,0.0183329f,0.9839929f,0.2619666f,0.9839927f,0.0266854f,0.8578526f,0.2693627f,0.9839929f,0.2619666f,0.9717675f,0.2693627f,0.9771072f,0.2782403f,0.9717675f,0.2693627f,0.9902006f,0.270319f,0.9839929f,0.2619666f,0.9717674f,0.0192893f,0.9839927f,0.0266854f,0.9771072f,0.0104117f,0.9902005f,0.0183329f,0.9839927f,0.0266854f,0.9717675f,0.2693627f,0.857686f,0.2782403f,0.8578526f,0.2693627f,0.8578526f,0.2693627f,0.9717674f,0.0192893f,0.9839929f,0.2619666f,0.9771075f,0.2782403f,0.8576863f,0.2782404f,0.9717678f,0.2693628f,0.9771072f,0.0104117f,0.9839927f,0.0266854f,0.9717674f,0.0192893f,0.857686f,0.2782403f,0.9717675f,0.2693627f,0.8578526f,0.2693627f,0.8578526f,0.2693627f,0.8578525f,0.0192893f,0.9717674f,0.0192893f,0.9771067f,0.0104117f,0.971767f,0.0192893f,0.8578521f,0.0192893f,0.8578526f,0.2693627f,0.9717675f,0.2693627f,0.9839929f,0.2619666f,0.8576863f,0.2782404f,0.9771075f,0.2782403f,0.9717678f,0.2693628f,0.8578526f,0.2693627f,0.9717674f,0.0192893f,0.8578525f,0.0192893f,0.9771072f,0.0104117f,0.8578525f,0.0192893f,0.8576859f,0.0104117f,0.9902006f,0.270319f,0.9839929f,0.2619666f,0.9717675f,0.2693627f,0.8578526f,0.2693627f,0.9839929f,0.2619666f,0.9717674f,0.0192893f,0.9902006f,0.270319f,0.9717675f,0.2693627f,0.9771072f,0.2782403f,0.8578521f,0.0192893f,0.971767f,0.0192893f,0.9771067f,0.0104117f,0.8576859f,0.0104117f,0.8578525f,0.0192893f,0.9771072f,0.0104117f,0.9902005f,0.0183329f,0.9839929f,0.2619666f,0.9902006f,0.270319f,0.9839929f,0.2619666f,0.9839927f,0.0266854f,0.9717674f,0.0192893f,0.9771072f,0.0104117f,0.9717674f,0.0192893f,0.9839927f,0.0266854f,0.9902005f,0.0183329f,0.9839927f,0.0266854f,0.9839929f,0.2619666f,0.9902005f,0.0183329f,0.9771072f,0.0104117f,0.9839927f,0.0266854f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,10,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,9,24,15,25,10,26,23,27,24,28,25,29,26,30,27,31,28,32,29,33,30,34,31,35,32,36,33,37,34,38,35,39,36,40,37,41,9,42,38,43,39,44,24,45,40,46,41,47,42,48,43,49,44,50,45,51,46,52,47,53,48,54,49,55,50,56,9,57,39,58,51,59,52,60,53,61,54,62,55,63,56,64,57,65,58,66,59,67,60,68,61,69,62,70,63,71,39,72,64,73,51,74,65,75,66,76,67,77,68,78,69,79,70,80,71,81,72,82,73,83,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID470(GL2 gl){
double[] positionsArray = {
122.2708833,-504.790288,64.3904619,143.8734537,-504.790288,63.3143494,142.9096895,-504.790288,64.3904534,142.9096895,-501.9627211,64.3904534,142.9096895,-504.790288,64.3904534,143.8734537,-504.790288,63.3143494,142.9096895,-504.790288,64.3904534,122.2708833,-501.9627211,64.3904619,122.2708833,-504.790288,64.3904619,121.307119,-504.790288,56.8627918,142.90968,-504.790288,55.7866835,142.9096895,-501.9627211,64.3904534,142.9096895,-501.9627211,64.3904534,143.8734537,-504.790288,63.3143494,143.8734537,-501.9627211,63.3143494,121.307119,-501.9627211,63.3143579,122.2708833,-504.790288,64.3904619,122.2708833,-501.9627211,64.3904619,122.2708833,-504.790288,55.7866878,143.8734537,-504.790288,56.8627875,121.307119,-504.790288,63.3143579,143.8734537,-501.9627211,63.3143494,143.8734537,-504.790288,63.3143494,143.8734537,-504.790288,56.8627875,121.307119,-501.9627211,63.3143579,121.307119,-504.790288,63.3143579,122.2708833,-504.790288,64.3904619,122.2708833,-501.9627211,55.7866878,122.2708833,-504.790288,55.7866878,121.307119,-504.790288,56.8627918,142.9096895,-501.9627211,55.7866835,142.90968,-504.790288,55.7866835,122.2708833,-504.790288,55.7866878,143.8734537,-501.9627211,56.8627875,143.8734537,-504.790288,56.8627875,142.90968,-504.790288,55.7866835,121.307119,-501.9627211,56.8627961,121.307119,-504.790288,56.8627918,121.307119,-504.790288,63.3143579,143.8734537,-501.9627211,56.8627875,121.307119,-501.9627211,63.3143579,142.9096895,-501.9627211,55.7866835,122.2708833,-504.790288,55.7866878,122.2708833,-501.9627211,55.7866878,121.307119,-501.9627211,56.8627961,122.2708833,-501.9627211,55.7866878,121.307119,-504.790288,56.8627918,142.9096895,-501.9627211,55.7866835,143.8734537,-501.9627211,56.8627875,142.90968,-504.790288,55.7866835,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.8289229f,0.1390706f,0.713716f,0.1305183f,0.7188558f,0.1390706f,0.7111511f,0.1438572f,0.7188558f,0.1390706f,0.713716f,0.1305183f,0.7188561f,0.1390707f,0.836628f,0.1438572f,0.8289233f,0.1390707f,0.713716f,0.1305182f,0.8340626f,0.093743f,0.7188558f,0.0851906f,0.8289229f,0.1390706f,0.7111505f,0.1438571f,0.836627f,0.143857f,0.7188552f,0.1390705f,0.7111511f,0.1438572f,0.713716f,0.1305183f,0.7052917f,0.1341075f,0.8424869f,0.1341074f,0.8289229f,0.1390706f,0.8366277f,0.1438571f,0.8340626f,0.093743f,0.8289229f,0.0851906f,0.7188558f,0.0851906f,0.713716f,0.1305183f,0.7188558f,0.0851906f,0.713716f,0.093743f,0.8289229f,0.1390706f,0.8340626f,0.1305182f,0.8340626f,0.093743f,0.7052917f,0.1341075f,0.713716f,0.1305183f,0.713716f,0.093743f,0.8424869f,0.1341074f,0.8340626f,0.1305182f,0.8289229f,0.1390706f,0.8366277f,0.0804041f,0.8289229f,0.0851906f,0.8340626f,0.093743f,0.7111517f,0.0804042f,0.7188564f,0.0851907f,0.8289236f,0.0851906f,0.7052917f,0.0901538f,0.713716f,0.093743f,0.7188558f,0.0851906f,0.8424869f,0.0901538f,0.8340626f,0.093743f,0.8340626f,0.1305182f,0.7052917f,0.1341075f,0.713716f,0.093743f,0.7052917f,0.0901538f,0.8424869f,0.0901538f,0.8340626f,0.1305182f,0.8424869f,0.1341074f,0.7111508f,0.0804041f,0.8289226f,0.0851905f,0.8366273f,0.080404f,0.8424869f,0.0901538f,0.8366277f,0.0804041f,0.8340626f,0.093743f,0.7111511f,0.0804041f,0.7052917f,0.0901538f,0.7188558f,0.0851906f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,1,9,9,10,10,11,9,10,1,9,0,12,11,13,7,14,6,15,12,16,13,17,14,18,15,19,16,20,17,21,9,22,18,23,10,24,1,25,10,26,19,27,0,28,20,29,9,30,21,31,22,32,23,33,24,34,25,35,26,36,27,37,28,38,29,39,30,40,31,41,32,42,33,43,34,44,35,45,36,46,37,47,38,48,21,49,23,50,39,51,36,52,38,53,40,54,41,55,42,56,43,57,44,58,45,59,46,60,47,61,48,62,49,63,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID478(GL2 gl){
double[] positionsArray = {
122.2708927,-504.790305,76.1271967,143.8734632,-504.790305,75.0510927,142.9096989,-504.790305,76.1271967,142.9096989,-501.9627381,76.1271967,142.9096989,-504.790305,76.1271967,143.8734632,-504.790305,75.0510927,142.9096989,-504.790305,76.1271967,122.2708927,-501.9627381,76.1271967,122.2708927,-504.790305,76.1271967,121.307119,-504.790305,68.5995351,142.9096895,-504.790305,67.5234226,142.9096989,-501.9627381,76.1271967,142.9096989,-501.9627381,76.1271967,143.8734632,-504.790305,75.0510927,143.8734632,-501.9627381,75.0510927,121.307119,-501.9627381,75.0510927,122.2708927,-504.790305,76.1271967,122.2708927,-501.9627381,76.1271967,122.2708927,-504.790305,67.5234311,143.8734632,-504.790305,68.5995351,121.3071285,-504.790305,75.0510927,143.8734632,-501.9627381,75.0510927,143.8734632,-504.790305,75.0510927,143.8734632,-504.790305,68.5995351,121.307119,-501.9627381,75.0510927,121.3071285,-504.790305,75.0510927,122.2708927,-504.790305,76.1271967,122.2708833,-501.9627381,67.5234311,122.2708927,-504.790305,67.5234311,121.307119,-504.790305,68.5995351,142.9096895,-501.9627381,67.5234226,142.9096895,-504.790305,67.5234226,122.2708927,-504.790305,67.5234311,143.8734632,-501.9627381,68.5995351,143.8734632,-504.790305,68.5995351,142.9096895,-504.790305,67.5234226,121.307119,-501.9627381,68.5995351,121.307119,-504.790305,68.5995351,121.3071285,-504.790305,75.0510927,143.8734632,-501.9627381,68.5995351,121.307119,-501.9627381,68.5995351,121.3071285,-504.790305,75.0510927,121.307119,-501.9627381,75.0510927,142.9096895,-501.9627381,67.5234226,122.2708927,-504.790305,67.5234311,122.2708833,-501.9627381,67.5234311,121.307119,-501.9627381,68.5995351,122.2708833,-501.9627381,67.5234311,121.307119,-504.790305,68.5995351,142.9096895,-501.9627381,67.5234226,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.8289229f,0.0682846f,0.713716f,0.0597323f,0.7188558f,0.0682847f,0.7111511f,0.0730712f,0.7188558f,0.0682847f,0.713716f,0.0597323f,0.7188561f,0.0682847f,0.836628f,0.0730712f,0.8289233f,0.0682847f,0.713716f,0.0597323f,0.8340628f,0.022957f,0.7188558f,0.0144046f,0.7111505f,0.0730711f,0.836627f,0.0730711f,0.7188552f,0.0682846f,0.7111511f,0.0730712f,0.713716f,0.0597323f,0.7052917f,0.0633215f,0.8424869f,0.0633214f,0.8289229f,0.0682846f,0.8366277f,0.0730711f,0.8340626f,0.022957f,0.8289229f,0.0144046f,0.7188558f,0.0144046f,0.713716f,0.0597323f,0.7188558f,0.0144046f,0.713716f,0.022957f,0.8289229f,0.0682846f,0.8340626f,0.0597322f,0.8340626f,0.022957f,0.7052917f,0.0633215f,0.713716f,0.0597323f,0.713716f,0.022957f,0.8424869f,0.0633214f,0.8340626f,0.0597322f,0.8289229f,0.0682846f,0.8366277f,0.0096181f,0.8289229f,0.0144046f,0.8340626f,0.022957f,0.7111517f,0.0096181f,0.7188564f,0.0144046f,0.8289236f,0.0144046f,0.7052917f,0.0193679f,0.713716f,0.022957f,0.7188558f,0.0144046f,0.8424869f,0.0193678f,0.8340626f,0.022957f,0.8340626f,0.0597322f,0.7052917f,0.0633215f,0.713716f,0.022957f,0.7052917f,0.0193679f,0.8424869f,0.0193678f,0.8340626f,0.0597322f,0.8424869f,0.0633214f,0.7111508f,0.0096181f,0.8289226f,0.0144046f,0.8366273f,0.0096181f,0.8424869f,0.0193678f,0.8366277f,0.0096181f,0.8340626f,0.022957f,0.7111511f,0.0096181f,0.7052917f,0.0193679f,0.7188558f,0.0144046f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,1,9,9,10,10,11,9,10,1,9,0,8,11,12,7,13,6,14,12,15,13,16,14,17,15,18,16,19,17,20,9,21,18,22,10,23,1,24,10,25,19,26,0,27,20,28,9,29,21,30,22,31,23,32,24,33,25,34,26,35,27,36,28,37,29,38,30,39,31,40,32,41,33,42,34,43,35,44,36,45,37,46,38,47,21,48,23,49,39,50,40,51,41,52,42,53,43,54,44,55,45,56,46,57,47,58,48,59,49,60,33,61,35,62,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID486(GL2 gl){
double[] positionsArray = {
135.2402597,-504.790288,90.6949408,143.8734632,-504.790305,89.6188368,142.9096989,-504.790305,90.6949408,142.9096989,-501.9627211,90.6949408,142.9096989,-504.790305,90.6949408,143.8734632,-504.790305,89.6188368,142.9096989,-504.790305,90.6949408,135.2402691,-501.9627381,90.6949408,135.2402597,-504.790288,90.6949408,143.8734632,-504.790305,89.6188368,134.2764954,-504.790288,83.1672707,142.9096989,-504.790305,82.0911667,135.2402597,-504.790288,90.6949408,142.9096989,-501.9627211,90.6949408,142.9096989,-501.9627211,90.6949408,143.8734632,-504.790305,89.6188368,143.8734632,-501.9627211,89.6188368,134.2764954,-501.9627381,89.6188368,135.2402597,-504.790288,90.6949408,135.2402691,-501.9627381,90.6949408,134.2764954,-504.790288,83.1672707,135.2402597,-504.790288,82.0911752,142.9096989,-504.790305,82.0911667,143.8734632,-504.790305,89.6188368,142.9096989,-504.790305,82.0911667,143.8734632,-504.790305,83.1672707,135.2402597,-504.790288,90.6949408,134.2764954,-504.790288,89.6188368,134.2764954,-504.790288,83.1672707,143.8734632,-501.9627211,89.6188368,143.8734632,-504.790305,89.6188368,143.8734632,-504.790305,83.1672707,134.2764954,-501.9627381,89.6188368,134.2764954,-504.790288,89.6188368,135.2402597,-504.790288,90.6949408,135.2402597,-501.9627381,82.0911752,135.2402597,-504.790288,82.0911752,134.2764954,-504.790288,83.1672707,142.9096989,-501.9627381,82.0911667,142.9096989,-504.790305,82.0911667,135.2402597,-504.790288,82.0911752,143.8734632,-501.9627211,83.1672707,143.8734632,-504.790305,83.1672707,142.9096989,-504.790305,82.0911667,134.2764954,-501.9627381,83.1672707,134.2764954,-504.790288,83.1672707,134.2764954,-504.790288,89.6188368,143.8734632,-501.9627211,83.1672707,134.2764954,-501.9627381,89.6188368,135.2402597,-501.9627381,82.0911752,134.2764954,-501.9627381,83.1672707,135.2402597,-501.9627381,82.0911752,134.2764954,-504.790288,83.1672707,143.8734632,-501.9627211,83.1672707,142.9096989,-504.790305,82.0911667,142.9096989,-501.9627381,82.0911667,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.8255625f,0.2073212f,0.7799242f,0.1987689f,0.785064f,0.2073212f,0.7773593f,0.2121077f,0.785064f,0.2073212f,0.7799242f,0.1987689f,0.785064f,0.2073212f,0.8332673f,0.2121077f,0.8255625f,0.2073212f,0.7799243f,0.1987689f,0.8307022f,0.1619935f,0.785064f,0.1534412f,0.8255625f,0.2073212f,0.7773586f,0.2121075f,0.8332665f,0.2121075f,0.7850633f,0.207321f,0.7773593f,0.2121077f,0.7799242f,0.1987689f,0.7714999f,0.202358f,0.8391265f,0.2023579f,0.8255625f,0.2073212f,0.8332673f,0.2121077f,0.8307023f,0.1619935f,0.8255626f,0.1534411f,0.7850641f,0.1534412f,0.7799242f,0.1987689f,0.785064f,0.1534412f,0.7799242f,0.1619936f,0.8255625f,0.2073212f,0.8307022f,0.1987688f,0.8307022f,0.1619935f,0.7714999f,0.202358f,0.7799242f,0.1987689f,0.7799242f,0.1619936f,0.8391265f,0.2023579f,0.8307022f,0.1987688f,0.8255625f,0.2073212f,0.8332673f,0.1486546f,0.8255625f,0.1534411f,0.8307022f,0.1619935f,0.7773593f,0.1486547f,0.785064f,0.1534412f,0.8255625f,0.1534411f,0.7714999f,0.1584044f,0.7799242f,0.1619936f,0.785064f,0.1534412f,0.8391265f,0.1584044f,0.8307022f,0.1619935f,0.8307022f,0.1987688f,0.7714999f,0.202358f,0.7799242f,0.1619936f,0.7714999f,0.1584044f,0.8391265f,0.1584044f,0.8307022f,0.1987688f,0.8391265f,0.2023579f,0.7773586f,0.1486545f,0.8255618f,0.153441f,0.8332666f,0.1486545f,0.8391265f,0.1584044f,0.8332673f,0.1486546f,0.8307022f,0.1619935f,0.7714999f,0.1584044f,0.785064f,0.1534412f,0.7773593f,0.1486547f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,10,10,9,9,12,12,13,13,7,14,6,15,14,16,15,17,16,18,17,19,18,20,19,21,20,22,21,23,22,24,23,25,24,26,25,27,26,28,27,29,28,30,29,31,30,32,31,33,32,34,33,35,34,36,35,37,36,38,37,39,38,40,39,41,40,42,41,43,42,44,43,45,44,46,45,47,46,48,29,49,31,50,47,51,44,52,46,53,48,54,38,55,40,56,49,57,50,58,51,59,52,60,53,61,54,62,55,63,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID494(GL2 gl){
double[] positionsArray = {
153.6688479,-306.5488203,93.0801541,164.6324396,-305.6579985,88.1960518,165.6753304,-306.5488203,90.7753482,164.6324396,-305.6579985,88.1960518,166.7182212,-305.6579985,93.3546531,165.6753304,-306.5488203,90.7753482,166.7182117,-298.1108061,93.3546531,164.6324396,-298.1108061,88.1960518,165.6753304,-297.2199844,90.7753482,153.9346148,-305.6579985,95.8145433,153.6688479,-306.5488203,93.0801541,165.6753304,-306.5488203,90.7753482,153.6688479,-306.5488203,93.0801541,153.4031,-305.6579985,90.3457649,164.6324396,-305.6579985,88.1960518,166.7182117,-298.1108061,93.3546531,165.6753304,-297.2199844,90.7753482,153.6688479,-297.2199844,93.0801541,166.7182117,-298.1108061,93.3546531,167.3627644,-300.4430279,94.9487435,166.7182212,-305.6579985,93.3546531,153.9346148,-305.6579985,95.8145433,165.6753304,-306.5488203,90.7753482,166.7182212,-305.6579985,93.3546531,164.6324396,-298.1108061,88.1960518,164.6324396,-305.6579985,88.1960518,163.9878963,-303.3257938,86.601953,165.6753304,-297.2199844,90.7753482,164.6324396,-298.1108061,88.1960518,153.4031,-298.1108061,90.3457649,148.9240358,-305.6579985,95.8249912,148.9240358,-306.5488203,93.0801541,164.6324396,-305.6579985,88.1960518,153.4031,-305.6579985,90.3457649,163.9878963,-303.3257938,86.601953,153.6688479,-297.2199844,93.0801541,165.6753304,-297.2199844,90.7753482,153.4031,-298.1108061,90.3457649,153.9346148,-298.1108061,95.8145433,166.7182117,-298.1108061,93.3546531,153.6688479,-297.2199844,93.0801541,167.3627644,-300.4430279,94.9487435,166.7182117,-298.1108061,93.3546531,153.9346148,-298.1108061,95.8145433,167.3627644,-300.4430279,94.9487435,167.3627644,-303.3257938,94.9487435,166.7182212,-305.6579985,93.3546531,166.7182212,-305.6579985,93.3546531,154.0988556,-303.3257938,97.5044873,153.9346148,-305.6579985,95.8145433,164.6324396,-298.1108061,88.1960518,163.9878963,-303.3257938,86.601953,163.9878963,-300.4430279,86.601953,164.6324396,-298.1108061,88.1960518,153.2388498,-300.4430279,88.6558209,153.4031,-298.1108061,90.3457649,148.9240358,-303.3257938,97.5213896,148.9240358,-305.6579985,95.8249912,148.9240358,-306.5488203,93.0801541,148.9240358,-305.6579985,90.3353255,163.9878963,-303.3257938,86.601953,153.4031,-305.6579985,90.3457649,153.2388498,-303.3257938,88.6558209,148.9240358,-298.1108061,90.3353255,148.9240358,-297.2199844,93.0801541,167.3627644,-300.4430279,94.9487435,153.9346148,-298.1108061,95.8145433,154.0988556,-300.4430279,97.5044873,167.3627644,-303.3257938,94.9487435,154.0988556,-300.4430279,97.5044873,154.0988556,-303.3257938,97.5044873,167.3627644,-300.4430279,94.9487435,167.3627644,-303.3257938,94.9487435,154.0988556,-303.3257938,97.5044873,166.7182212,-305.6579985,93.3546531,153.2388498,-300.4430279,88.6558209,163.9878963,-303.3257938,86.601953,153.2388498,-303.3257938,88.6558209,163.9878963,-300.4430279,86.601953,164.6324396,-298.1108061,88.1960518,163.9878963,-300.4430279,86.601953,153.2388498,-300.4430279,88.6558209,148.9240358,-300.4430279,88.6389271,148.9240358,-305.6579985,90.3353255,148.9240358,-298.1108061,90.3353255,148.9240358,-297.2199844,93.0801541,148.9240358,-298.1108061,95.8249912,148.9240358,-298.1108061,95.8249912,148.9240358,-300.4430279,97.5213896,148.9240358,-303.3257938,97.5213896,148.9240358,-300.4430279,88.6389271,148.9240358,-303.3257938,88.6389271,148.9240358,-303.3257938,88.6389271,148.9240358,-300.4430279,97.5213896,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.6168717f,0.0396876f,0.6864018f,0.0496391f,0.6864018f,0.0396876f,0.5522469f,0.0141416f,0.5522469f,0.0333827f,0.549121f,0.0237621f,0.5787301f,0.0333827f,0.5787301f,0.0141416f,0.581856f,0.0237621f,0.6168717f,0.0297363f,0.6168717f,0.0396876f,0.6864018f,0.0396876f,0.6168717f,0.0396876f,0.6168717f,0.0496391f,0.6864018f,0.0496391f,0.6864018f,0.0993962f,0.6864018f,0.0894449f,0.6168717f,0.0894449f,0.5787302f,0.0333817f,0.5705464f,0.0393276f,0.552247f,0.0333817f,0.6168717f,0.0297363f,0.6864018f,0.0396876f,0.6864018f,0.0297363f,0.5787302f,0.0141406f,0.552247f,0.0141406f,0.5604308f,0.0081947f,0.6864018f,0.0894449f,0.6864018f,0.0794934f,0.6168717f,0.0794934f,0.5868875f,0.0297363f,0.6168717f,0.0396876f,0.6168717f,0.0297363f,0.5868875f,0.0396876f,0.6168717f,0.0496391f,0.6168717f,0.0396876f,0.6864018f,0.0496391f,0.6168717f,0.0496391f,0.6864018f,0.0595906f,0.6168717f,0.0894449f,0.6864018f,0.0894449f,0.6168717f,0.0794934f,0.6168717f,0.0993962f,0.6864018f,0.0993962f,0.6168717f,0.0894449f,0.6864018f,0.1093477f,0.6864018f,0.0993962f,0.6168717f,0.0993962f,0.5705464f,0.0393276f,0.5604308f,0.0393276f,0.552247f,0.0333817f,0.6864018f,0.0297363f,0.6168717f,0.0197848f,0.6168717f,0.0297363f,0.5787302f,0.0141406f,0.5604308f,0.0081947f,0.5705464f,0.0081947f,0.6864018f,0.0794934f,0.6168717f,0.0695419f,0.6168717f,0.0794934f,0.6168717f,0.0297363f,0.5868875f,0.0197848f,0.5868875f,0.0297363f,0.5868875f,0.0297363f,0.5868875f,0.0396876f,0.6168717f,0.0396876f,0.5868875f,0.0396876f,0.5868875f,0.0496391f,0.6168717f,0.0496391f,0.6864018f,0.0595906f,0.6168717f,0.0496391f,0.6168717f,0.0595906f,0.6168717f,0.0894449f,0.6168717f,0.0794934f,0.5868875f,0.0794934f,0.6168717f,0.0993962f,0.6168717f,0.0894449f,0.5868875f,0.0894449f,0.6864018f,0.1093477f,0.6168717f,0.0993962f,0.6168717f,0.1093477f,0.6864018f,0.0197848f,0.6168717f,0.0098333f,0.6168717f,0.0197848f,0.6864018f,0.0098333f,0.6864018f,0.0197848f,0.6168717f,0.0197848f,0.6864018f,0.0297363f,0.6168717f,0.0197848f,0.5868875f,0.0197848f,0.6168717f,0.0297363f,0.6168717f,0.0695419f,0.6864018f,0.0595906f,0.6168717f,0.0595906f,0.6864018f,0.0695419f,0.6864018f,0.0794934f,0.6864018f,0.0695419f,0.6168717f,0.0695419f,0.6168717f,0.0794934f,0.6168717f,0.0695419f,0.5868875f,0.0695419f,0.6168717f,0.0496391f,0.5868875f,0.0496391f,0.6168717f,0.0595906f,0.6168717f,0.0794934f,0.5868875f,0.0695419f,0.5868875f,0.0794934f,0.6168717f,0.0894449f,0.5868875f,0.0794934f,0.5868875f,0.0894449f,0.5868875f,0.0993962f,0.6168717f,0.0993962f,0.5868875f,0.0894449f,0.6168717f,0.1093477f,0.6168717f,0.0993962f,0.5868875f,0.0993962f,0.6168717f,0.0197848f,0.5868875f,0.0098333f,0.5868875f,0.0197848f,0.6168717f,0.0098333f,0.5868875f,0.0695419f,0.6168717f,0.0595906f,0.5868875f,0.0595906f,0.6168717f,0.0695419f,0.6168717f,0.0595906f,0.5868875f,0.0496391f,0.5868875f,0.0595906f,0.6168717f,0.1093477f,0.5868875f,0.0993962f,0.5868875f,0.1093477f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,4,4,3,3,6,6,6,6,3,3,7,7,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,10,31,9,32,31,33,13,34,12,35,32,36,33,37,34,38,35,39,36,40,37,41,38,42,39,43,40,44,41,45,42,46,43,47,44,48,45,49,46,50,47,51,48,52,49,53,50,54,51,55,52,56,53,57,54,58,55,59,49,60,56,61,57,62,30,63,58,64,10,65,31,66,59,67,13,68,60,69,61,70,62,71,35,72,37,73,63,74,38,75,40,76,64,77,65,78,66,79,67,80,68,81,69,82,70,83,69,82,68,81,71,84,72,85,73,86,74,87,48,88,56,89,49,90,75,91,76,92,77,93,76,92,75,91,78,94,79,95,80,96,81,97,55,98,54,99,82,100,61,101,83,102,62,103,55,104,82,105,84,106,35,107,63,108,85,109,86,110,38,111,64,112,67,113,66,114,87,115,70,116,88,117,89,118,88,117,70,116,69,119,90,120,77,121,91,122,77,121,90,120,75,123,62,124,83,125,92,126,67,127,87,128,93,129,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID502(GL2 gl){
double[] positionsArray = {
148.8792652,-291.4709187,71.7522422,163.2479756,-291.4709187,71.7522337,148.8792652,-290.3549632,67.5826106,163.2479756,-294.5198089,74.8046167,163.2479756,-291.4709187,71.7522337,148.8792652,-291.4709187,71.7522422,163.2479756,-291.4709187,71.7522337,163.2479756,-290.3549632,67.5826106,148.8792652,-290.3549632,67.5826106,163.2479756,-291.4709187,71.7522337,163.2479756,-294.5198089,74.8046167,163.2479661,-305.8983396,71.7522337,163.2479756,-294.5198089,74.8046167,148.8792652,-291.4709187,71.7522422,148.8792652,-294.5197919,74.8046167,163.2479756,-290.3549632,67.5826106,163.2479756,-291.4709187,71.7522337,163.2479661,-307.0143121,67.5826021,163.2479756,-290.3549632,67.5826106,148.8792558,-291.4709187,63.412979,148.8792652,-290.3549632,67.5826106,163.2479756,-291.4709187,71.7522337,163.2479661,-305.8983396,71.7522337,163.2479661,-307.0143121,67.5826021,163.2479756,-294.5198089,74.8046167,163.2479661,-302.8494663,74.8046167,163.2479661,-305.8983396,71.7522337,163.2479756,-298.6846376,75.9218653,148.8792652,-294.5197919,74.8046167,148.8792652,-298.6846206,75.9218653,163.2479756,-294.5198089,74.8046167,163.2479756,-290.3549632,67.5826106,163.2479661,-307.0143121,67.5826021,163.2479566,-305.8983396,63.412979,163.2479756,-291.4709187,63.412979,163.2479661,-305.8983396,71.7522337,148.8792558,-307.014295,67.5826106,163.2479661,-307.0143121,67.5826021,148.8792558,-305.8983226,71.7522422,163.2479756,-294.5198089,74.8046167,163.2479756,-298.6846376,75.9218653,163.2479661,-302.8494663,74.8046167,148.8792558,-302.8494663,74.8046167,163.2479661,-305.8983396,71.7522337,163.2479661,-302.8494663,74.8046167,163.2479756,-298.6846376,75.9218653,148.8792652,-298.6846206,75.9218653,163.2479661,-302.8494663,74.8046167,148.8792558,-307.014295,67.5826106,163.2479566,-305.8983396,63.412979,163.2479661,-307.0143121,67.5826021,163.2479756,-290.3549632,67.5826106,163.2479566,-305.8983396,63.412979,163.2479756,-291.4709187,63.412979,163.2479756,-291.4709187,63.412979,148.8792558,-294.5197919,60.3606045,148.8792558,-291.4709187,63.412979,148.8792558,-302.8494663,74.8046167,148.8792558,-305.8983226,71.7522422,163.2479661,-305.8983396,71.7522337,163.2479661,-302.8494663,74.8046167,148.8792652,-298.6846206,75.9218653,148.8792558,-302.8494663,74.8046167,148.8792558,-307.014295,67.5826106,148.8792558,-305.8983226,63.412979,163.2479566,-305.8983396,63.412979,163.2479756,-291.4709187,63.412979,163.2479566,-305.8983396,63.412979,163.2479661,-302.8494663,60.360596,163.2479756,-291.4709187,63.412979,163.2479661,-294.5198089,60.3606045,148.8792558,-294.5197919,60.3606045,148.8792558,-305.8983226,63.412979,163.2479661,-302.8494663,60.360596,163.2479566,-305.8983396,63.412979,163.2479756,-291.4709187,63.412979,163.2479661,-302.8494663,60.360596,163.2479661,-294.5198089,60.3606045,163.2479661,-294.5198089,60.3606045,148.8792558,-298.6846206,59.2433559,148.8792558,-294.5197919,60.3606045,148.8792558,-305.8983226,63.412979,148.8792558,-302.8494663,60.3606045,163.2479661,-302.8494663,60.360596,163.2479661,-294.5198089,60.3606045,163.2479661,-302.8494663,60.360596,163.2479661,-298.6846206,59.2433474,163.2479661,-294.5198089,60.3606045,163.2479661,-298.6846206,59.2433474,148.8792558,-298.6846206,59.2433559,148.8792558,-298.6846206,59.2433559,163.2479661,-302.8494663,60.360596,148.8792558,-302.8494663,60.3606045,163.2479661,-298.6846206,59.2433474,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.6864154f,0.175586f,0.5865513f,0.175586f,0.6864154f,0.1839081f,0.5865513f,0.167264f,0.5865513f,0.175586f,0.6864154f,0.175586f,0.5865513f,0.175586f,0.5865513f,0.1839081f,0.6864154f,0.1839081f,0.5475088f,0.1876046f,0.5544316f,0.1945275f,0.5802681f,0.1876046f,0.5865513f,0.167264f,0.6864154f,0.175586f,0.6864154f,0.167264f,0.5449748f,0.1781478f,0.5475088f,0.1876046f,0.5828022f,0.1781478f,0.5865513f,0.1839081f,0.6864154f,0.19223f,0.6864154f,0.1839081f,0.5475088f,0.1876046f,0.5802681f,0.1876046f,0.5828022f,0.1781478f,0.5544316f,0.1945275f,0.5733453f,0.1945275f,0.5802681f,0.1876046f,0.5865513f,0.1589646f,0.6864154f,0.167264f,0.6864154f,0.1589646f,0.5865513f,0.167264f,0.5449748f,0.1781478f,0.5828022f,0.1781478f,0.5802681f,0.1686909f,0.5865513f,0.1839081f,0.5865513f,0.19223f,0.6864154f,0.19223f,0.5865513f,0.1423432f,0.6864154f,0.1340212f,0.5865513f,0.1340212f,0.6864154f,0.1423432f,0.5544316f,0.1945275f,0.5638884f,0.1970614f,0.5733453f,0.1945275f,0.6864154f,0.1506651f,0.5865513f,0.1423432f,0.5865513f,0.1506651f,0.5865513f,0.1589646f,0.6864154f,0.1589646f,0.5865513f,0.1506651f,0.6864154f,0.1340212f,0.5865513f,0.1256991f,0.5865513f,0.1340212f,0.5449748f,0.1781478f,0.5802681f,0.1686909f,0.5475088f,0.1686909f,0.5865513f,0.19223f,0.6864154f,0.200552f,0.6864154f,0.19223f,0.6864154f,0.1506651f,0.6864154f,0.1423432f,0.5865513f,0.1423432f,0.5865513f,0.1506651f,0.6864154f,0.1589646f,0.6864154f,0.1506651f,0.6864154f,0.1340212f,0.6864154f,0.1256991f,0.5865513f,0.1256991f,0.5475088f,0.1686909f,0.5802681f,0.1686909f,0.5733453f,0.161768f,0.5865513f,0.19223f,0.5865513f,0.200552f,0.6864154f,0.200552f,0.6864154f,0.1256991f,0.5865513f,0.1173772f,0.5865513f,0.1256991f,0.5475088f,0.1686909f,0.5733453f,0.161768f,0.5544316f,0.161768f,0.5865513f,0.200552f,0.6864154f,0.2088741f,0.6864154f,0.200552f,0.6864154f,0.1256991f,0.6864154f,0.1173772f,0.5865513f,0.1173772f,0.5733453f,0.161768f,0.5638884f,0.1592342f,0.5865513f,0.200552f,0.5865513f,0.2088741f,0.6864154f,0.2088741f,0.6864154f,0.2088741f,0.5865513f,0.2171961f,0.6864154f,0.2171961f,0.5865513f,0.2088741f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,28,28,27,27,30,30,31,31,32,32,33,33,18,34,34,35,19,36,35,37,36,38,37,39,36,38,35,37,38,40,39,41,40,42,41,43,42,44,43,45,44,46,45,47,46,48,47,49,48,50,49,51,50,52,51,53,52,54,53,55,54,56,55,57,56,58,57,59,58,60,59,61,60,62,61,63,62,64,63,65,64,66,65,67,66,68,67,69,68,70,69,71,70,72,71,73,72,74,73,75,74,76,75,77,76,78,77,79,78,80,79,81,80,82,81,83,82,84,83,85,84,79,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,91,92,90,91,93,94,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID510(GL2 gl){
double[] positionsArray = {
163.0586678,-235.1794499,155.1242851,157.1413921,-256.4290765,155.1242851,157.1413827,-235.1794499,155.1242851,163.0586772,-256.4290765,155.1242851,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 6, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID516(GL2 gl){
double[] positionsArray = {
25.0596284,-249.1975476,131.0548058,25.0596237,-252.0039194,108.8371925,25.0596284,-252.0039194,131.0548143,25.0596284,-252.0039194,131.0548143,25.0596237,-252.0039194,108.8371925,28.3385467,-252.0039194,108.8371925,25.0596237,-249.1975476,108.8371925,25.0596237,-252.0039194,108.8371925,25.0596284,-249.1975476,131.0548058,28.3385514,-252.0039194,131.0548058,25.0596284,-249.1975476,131.0548058,28.338542,-249.1975476,108.8371925,25.0596237,-249.1975476,108.8371925,28.3385467,-249.1975476,131.0548058,28.3385467,-249.1975476,131.0548058,28.3385514,-252.0039194,131.0548058,28.3385467,-252.0039194,108.8371925,28.338542,-249.1975476,108.8371925,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.966621f,0.5257632f,0.9628023f,0.4641285f,0.9628023f,0.5257789f,0.9628023f,0.5257789f,0.9628023f,0.4641285f,0.9607593f,0.4641285f,0.966621f,0.4641128f,0.9628023f,0.4641285f,0.966621f,0.5257632f,0.9628023f,0.5257789f,0.9607593f,0.4641285f,0.9607593f,0.5257789f,0.966621f,0.5257632f,0.9686641f,0.4641128f,0.966621f,0.4641128f,0.9686641f,0.5257632f,0.9752413f,0.5257632f,0.9706455f,0.5257789f,0.9706455f,0.4641285f,0.9752413f,0.5257632f,0.9706455f,0.4641285f,0.9752413f,0.4641128f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,3,9,5,10,9,11,10,12,11,13,12,14,11,13,10,12,13,15,14,16,15,17,16,18,14,19,16,20,17,21,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID524(GL2 gl){
double[] positionsArray = {
73.3319098,-504.790305,68.5995351,51.7293394,-504.790305,67.5234226,72.3681456,-504.790305,67.5234311,72.3681456,-504.790305,67.5234311,51.7293394,-504.790305,67.5234226,51.7293394,-501.9627381,67.5234226,72.3681456,-501.9627381,67.5234311,73.3319098,-504.790305,68.5995351,72.3681456,-504.790305,67.5234311,50.7655704,-504.790305,75.0510927,72.3681456,-504.790305,76.1271967,50.7655704,-501.9627381,68.5995351,51.7293394,-501.9627381,67.5234226,51.7293394,-504.790305,67.5234226,72.3681456,-501.9627381,67.5234311,72.3681456,-501.9627381,67.5234311,73.3319098,-501.9627381,68.5995351,73.3319098,-504.790305,68.5995351,73.3319098,-504.790305,75.0510927,51.7293347,-504.790305,76.1271967,50.7655704,-504.790305,68.5995351,50.7655704,-501.9627381,68.5995351,51.7293394,-504.790305,67.5234226,50.7655704,-504.790305,68.5995351,73.3319098,-501.9627381,68.5995351,73.3319098,-504.790305,75.0510927,73.3319098,-504.790305,68.5995351,73.3319098,-501.9627381,75.0510927,72.3681456,-504.790305,76.1271967,73.3319098,-504.790305,75.0510927,72.3681456,-501.9627381,76.1271967,51.7293347,-504.790305,76.1271967,72.3681456,-504.790305,76.1271967,51.7293347,-501.9627381,76.1271967,50.7655704,-504.790305,75.0510927,51.7293347,-504.790305,76.1271967,50.7655704,-501.9627381,75.0510927,50.7655704,-504.790305,68.5995351,50.7655704,-504.790305,75.0510927,50.7655704,-501.9627381,68.5995351,73.3319098,-501.9627381,75.0510927,72.3681456,-501.9627381,76.1271967,72.3681456,-504.790305,76.1271967,73.3319098,-501.9627381,75.0510927,51.7293347,-501.9627381,76.1271967,50.7655704,-501.9627381,75.0510927,50.7655704,-504.790305,75.0510927,51.7293347,-501.9627381,76.1271967,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.8340626f,0.022957f,0.7188558f,0.0144046f,0.8289229f,0.0144046f,0.8289236f,0.0144046f,0.7188564f,0.0144046f,0.7111517f,0.0096181f,0.8366277f,0.0096181f,0.8340626f,0.022957f,0.8289229f,0.0144046f,0.8340627f,0.022957f,0.713716f,0.0597323f,0.7188558f,0.0144046f,0.8289229f,0.0682846f,0.7052917f,0.0193679f,0.7111511f,0.0096181f,0.7188558f,0.0144046f,0.8366273f,0.0096181f,0.8289226f,0.0144046f,0.7111508f,0.0096181f,0.8366277f,0.0096181f,0.8424869f,0.0193678f,0.8340626f,0.022957f,0.8289229f,0.0682846f,0.8340626f,0.022957f,0.8340626f,0.0597322f,0.7188558f,0.0682847f,0.713716f,0.0597323f,0.8289229f,0.0682846f,0.713716f,0.0597323f,0.713716f,0.022957f,0.7188558f,0.0144046f,0.7052917f,0.0193679f,0.7188558f,0.0144046f,0.713716f,0.022957f,0.8424869f,0.0193678f,0.8340626f,0.0597322f,0.8340626f,0.022957f,0.8424869f,0.0633214f,0.8289229f,0.0682846f,0.8340626f,0.0597322f,0.836628f,0.0730712f,0.7188561f,0.0682847f,0.8289233f,0.0682847f,0.7111511f,0.0730712f,0.713716f,0.0597323f,0.7188558f,0.0682847f,0.7052917f,0.0633215f,0.713716f,0.022957f,0.713716f,0.0597323f,0.7052917f,0.0193679f,0.713716f,0.022957f,0.7052917f,0.0633215f,0.8424869f,0.0633214f,0.8340626f,0.0597322f,0.8424869f,0.0193678f,0.8366277f,0.0730711f,0.8289229f,0.0682846f,0.8424869f,0.0633214f,0.836627f,0.0730711f,0.7111505f,0.0730711f,0.7188552f,0.0682846f,0.7052917f,0.0633215f,0.713716f,0.0597323f,0.7111511f,0.0730712f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,0,9,9,10,1,11,9,10,0,9,10,12,11,13,12,14,13,15,14,16,3,17,5,18,15,19,16,20,17,21,10,22,0,23,18,24,19,25,9,26,10,27,9,28,20,29,1,30,21,31,22,32,23,33,24,34,25,35,26,36,27,37,28,38,29,39,30,40,31,41,32,42,33,43,34,44,35,45,36,46,37,47,38,48,39,49,37,50,36,51,40,52,25,53,24,54,41,55,42,56,43,57,30,58,44,59,31,60,45,61,46,62,47,63,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID532(GL2 gl){
double[] positionsArray = {
60.3625334,-504.790288,83.1672707,51.7293347,-504.790305,82.0911667,59.3987692,-504.790288,82.0911752,59.3987692,-504.790288,82.0911752,51.7293347,-504.790305,82.0911667,51.7293347,-501.9627381,82.0911667,59.3987692,-501.9627381,82.0911752,60.3625334,-504.790288,83.1672707,59.3987692,-504.790288,82.0911752,60.3625334,-504.790288,83.1672707,50.7655657,-504.790305,89.6188368,51.7293347,-504.790305,82.0911667,59.3987692,-504.790288,90.6949408,50.7655704,-501.9627211,78.1959234,51.7293347,-501.9627381,82.0911667,51.7293347,-504.790305,82.0911667,59.3987692,-501.9627381,82.0911752,59.3987692,-501.9627381,82.0911752,60.3625334,-501.9627381,83.1672707,60.3625334,-504.790288,83.1672707,59.3987692,-504.790288,90.6949408,60.3625334,-504.790288,83.1672707,60.3625334,-504.790288,89.6188368,51.7293347,-504.790305,90.6949408,50.7655657,-504.790305,89.6188368,59.3987692,-504.790288,90.6949408,50.7655657,-504.790305,89.6188368,50.7655704,-504.790305,83.1672707,51.7293347,-504.790305,82.0911667,50.7655704,-504.790305,83.1672707,50.7655704,-501.9627211,78.1959234,51.7293347,-504.790305,82.0911667,60.3625334,-501.9627381,83.1672707,60.3625334,-504.790288,89.6188368,60.3625334,-504.790288,83.1672707,60.3625334,-501.9627381,89.6188368,59.3987692,-504.790288,90.6949408,60.3625334,-504.790288,89.6188368,59.3987692,-501.9627381,90.6949408,51.7293347,-504.790305,90.6949408,59.3987692,-504.790288,90.6949408,51.7293299,-501.9627211,90.6949408,50.7655657,-504.790305,89.6188368,51.7293347,-504.790305,90.6949408,50.7655657,-501.9627211,89.6188368,50.7655704,-504.790305,83.1672707,50.7655657,-504.790305,89.6188368,50.7655704,-501.9627211,78.1959234,50.7655704,-504.790305,83.1672707,50.7655657,-501.9627211,89.6188368,60.3625334,-501.9627381,89.6188368,59.3987692,-501.9627381,90.6949408,51.7293299,-501.9627211,90.6949408,50.7655657,-501.9627211,89.6188368,50.7655657,-504.790305,89.6188368,51.7293299,-501.9627211,90.6949408,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.8307023f,0.1619935f,0.7850641f,0.1534412f,0.8255626f,0.1534411f,0.8255625f,0.1534411f,0.785064f,0.1534412f,0.7773593f,0.1486547f,0.8332673f,0.1486546f,0.8307022f,0.1619935f,0.8255625f,0.1534411f,0.8307023f,0.1619935f,0.7799242f,0.1987689f,0.785064f,0.1534412f,0.8255625f,0.2073212f,0.7714999f,0.1584044f,0.7773593f,0.1486547f,0.785064f,0.1534412f,0.8332666f,0.1486545f,0.8255618f,0.153441f,0.7773586f,0.1486545f,0.8332673f,0.1486546f,0.8391265f,0.1584044f,0.8307022f,0.1619935f,0.8255625f,0.2073212f,0.8307022f,0.1619935f,0.8307022f,0.1987688f,0.785064f,0.2073212f,0.7799242f,0.1987689f,0.8255625f,0.2073212f,0.7799242f,0.1987689f,0.7799242f,0.1619936f,0.785064f,0.1534412f,0.7799242f,0.1619936f,0.7714999f,0.1584044f,0.785064f,0.1534412f,0.8391265f,0.1584044f,0.8307022f,0.1987688f,0.8307022f,0.1619935f,0.8391265f,0.2023579f,0.8255625f,0.2073212f,0.8307022f,0.1987688f,0.8332673f,0.2121077f,0.785064f,0.2073212f,0.8255625f,0.2073212f,0.7773593f,0.2121077f,0.7799242f,0.1987689f,0.785064f,0.2073212f,0.7714999f,0.202358f,0.7799242f,0.1619936f,0.7799242f,0.1987689f,0.7714999f,0.1584044f,0.7799242f,0.1619936f,0.7714999f,0.202358f,0.8391265f,0.2023579f,0.8307022f,0.1987688f,0.8391265f,0.1584044f,0.8332673f,0.2121077f,0.8255625f,0.2073212f,0.8391265f,0.2023579f,0.8332665f,0.2121075f,0.7773586f,0.2121075f,0.7850633f,0.207321f,0.7714999f,0.202358f,0.7799242f,0.1987689f,0.7773593f,0.2121077f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,10,10,9,9,12,12,13,13,14,14,15,15,16,16,3,17,5,18,17,19,18,20,19,21,20,22,21,23,22,24,23,25,24,26,25,27,26,28,27,29,28,30,29,31,30,32,31,33,32,34,33,35,34,36,35,37,36,38,37,39,38,40,39,41,40,42,41,43,42,44,43,45,44,46,45,47,46,48,47,49,48,50,49,51,50,52,33,53,32,54,51,55,36,56,35,57,38,58,52,59,39,60,53,61,54,62,55,63,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID540(GL2 gl){
double[] positionsArray = {
13.1024712,-433.7862091,95.3203053,11.4924327,-433.7862091,94.2755963,18.0911568,-433.7862091,91.7363546,18.0911615,-432.0016738,91.7363546,13.1024712,-433.7862091,95.3203053,18.0911568,-433.7862091,91.7363546,11.4138737,-433.7862176,133.8691937,11.4924327,-433.7862091,94.2755963,13.1024712,-433.7862091,95.3203053,18.0822557,-433.7862091,89.5394852,18.0911615,-432.0016738,91.7363546,13.1024712,-432.0016653,95.3203053,13.1024712,-433.7862091,95.3203053,11.4138737,-432.0016823,133.8691937,11.4924327,-433.7862091,94.2755963,11.4138737,-433.7862176,133.8691937,11.4138737,-433.7862176,133.8691937,13.1024712,-433.7862091,95.3203053,13.1810113,-433.7862176,133.0558891,18.0822557,-433.7862091,89.5394852,11.4924327,-433.7862091,94.2755963,11.4924327,-432.0016653,94.2755963,13.1024712,-432.0016653,95.3203053,18.0911615,-432.0016738,91.7363546,18.0822557,-432.0016738,89.5394852,13.1024712,-432.0016653,95.3203053,13.1810113,-433.7862176,133.0558891,13.1024712,-433.7862091,95.3203053,18.0764335,-432.0016823,138.7551267,11.4138737,-432.0016823,133.8691937,11.4138737,-433.7862176,133.8691937,11.4924327,-432.0016653,94.2755963,11.4924327,-433.7862091,94.2755963,11.4138737,-432.0016823,133.8691937,18.0764335,-433.7862262,138.7551267,11.4138737,-433.7862176,133.8691937,13.1810113,-433.7862176,133.0558891,18.0822557,-432.0016738,89.5394852,18.0822557,-433.7862091,89.5394852,11.4924327,-432.0016653,94.2755963,13.1024712,-432.0016653,95.3203053,18.0822557,-432.0016738,89.5394852,11.4924327,-432.0016653,94.2755963,13.1024712,-432.0016653,95.3203053,13.1810113,-432.0016823,133.0558891,13.1810113,-433.7862176,133.0558891,18.0764335,-432.0016823,138.7551267,18.0969553,-432.0016823,136.4900094,11.4138737,-432.0016823,133.8691937,18.0764335,-432.0016823,138.7551267,11.4138737,-433.7862176,133.8691937,18.0764335,-433.7862262,138.7551267,11.4138737,-432.0016823,133.8691937,13.1810113,-432.0016823,133.0558891,11.4924327,-432.0016653,94.2755963,18.0764335,-433.7862262,138.7551267,13.1810113,-433.7862176,133.0558891,18.0969553,-433.7862262,136.4900094,13.1810113,-432.0016823,133.0558891,13.1024712,-432.0016653,95.3203053,11.4924327,-432.0016653,94.2755963,18.0969553,-433.7862262,136.4900094,13.1810113,-433.7862176,133.0558891,13.1810113,-432.0016823,133.0558891,13.1810113,-432.0016823,133.0558891,18.0969553,-432.0016823,136.4900094,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.8864136f,0.3256272f,0.8944773f,0.3257114f,0.8864295f,0.3015586f,0.8799339f,0.3015586f,0.8864136f,0.3256272f,0.8864295f,0.3015586f,0.8944691f,0.4914463f,0.8944773f,0.3257114f,0.8864136f,0.3256272f,0.8944773f,0.3257114f,0.8944357f,0.3017742f,0.8864295f,0.3015586f,0.879934f,0.3015586f,0.8798925f,0.3256272f,0.8864136f,0.3256272f,0.9010186f,0.4914463f,0.8944773f,0.3257114f,0.8944691f,0.4914463f,0.8944691f,0.4914463f,0.8864136f,0.3256272f,0.8864217f,0.4915085f,0.8944357f,0.3017742f,0.8944773f,0.3257114f,0.9010251f,0.3257114f,0.9091256f,0.3256272f,0.9091097f,0.3015586f,0.9009916f,0.3017742f,0.8798925f,0.3256272f,0.8864217f,0.4915085f,0.8864136f,0.3256272f,0.901014f,0.517601f,0.9010186f,0.4914463f,0.8944691f,0.4914463f,0.9010251f,0.3257114f,0.8944773f,0.3257114f,0.9010186f,0.4914463f,0.8944635f,0.517601f,0.8944691f,0.4914463f,0.8864217f,0.4915085f,0.9009916f,0.3017742f,0.8944357f,0.3017742f,0.9010251f,0.3257114f,0.9091256f,0.3256272f,0.9009916f,0.3017742f,0.9010251f,0.3257114f,0.8798925f,0.3256272f,0.8799137f,0.4915085f,0.8864217f,0.4915085f,0.901014f,0.517601f,0.9091375f,0.5175166f,0.9010186f,0.4914463f,0.901014f,0.517601f,0.8944691f,0.4914463f,0.8944635f,0.517601f,0.9010186f,0.4914463f,0.9091174f,0.4915085f,0.9010251f,0.3257114f,0.8944635f,0.517601f,0.8864217f,0.4915085f,0.8864018f,0.5175166f,0.9091174f,0.4915085f,0.9091256f,0.3256272f,0.9010251f,0.3257114f,0.8864018f,0.5175166f,0.8864217f,0.4915085f,0.8799137f,0.4915085f,0.9091375f,0.5175166f,0.9091174f,0.4915085f,0.9010186f,0.4914463f,0.8798614f,0.5175166f,0.8864018f,0.5175166f,0.8799137f,0.4915085f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,1,9,9,10,2,11,10,12,11,13,12,14,13,15,14,16,15,17,16,18,17,19,18,20,19,21,20,22,21,23,22,24,23,25,24,26,25,27,26,28,27,29,28,30,29,31,30,32,31,33,32,34,33,35,34,36,35,37,36,38,37,39,38,40,39,41,40,42,41,43,42,44,43,45,44,46,45,47,46,48,47,49,48,50,49,51,50,52,51,53,52,54,53,55,54,56,55,57,56,58,57,59,58,60,59,61,60,62,61,63,62,64,63,65,47,66,64,67,48,68,65,69,61,70,63,71,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID548(GL2 gl){
double[] positionsArray = {
59.1471155,-482.3893411,167.0203617,61.8719445,-483.6109827,159.6778168,58.6989934,-483.6109827,159.6778168,59.1471155,-482.5916709,167.0206086,58.6989934,-483.6109827,159.6778168,59.1471155,-484.1084031,167.0203617,59.1471155,-482.3893411,167.0203617,59.1471155,-482.3893411,167.0203617,61.423813,-482.3893411,167.0203787,61.8719445,-483.6109827,159.6778168,60.7485791,-482.3893411,167.0206146,58.6989934,-483.6109827,159.6778168,58.6989934,-487.3821039,159.6778168,59.1471155,-484.1084031,167.0203617,61.423813,-482.3893411,167.0203787,61.8719445,-487.3821039,159.6778168,61.8719445,-483.6109827,159.6778168,59.1471155,-484.1084031,167.0203617,58.6989934,-487.3821039,159.6778168,61.423813,-484.1084031,167.0203617,61.423813,-482.3893411,167.0203787,61.423813,-484.1084031,167.0203617,61.8719445,-487.3821039,159.6778168,61.423813,-484.1084031,167.0203617,58.6989934,-487.3821039,159.6778168,61.8719445,-487.3821039,159.6778168,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.3275823f,0.4826172f,0.4022735f,0.4949837f,0.4022734f,0.4837669f,0.3275809f,0.4815619f,0.4022745f,0.4837661f,0.3275834f,0.4736591f,0.3275834f,0.4826164f,0.3275686f,0.4826244f,0.3275686f,0.4893474f,0.4022597f,0.4949909f,0.3275662f,0.4873533f,0.4022734f,0.4837669f,0.4022732f,0.4603213f,0.3275823f,0.4736599f,0.3275824f,0.4893402f,0.4022737f,0.5188262f,0.4022735f,0.4949837f,0.3275823f,0.4736599f,0.4022732f,0.4603213f,0.3275822f,0.466758f,0.3275824f,0.4893402f,0.3275824f,0.4980913f,0.4022737f,0.5188262f,0.3275822f,0.466758f,0.4022732f,0.4603213f,0.4022731f,0.4460722f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,4,4,3,3,6,6,7,7,8,8,9,9,8,8,7,7,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID556(GL2 gl){
double[] positionsArray = {
59.1471203,-471.6173361,167.0203787,61.8719398,-470.3956946,159.6778168,61.423813,-471.6173361,167.0203787,61.8719398,-466.6245734,159.6778168,61.423813,-471.6173361,167.0203787,61.8719398,-470.3956946,159.6778168,59.1471203,-471.6173361,167.0203787,58.6989934,-470.3956946,159.6778168,61.8719398,-470.3956946,159.6778168,61.8719398,-466.6245734,159.6778168,61.423813,-469.931858,167.0206171,61.423813,-471.6173361,167.0203787,61.423813,-469.8982741,167.0203787,59.1471156,-469.9318579,167.0206171,58.6989934,-470.3956946,159.6778168,59.1471203,-471.6173361,167.0203787,59.1471155,-469.8982741,167.0203787,61.423813,-469.8982741,167.0203787,61.8719398,-466.6245734,159.6778168,58.6989934,-466.6245734,159.6778168,58.6989934,-466.6245734,159.6778168,58.6989934,-470.3956946,159.6778168,59.1471155,-469.8982741,167.0203787,58.6989934,-466.6245734,159.6778168,59.1471155,-469.8982741,167.0203787,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.4043159f,0.5428013f,0.3265398f,0.5533173f,0.4043159f,0.5495243f,0.3265398f,0.5771598f,0.4043159f,0.5495243f,0.3265398f,0.5533173f,0.4043159f,0.5428013f,0.3265398f,0.5421005f,0.3265398f,0.5533173f,0.3265405f,0.5771609f,0.4043192f,0.5581054f,0.4043167f,0.5495253f,0.4043167f,0.5582764f,0.4043171f,0.53402f,0.3265384f,0.5421016f,0.4043146f,0.5428025f,0.4043146f,0.5338452f,0.4043159f,0.5269421f,0.3265398f,0.5044057f,0.3265398f,0.5186549f,0.3265398f,0.5186549f,0.3265398f,0.5421005f,0.4043159f,0.5338441f,0.4043159f,0.5269421f,0.3265398f,0.5186549f,0.4043159f,0.5338441f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,10,10,9,9,12,12,13,13,14,14,15,15,14,14,13,13,16,16,17,17,18,18,19,19,20,20,21,21,22,22,17,23,23,24,24,25,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID564(GL2 gl){
double[] positionsArray = {
13.1024807,-358.2599454,95.3203053,11.4924422,-358.2599454,94.2755963,18.091171,-358.2599284,91.7363546,18.0911757,-356.4753931,91.7363546,13.1024807,-358.2599454,95.3203053,18.091171,-358.2599284,91.7363546,11.4138832,-358.2599454,133.8691937,11.4924422,-358.2599454,94.2755963,13.1024807,-358.2599454,95.3203053,11.4924422,-358.2599454,94.2755963,18.0822698,-358.2599284,89.5394852,18.091171,-358.2599284,91.7363546,18.0911757,-356.4753931,91.7363546,13.1024807,-356.4753931,95.3203053,13.1024807,-358.2599454,95.3203053,11.4138832,-356.4754101,133.8691937,11.4924422,-358.2599454,94.2755963,11.4138832,-358.2599454,133.8691937,13.1810208,-358.2599454,133.0558891,18.0822698,-358.2599284,89.5394852,11.4924422,-358.2599454,94.2755963,11.4924422,-356.4753931,94.2755963,13.1024807,-356.4753931,95.3203053,18.0911757,-356.4753931,91.7363546,18.0822698,-356.4753931,89.5394852,13.1024807,-356.4753931,95.3203053,13.1810208,-358.2599454,133.0558891,13.1024807,-358.2599454,95.3203053,18.0764477,-356.4754101,138.7551267,11.4138832,-356.4754101,133.8691937,11.4138832,-358.2599454,133.8691937,11.4924422,-356.4753931,94.2755963,11.4924422,-358.2599454,94.2755963,11.4138832,-356.4754101,133.8691937,18.0764477,-358.2599454,138.7551267,18.0822698,-356.4753931,89.5394852,18.0822698,-358.2599284,89.5394852,11.4924422,-356.4753931,94.2755963,11.4924422,-356.4753931,94.2755963,13.1024807,-356.4753931,95.3203053,13.1810208,-356.4754101,133.0558891,13.1810208,-358.2599454,133.0558891,18.0764477,-356.4754101,138.7551267,18.0969695,-356.4754101,136.4900094,11.4138832,-356.4754101,133.8691937,18.0764477,-356.4754101,138.7551267,11.4138832,-358.2599454,133.8691937,18.0764477,-358.2599454,138.7551267,11.4138832,-356.4754101,133.8691937,13.1810208,-356.4754101,133.0558891,11.4924422,-356.4753931,94.2755963,18.0969695,-358.2599454,136.4900094,13.1810208,-356.4754101,133.0558891,13.1024807,-356.4753931,95.3203053,11.4924422,-356.4753931,94.2755963,18.0969695,-358.2599454,136.4900094,13.1810208,-358.2599454,133.0558891,13.1810208,-356.4754101,133.0558891,13.1810208,-356.4754101,133.0558891,18.0969695,-356.4754101,136.4900094,18.0969695,-358.2599454,136.4900094,13.1810208,-356.4754101,133.0558891,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.8864136f,0.3256272f,0.8944773f,0.3257114f,0.8864295f,0.3015586f,0.8799339f,0.3015586f,0.8864136f,0.3256272f,0.8864295f,0.3015586f,0.8944691f,0.4914463f,0.8944773f,0.3257114f,0.8864136f,0.3256272f,0.8944773f,0.3257114f,0.8944357f,0.3017742f,0.8864295f,0.3015586f,0.879934f,0.3015586f,0.8798925f,0.3256272f,0.8864136f,0.3256272f,0.9010186f,0.4914463f,0.8944773f,0.3257114f,0.8944691f,0.4914463f,0.8944691f,0.4914463f,0.8864136f,0.3256272f,0.8864217f,0.4915085f,0.8944357f,0.3017742f,0.8944773f,0.3257114f,0.9010251f,0.3257114f,0.9091256f,0.3256272f,0.9091097f,0.3015586f,0.9009916f,0.3017742f,0.8798925f,0.3256272f,0.8864217f,0.4915085f,0.8864136f,0.3256272f,0.901014f,0.517601f,0.9010186f,0.4914463f,0.9010251f,0.3257114f,0.8944773f,0.3257114f,0.9010186f,0.4914463f,0.8944635f,0.517601f,0.8944691f,0.4914463f,0.8864217f,0.4915085f,0.9009916f,0.3017742f,0.8944357f,0.3017742f,0.9010251f,0.3257114f,0.9091256f,0.3256272f,0.9009916f,0.3017742f,0.9010251f,0.3257114f,0.8798925f,0.3256272f,0.8799137f,0.4915085f,0.8864217f,0.4915085f,0.901014f,0.517601f,0.9091375f,0.5175166f,0.9010186f,0.4914463f,0.901014f,0.517601f,0.8944691f,0.4914463f,0.8944635f,0.517601f,0.9010186f,0.4914463f,0.9091174f,0.4915085f,0.9010251f,0.3257114f,0.8944635f,0.517601f,0.8864217f,0.4915085f,0.8864018f,0.5175166f,0.9091174f,0.4915085f,0.9091256f,0.3256272f,0.9010251f,0.3257114f,0.8864018f,0.5175166f,0.8864217f,0.4915085f,0.8799137f,0.4915085f,0.9091375f,0.5175166f,0.9091174f,0.4915085f,0.9010186f,0.4914463f,0.8798614f,0.5175166f,0.8864018f,0.5175166f,0.8799137f,0.4915085f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,6,18,8,19,18,20,19,21,20,22,21,23,22,24,23,25,24,26,25,27,26,28,27,29,28,30,29,31,30,6,31,32,32,33,33,34,34,35,6,36,18,37,35,38,36,39,37,40,22,41,24,42,38,43,39,44,40,45,41,46,42,47,43,48,44,49,45,50,46,51,47,52,48,53,49,54,50,55,34,56,18,57,51,58,52,59,53,60,54,61,55,62,56,63,57,64,43,65,58,66,44,67,59,68,60,69,61,70,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID572(GL2 gl){
double[] positionsArray = {
179.5804906,-414.4331744,135.6754786,179.5804906,-427.1958137,144.5898981,179.5804906,-427.1958137,135.6754786,179.5804906,-414.4331744,144.5898981,179.5804906,-414.4331744,144.5898981,179.5804906,-414.4331744,135.6754786,176.3526191,-413.2601232,134.8561283,179.5804906,-414.4331744,144.5898981,176.3526191,-413.2601232,145.4092484,179.5804906,-427.1958137,144.5898981,176.3526191,-428.3688648,145.4092484,179.5804906,-427.1958137,135.6754786,179.5804906,-427.1958137,144.5898981,179.5804906,-414.4331744,135.6754786,179.5804906,-427.1958137,135.6754786,176.3526191,-428.3688563,134.8561283,179.5804906,-414.4331744,135.6754786,176.3526191,-428.3688563,134.8561283,176.3526191,-413.2601232,134.8561283,176.3526191,-413.2601232,145.4092484,179.5804906,-414.4331744,144.5898981,176.3526191,-413.2601232,134.8561283,179.5804906,-427.1958137,144.5898981,176.3526191,-413.2601232,145.4092484,176.3526191,-428.3688648,145.4092484,176.3526191,-428.3688648,145.4092484,176.3526191,-428.3688563,134.8561283,179.5804906,-427.1958137,135.6754786,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.5073442f,0.4466608f,0.4262843f,0.5277208f,0.4262843f,0.4466609f,0.5073442f,0.5277207f,0.5073442f,0.5277207f,0.5073442f,0.4466608f,0.5147947f,0.4392104f,0.5073442f,0.5277207f,0.5147947f,0.5351712f,0.4262843f,0.5277209f,0.4188339f,0.5351712f,0.4262843f,0.4466609f,0.4262843f,0.5277209f,0.5073442f,0.4466608f,0.4262843f,0.4466609f,0.4188339f,0.4392104f,0.5073442f,0.4466608f,0.4188339f,0.4392104f,0.5147947f,0.4392104f,0.5147947f,0.5351712f,0.5073442f,0.5277207f,0.5147947f,0.4392104f,0.4262843f,0.5277209f,0.5147947f,0.5351712f,0.4188339f,0.5351712f,0.4188339f,0.5351712f,0.4188339f,0.4392104f,0.4262843f,0.4466609f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID580(GL2 gl){
double[] positionsArray = {
15.0757541,-414.4331744,144.5898981,15.0757541,-427.1958137,135.6754786,15.0757541,-427.1958137,144.5898981,15.0757541,-414.4331744,135.6754786,18.3036256,-413.2601232,145.4092484,15.0757541,-414.4331744,144.5898981,15.0757541,-427.1958137,144.5898981,15.0757541,-414.4331744,144.5898981,18.3036256,-413.2601232,134.8561283,15.0757541,-414.4331744,135.6754786,18.3036256,-428.3688563,134.8561283,15.0757541,-427.1958137,135.6754786,15.0757541,-414.4331744,135.6754786,18.3036256,-428.3688648,145.4092484,15.0757541,-427.1958137,144.5898981,15.0757541,-427.1958137,135.6754786,18.3036256,-413.2601232,145.4092484,18.3036256,-413.2601232,134.8561283,15.0757541,-414.4331744,144.5898981,18.3036256,-413.2601232,145.4092484,15.0757541,-427.1958137,144.5898981,18.3036256,-428.3688648,145.4092484,18.3036256,-413.2601232,134.8561283,18.3036256,-428.3688563,134.8561283,15.0757541,-414.4331744,135.6754786,18.3036256,-428.3688648,145.4092484,15.0757541,-427.1958137,135.6754786,18.3036256,-428.3688563,134.8561283,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.5073442f,0.5277207f,0.4262843f,0.4466609f,0.4262843f,0.5277209f,0.5073442f,0.4466608f,0.5147947f,0.5351712f,0.5073442f,0.5277207f,0.4262843f,0.5277209f,0.5073442f,0.5277207f,0.5147947f,0.4392104f,0.5073442f,0.4466608f,0.4188339f,0.4392104f,0.4262843f,0.4466609f,0.5073442f,0.4466608f,0.4188339f,0.5351712f,0.4262843f,0.5277209f,0.4262843f,0.4466609f,0.5147947f,0.5351712f,0.5147947f,0.4392104f,0.5073442f,0.5277207f,0.5147947f,0.5351712f,0.4262843f,0.5277209f,0.4188339f,0.5351712f,0.5147947f,0.4392104f,0.4188339f,0.4392104f,0.5073442f,0.4466608f,0.4188339f,0.5351712f,0.4262843f,0.4466609f,0.4188339f,0.4392104f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID588(GL2 gl){
double[] positionsArray = {
40.7044188,-317.0239584,95.8145433,28.9636985,-317.9147802,90.7753482,40.9701762,-317.9147802,93.0801541,40.9701762,-317.9147802,93.0801541,28.9636985,-317.9147802,90.7753482,30.0065893,-317.0239584,88.1960518,45.714993,-317.0239584,95.8249912,40.7044188,-317.0239584,95.8145433,27.9208077,-317.0239584,93.3546531,28.9636985,-317.9147802,90.7753482,28.9636985,-308.5859442,90.7753482,30.0065893,-317.0239584,88.1960518,28.9636985,-317.9147802,90.7753482,40.9701762,-317.9147802,93.0801541,30.0065893,-317.0239584,88.1960518,41.2359288,-317.0239584,90.3457649,45.714993,-314.6917537,97.5213896,40.7044188,-317.0239584,95.8145433,45.714993,-317.0239584,95.8249912,45.714993,-317.9147802,93.0801541,40.5401733,-314.6917367,97.5044873,27.9208077,-317.0239584,93.3546531,27.9208124,-309.476749,93.3546531,28.9636985,-317.9147802,90.7753482,27.9208077,-317.0239584,93.3546531,28.9636985,-308.5859442,90.7753482,28.9636985,-317.9147802,90.7753482,27.9208124,-309.476749,93.3546531,30.0065893,-309.476749,88.1960518,41.2359288,-317.0239584,90.3457649,30.0065893,-317.0239584,88.1960518,30.6511278,-314.6917367,86.601953,45.714993,-317.9147802,93.0801541,40.5401733,-314.6917367,97.5044873,27.2762692,-314.6917367,94.9487435,27.9208077,-317.0239584,93.3546531,27.9208124,-309.476749,93.3546531,27.9208077,-317.0239584,93.3546531,27.2762692,-311.8089708,94.9487435,27.9208124,-309.476749,93.3546531,40.9701762,-308.5859442,93.0801541,28.9636985,-308.5859442,90.7753482,28.9636985,-308.5859442,90.7753482,41.2359336,-309.476749,90.3457649,30.0065893,-309.476749,88.1960518,30.0065893,-309.476749,88.1960518,30.6511278,-314.6917367,86.601953,30.0065893,-317.0239584,88.1960518,41.4001791,-314.6917367,88.6558209,41.2359288,-317.0239584,90.3457649,30.6511278,-314.6917367,86.601953,45.714993,-317.0239584,90.3353255,45.714993,-311.8089708,97.5213896,40.5401733,-314.6917367,97.5044873,45.714993,-314.6917537,97.5213896,40.5401733,-314.6917367,97.5044873,27.2762692,-311.8089708,94.9487435,27.2762692,-314.6917367,94.9487435,40.5401733,-311.8089708,97.5044873,27.2762692,-311.8089708,94.9487435,27.9208077,-317.0239584,93.3546531,27.2762692,-314.6917367,94.9487435,40.7044188,-309.476749,95.8145433,27.9208124,-309.476749,93.3546531,27.2762692,-311.8089708,94.9487435,40.9701762,-308.5859442,93.0801541,41.2359336,-309.476749,90.3457649,28.9636985,-308.5859442,90.7753482,40.7044188,-309.476749,95.8145433,40.9701762,-308.5859442,93.0801541,27.9208124,-309.476749,93.3546531,41.4001744,-311.8089708,88.6558209,30.0065893,-309.476749,88.1960518,41.2359336,-309.476749,90.3457649,30.0065893,-309.476749,88.1960518,30.6511278,-311.8089708,86.601953,30.6511278,-314.6917367,86.601953,30.6511278,-311.8089708,86.601953,41.4001791,-314.6917367,88.6558209,30.6511278,-314.6917367,86.601953,41.4001744,-311.8089708,88.6558209,45.714993,-317.0239584,90.3353255,45.714993,-311.8089708,97.5213896,40.7044188,-309.476749,95.8145433,27.2762692,-311.8089708,94.9487435,40.5401733,-311.8089708,97.5044873,45.714993,-309.476749,90.3353255,45.714993,-308.5859442,93.0801541,45.714993,-311.8089708,88.6389271,41.4001744,-311.8089708,88.6558209,30.6511278,-311.8089708,86.601953,30.0065893,-309.476749,88.1960518,45.714993,-311.8089708,88.6389271,45.714993,-314.6917367,88.6389271,45.714993,-314.6917367,88.6389271,45.714993,-309.476749,95.8249912,45.714993,-311.8089708,97.5213896,45.714993,-309.476749,90.3353255,45.714993,-308.5859442,93.0801541,45.714993,-309.476749,95.8249912,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.6168717f,0.0297363f,0.6864018f,0.0396876f,0.6168717f,0.0396876f,0.6168717f,0.0396876f,0.6864018f,0.0396876f,0.6864018f,0.0496391f,0.5868875f,0.0297363f,0.6168717f,0.0297363f,0.6168717f,0.0396876f,0.6168717f,0.0297363f,0.6864018f,0.0297363f,0.6864018f,0.0396876f,0.5818561f,0.0237612f,0.552247f,0.0141406f,0.5491211f,0.0237612f,0.6168717f,0.0396876f,0.6864018f,0.0496391f,0.6168717f,0.0496391f,0.586888f,0.0197848f,0.6168723f,0.0297363f,0.586888f,0.0297363f,0.5868875f,0.0297363f,0.6168717f,0.0396876f,0.5868875f,0.0396876f,0.6168717f,0.0297363f,0.6168717f,0.0197848f,0.6864018f,0.0297363f,0.5787302f,0.0333817f,0.5491211f,0.0237612f,0.552247f,0.0333817f,0.5818561f,0.0237612f,0.5491211f,0.0237612f,0.5787302f,0.0333817f,0.5818561f,0.0237612f,0.5787302f,0.0141406f,0.552247f,0.0141406f,0.6168717f,0.0496391f,0.6864018f,0.0496391f,0.6864018f,0.0595906f,0.6168717f,0.0396876f,0.6168717f,0.0496391f,0.5868875f,0.0396876f,0.5868875f,0.0197848f,0.6168717f,0.0197848f,0.6168717f,0.0297363f,0.6168717f,0.0197848f,0.6864018f,0.0197848f,0.6864018f,0.0297363f,0.5787302f,0.0333817f,0.552247f,0.0333817f,0.5705464f,0.0393276f,0.6864018f,0.0993962f,0.6168717f,0.0894449f,0.6864018f,0.0894449f,0.6864018f,0.0894449f,0.6168717f,0.0794934f,0.6864018f,0.0794934f,0.5787302f,0.0141406f,0.5604308f,0.0081947f,0.552247f,0.0141406f,0.6168717f,0.0595906f,0.6168717f,0.0496391f,0.6864018f,0.0595906f,0.5868875f,0.0396876f,0.6168717f,0.0496391f,0.5868875f,0.0496391f,0.5868875f,0.0098333f,0.6168717f,0.0197848f,0.5868875f,0.0197848f,0.6168717f,0.0197848f,0.6864018f,0.0098333f,0.6864018f,0.0197848f,0.6168717f,0.0098333f,0.5705464f,0.0393276f,0.552247f,0.0333817f,0.5604308f,0.0393276f,0.6168717f,0.0993962f,0.6864018f,0.0993962f,0.6864018f,0.1093477f,0.6168717f,0.0894449f,0.6168717f,0.0794934f,0.6864018f,0.0894449f,0.6168717f,0.0993962f,0.6168717f,0.0894449f,0.6864018f,0.0993962f,0.6168717f,0.0695419f,0.6864018f,0.0794934f,0.6168717f,0.0794934f,0.5787302f,0.0141406f,0.5705464f,0.0081947f,0.5604308f,0.0081947f,0.6864008f,0.0695419f,0.6168707f,0.0595905f,0.6864008f,0.0595905f,0.6168707f,0.0695419f,0.5868875f,0.0496391f,0.6168717f,0.0496391f,0.6168717f,0.0595906f,0.5868875f,0.0098333f,0.6168717f,0.0098333f,0.6168717f,0.0197848f,0.6168717f,0.0993962f,0.6864018f,0.1093477f,0.6168717f,0.1093477f,0.6168717f,0.0894449f,0.5868875f,0.0794934f,0.6168717f,0.0794934f,0.6168717f,0.0993962f,0.5868875f,0.0894449f,0.6168717f,0.0894449f,0.5868875f,0.0695419f,0.6168717f,0.0695419f,0.6168717f,0.0794934f,0.6168717f,0.0695419f,0.6864018f,0.0695419f,0.6864018f,0.0794934f,0.5868863f,0.0695419f,0.6168706f,0.0595905f,0.6168706f,0.0695419f,0.5868864f,0.0595905f,0.5868875f,0.0595906f,0.5868875f,0.0496391f,0.6168717f,0.0595906f,0.5868875f,0.0993962f,0.6168717f,0.1093477f,0.5868875f,0.1093477f,0.5868875f,0.0993962f,0.6168717f,0.0993962f,0.6168717f,0.1093477f,0.5868875f,0.0794934f,0.5868875f,0.0695419f,0.6168717f,0.0794934f,0.5868875f,0.0894449f,0.5868875f,0.0794934f,0.6168717f,0.0894449f,0.5868875f,0.0993962f,0.5868875f,0.0894449f,0.6168717f,0.0993962f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,0,7,2,8,7,9,8,10,9,11,10,12,11,13,12,14,13,15,14,16,15,17,16,18,17,19,18,20,6,21,2,22,19,23,17,24,20,25,21,26,22,27,23,28,24,29,25,30,26,31,27,32,10,33,28,34,11,35,29,36,30,37,31,38,13,39,15,40,32,41,16,42,20,43,17,44,33,45,34,46,35,47,36,48,37,49,38,50,39,51,40,52,41,53,42,54,43,55,44,56,45,57,46,58,47,59,48,60,49,61,50,62,32,63,15,64,51,65,52,66,53,67,54,68,55,69,56,70,57,71,56,70,55,69,58,72,59,73,60,74,61,75,62,76,63,77,64,78,65,79,66,80,67,81,68,82,69,83,70,84,71,85,72,86,73,87,74,88,75,89,76,90,77,91,78,92,79,93,78,92,77,91,80,94,81,95,49,96,48,97,82,98,58,99,55,100,83,101,84,102,85,103,65,104,86,105,66,106,68,107,87,108,69,109,88,110,71,111,73,112,89,113,90,114,91,115,92,116,78,117,80,118,78,117,92,116,93,119,94,120,81,121,48,122,95,123,85,124,96,125,95,126,83,127,85,128,97,129,88,130,73,131,98,132,86,133,65,134,99,135,87,136,68,137,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID596(GL2 gl){
double[] positionsArray = {
31.391058,-291.4709187,71.7522337,45.7597636,-290.3549632,67.5826106,31.391058,-290.3549632,67.5826106,31.391058,-290.3549632,67.5826106,45.7597684,-291.4709187,63.412979,31.391058,-291.4709187,63.412979,45.7597636,-290.3549632,67.5826106,31.391058,-290.3549632,67.5826106,31.3910627,-307.0143121,67.5826021,31.391058,-291.4709187,71.7522337,45.7597636,-291.4709187,71.7522422,45.7597636,-290.3549632,67.5826106,31.391058,-291.4709187,71.7522337,31.391058,-290.3549632,67.5826106,31.391058,-291.4709187,63.412979,31.3910675,-305.8983396,63.412979,45.7597684,-291.4709187,63.412979,45.7597684,-294.5197919,60.3606045,31.391058,-291.4709187,63.412979,31.391058,-290.3549632,67.5826106,31.3910675,-305.8983396,63.412979,31.3910627,-307.0143121,67.5826021,31.391058,-291.4709187,71.7522337,31.3910627,-307.0143121,67.5826021,31.3910627,-305.8983396,71.7522337,31.391058,-294.5198089,74.8046167,45.7597636,-291.4709187,71.7522422,31.391058,-291.4709187,71.7522337,31.391058,-291.4709187,63.412979,31.3910627,-302.8494663,60.360596,31.3910675,-305.8983396,63.412979,31.391058,-291.4709187,63.412979,45.7597684,-294.5197919,60.3606045,31.3910627,-294.5198089,60.3606045,45.7597731,-307.014295,67.5826106,31.3910627,-307.0143121,67.5826021,31.3910675,-305.8983396,63.412979,45.7597731,-307.014295,67.5826106,31.3910627,-305.8983396,71.7522337,31.3910627,-307.0143121,67.5826021,45.7597684,-305.8983226,71.7522422,31.391058,-291.4709187,71.7522337,31.3910627,-305.8983396,71.7522337,31.391058,-294.5198089,74.8046167,45.7597636,-294.5197919,74.8046167,45.7597636,-291.4709187,71.7522422,31.391058,-294.5198089,74.8046167,31.3910675,-305.8983396,63.412979,31.3910627,-302.8494663,60.360596,45.7597731,-305.8983226,63.412979,31.391058,-291.4709187,63.412979,31.3910627,-294.5198089,60.3606045,31.3910627,-302.8494663,60.360596,45.7597684,-294.5197919,60.3606045,45.7597684,-298.6846206,59.2433559,31.3910627,-294.5198089,60.3606045,45.7597731,-307.014295,67.5826106,31.3910675,-305.8983396,63.412979,45.7597731,-305.8983226,63.412979,45.7597684,-302.8494663,74.8046167,31.3910627,-305.8983396,71.7522337,45.7597684,-305.8983226,71.7522422,31.391058,-294.5198089,74.8046167,31.3910627,-305.8983396,71.7522337,31.3910627,-302.8494663,74.8046167,45.7597636,-298.6846206,75.9218653,31.391058,-294.5198089,74.8046167,31.391058,-298.6846376,75.9218653,45.7597636,-294.5197919,74.8046167,45.7597731,-305.8983226,63.412979,31.3910627,-302.8494663,60.360596,45.7597731,-302.8494663,60.3606045,31.3910627,-294.5198089,60.3606045,31.3910627,-298.6846206,59.2433474,31.3910627,-302.8494663,60.360596,45.7597684,-298.6846206,59.2433559,31.3910627,-298.6846206,59.2433474,31.3910627,-294.5198089,60.3606045,31.3910627,-302.8494663,74.8046167,31.3910627,-305.8983396,71.7522337,45.7597684,-302.8494663,74.8046167,31.391058,-294.5198089,74.8046167,31.3910627,-302.8494663,74.8046167,31.391058,-298.6846376,75.9218653,45.7597636,-298.6846206,75.9218653,31.391058,-298.6846376,75.9218653,31.3910627,-302.8494663,74.8046167,31.3910627,-298.6846206,59.2433474,45.7597731,-302.8494663,60.3606045,31.3910627,-302.8494663,60.360596,45.7597684,-298.6846206,59.2433559,45.7597684,-302.8494663,74.8046167,45.7597636,-298.6846206,75.9218653,31.3910627,-302.8494663,74.8046167,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.5865513f,0.175586f,0.6864154f,0.1839081f,0.5865513f,0.1839081f,0.5865513f,0.1839081f,0.6864154f,0.19223f,0.5865513f,0.19223f,0.6864154f,0.1839081f,0.5449748f,0.1781478f,0.5828022f,0.1781478f,0.5475088f,0.1876046f,0.6864154f,0.175586f,0.6864154f,0.1839081f,0.5865513f,0.175586f,0.5449748f,0.1781478f,0.5475088f,0.1686909f,0.5802681f,0.1686909f,0.6864154f,0.19223f,0.6864154f,0.200552f,0.5865513f,0.19223f,0.5449748f,0.1781478f,0.5802681f,0.1686909f,0.5828022f,0.1781478f,0.5475088f,0.1876046f,0.5828022f,0.1781478f,0.5802681f,0.1876046f,0.5865513f,0.167264f,0.6864154f,0.175586f,0.5865513f,0.175586f,0.5475088f,0.1686909f,0.5733453f,0.161768f,0.5802681f,0.1686909f,0.5865513f,0.19223f,0.6864154f,0.200552f,0.5865513f,0.200552f,0.6864154f,0.1340212f,0.5865513f,0.1340212f,0.5865513f,0.1256991f,0.6864154f,0.1340212f,0.5865513f,0.1423432f,0.5865513f,0.1340212f,0.6864154f,0.1423432f,0.5475088f,0.1876046f,0.5802681f,0.1876046f,0.5544316f,0.1945275f,0.6864154f,0.167264f,0.6864154f,0.175586f,0.5865513f,0.167264f,0.5865513f,0.1256991f,0.5865513f,0.1173772f,0.6864154f,0.1256991f,0.5475088f,0.1686909f,0.5544316f,0.161768f,0.5733453f,0.161768f,0.6864154f,0.200552f,0.6864154f,0.2088741f,0.5865513f,0.200552f,0.6864154f,0.1340212f,0.5865513f,0.1256991f,0.6864154f,0.1256991f,0.6864154f,0.1506651f,0.5865513f,0.1423432f,0.6864154f,0.1423432f,0.5544316f,0.1945275f,0.5802681f,0.1876046f,0.5733453f,0.1945275f,0.6864154f,0.1589646f,0.5865513f,0.167264f,0.5865513f,0.1589646f,0.6864154f,0.167264f,0.6864154f,0.1256991f,0.5865513f,0.1173772f,0.6864154f,0.1173772f,0.5544316f,0.161768f,0.5638884f,0.1592342f,0.5733453f,0.161768f,0.6864154f,0.2088741f,0.5865513f,0.2088741f,0.5865513f,0.200552f,0.5865513f,0.1506651f,0.5865513f,0.1423432f,0.6864154f,0.1506651f,0.5544316f,0.1945275f,0.5733453f,0.1945275f,0.5638884f,0.1970614f,0.6864154f,0.1589646f,0.5865513f,0.1589646f,0.5865513f,0.1506651f,0.5865513f,0.2088741f,0.6864154f,0.2171961f,0.5865513f,0.2171961f,0.6864154f,0.2088741f,0.6864154f,0.1506651f,0.6864154f,0.1589646f,0.5865513f,0.1506651f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,4,4,3,3,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,38,38,37,37,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,66,66,65,65,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,88,88,87,87,90,90,91,91,92,92,93,93,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID604(GL2 gl){
double[] positionsArray = {
34.3139304,-314.504026,36.51344,20.3412549,-314.504026,29.3773208,34.3139304,-314.504026,29.3773293,34.3139304,-314.504026,29.3773293,20.3412549,-314.504026,29.3773208,20.3412549,-310.1770024,25.0453245,34.3139304,-310.1770024,25.0453245,34.3139304,-314.504026,36.51344,34.3139304,-314.504026,29.3773293,20.3412549,-314.504026,36.51344,20.3412549,-310.1770024,25.0453245,20.3412549,-314.504026,29.3773208,20.3412549,-314.504026,36.51344,34.3139304,-314.504026,29.3773293,20.3412549,-310.1770024,25.0453245,34.3139304,-310.1770024,25.0453245,34.3139304,-280.2422504,36.5134442,20.3412596,-280.2423524,25.0453245,20.3412549,-310.1770024,25.0453245,20.3412549,-314.504026,36.51344,34.3139304,-280.2423524,25.0453245,34.3139304,-310.1770024,25.0453245,20.3412549,-310.1770024,25.0453245,34.3139304,-280.2423524,25.0453245,20.3412596,-280.2423524,25.0453245,20.3412549,-280.2422504,36.5134357,20.3412596,-280.2423524,25.0453245,20.3412549,-314.504026,36.51344,34.3139304,-280.2422504,36.5134442,34.3139304,-280.2423524,25.0453245,20.3412549,-280.2422504,36.5134357,20.3412549,-280.2422504,36.5134357,34.3139304,-280.2423524,25.0453245,20.3412596,-280.2423524,25.0453245,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.3905039f,0.9795327f,0.3694673f,0.952649f,0.3900561f,0.9511263f,0.3900561f,0.9511263f,0.3694673f,0.952649f,0.3577056f,0.9363121f,0.3511846f,0.8775924f,0.3588719f,0.9058597f,0.3588719f,0.8882703f,0.369467f,0.9795603f,0.369467f,0.9526483f,0.3905036f,0.979532f,0.3577056f,0.9363121f,0.3694673f,0.952649f,0.3694673f,0.979561f,0.3900561f,0.9511263f,0.3577056f,0.9363121f,0.3776433f,0.9338526f,0.2979476f,0.9058597f,0.3588719f,0.9058597f,0.3511846f,0.8775924f,0.2765439f,0.9363122f,0.3577056f,0.9363121f,0.3694673f,0.979561f,0.27669f,0.9107442f,0.357491f,0.9107442f,0.3577056f,0.9363121f,0.2979476f,0.9058597f,0.3511846f,0.8775924f,0.2981377f,0.8775924f,0.27669f,0.9107442f,0.3577056f,0.9363121f,0.2765439f,0.9363122f,0.276253f,0.979561f,0.2765439f,0.9363122f,0.3694673f,0.979561f,0.2027061f,0.9795327f,0.2031538f,0.9363954f,0.2323682f,0.979561f,0.2323682f,0.979561f,0.2031538f,0.9363954f,0.2323682f,0.9363122f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,1,10,0,11,10,12,11,13,12,14,13,15,14,16,15,17,16,18,7,19,6,20,17,21,18,22,19,23,20,24,21,25,22,26,16,27,6,28,23,29,20,30,22,31,24,32,25,33,26,34,27,35,28,36,29,37,30,38,31,39,32,40,33,41,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID612(GL2 gl){
double[] positionsArray = {
31.3544886,-256.4290765,166.1100708,28.5464561,-256.4290595,164.4586658,37.5148383,-256.4290765,163.0507226,37.5148478,-235.1794499,163.0507226,31.3544886,-256.4290765,166.1100708,37.5148383,-256.4290765,163.0507226,31.3544981,-235.1794499,166.1100708,28.5464561,-256.4290595,164.4586658,31.3544886,-256.4290765,166.1100708,28.5464561,-256.4290595,164.4586658,37.5148383,-256.4290765,155.1242851,37.5148383,-256.4290765,163.0507226,37.5148478,-235.1794499,163.0507226,31.3544981,-235.1794499,166.1100708,31.3544886,-256.4290765,166.1100708,31.3544981,-235.1794499,166.1100708,28.5464656,-235.1794499,164.4586658,28.5464561,-256.4290595,164.4586658,28.5464561,-256.4290595,164.4586658,31.5975533,-256.4290765,155.1242851,37.5148383,-256.4290765,155.1242851,31.3544981,-235.1794499,166.1100708,37.5148478,-235.1794499,163.0507226,37.5148478,-235.1794499,155.1242851,31.5975627,-235.1794499,155.1242851,28.5464656,-235.1794499,164.4586658,28.5464561,-256.4290595,164.4586658,31.5975627,-235.1794499,155.1242851,31.5975533,-256.4290765,155.1242851,28.5464656,-235.1794499,164.4586658,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.6591104f,0.8183608f,0.6655266f,0.8134229f,0.6519512f,0.8021786f,0.720601f,0.8348594f,0.6656586f,0.8241143f,0.6657009f,0.8348594f,0.7206432f,0.8241143f,0.6655266f,0.8134229f,0.6656586f,0.8241143f,0.6655266f,0.8134229f,0.6519512f,0.7647272f,0.6519512f,0.8021786f,0.720601f,0.8348594f,0.7206432f,0.8241143f,0.6656586f,0.8241143f,0.7206432f,0.8241143f,0.7205505f,0.8134229f,0.6655266f,0.8134229f,0.6655266f,0.8134229f,0.6655266f,0.7647272f,0.6519512f,0.7647272f,0.7245913f,0.8183608f,0.7356508f,0.8021786f,0.7356508f,0.7647272f,0.7245913f,0.8183608f,0.7205505f,0.7647272f,0.7205505f,0.8134229f,0.6655267f,0.8134229f,0.7205505f,0.7647272f,0.6655266f,0.7647272f,0.7205505f,0.8134229f,0.7245913f,0.8183608f,0.7356508f,0.7647272f,0.7205505f,0.7647272f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,21,24,24,25,25,26,26,27,27,28,28,29,27,28,26,27,29,30,21,31,23,32,24,33,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID620(GL2 gl){
double[] positionsArray = {
31.5975627,-235.1794499,155.1242851,37.5148383,-256.4290765,155.1242851,31.5975533,-256.4290765,155.1242851,37.5148478,-235.1794499,155.1242851,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 6, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID626(GL2 gl){
double[] positionsArray = {
97.3238278,-20.8490968,174.3549705,97.3238184,-20.8491308,168.635118,40.9923581,-20.8490968,167.5286749,97.3238278,-20.8490968,174.3549705,153.6696236,-20.8491648,167.5286579,97.3238184,-20.8491308,168.635118,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.0174535f,0.654744f,0.0174485f,0.639428f,0.1411897f,0.6364652f,0.0174535f,0.654744f,0.1411897f,0.6364652f,0.0174485f,0.639428f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID634(GL2 gl){
double[] positionsArray = {
65.4515295,-20.7855456,53.8500293,97.3238089,-20.7882673,53.8212314,97.3252467,-20.7778569,45.3192077,65.4515295,-20.7855456,53.8500293,97.3252467,-20.7778569,45.3192077,17.9402961,-20.7778229,45.3192034,129.2047057,-20.7855456,53.850025,97.3252467,-20.7778569,45.3192077,97.3238089,-20.7882673,53.8212314,97.3252467,-20.7778569,45.3192077,19.7484159,-0.1816028,45.3191949,17.9402961,-20.7778229,45.3192034,65.5013324,-20.8242615,71.0641596,129.2047057,-20.7855456,53.850025,176.7159297,-20.7778569,45.3191949,97.3252467,-20.7778569,45.3192077,97.3252467,-0.1815687,45.3192077,19.7484159,-0.1816028,45.3191949,97.3252467,-20.7778569,45.3192077,19.7484159,-0.1816028,45.3191949,17.9230897,-1.8228418,45.3191906,17.9402961,-20.7778229,45.3192034,28.9439239,-20.8168789,103.380497,129.1549028,-20.8242615,71.0641596,176.7159297,-20.7778569,45.3191949,174.8992067,-0.1816028,45.3191949,97.3252467,-20.7778569,45.3192077,174.8992067,-0.1816028,45.3191949,97.3252467,-0.1815687,45.3192077,97.3252467,-20.7778569,45.3192077,97.3252467,-0.1815687,45.3192077,19.7570096,-0.1816368,38.101855,19.7484159,-0.1816028,45.3191949,19.7484159,-0.1816028,45.3191949,17.9316882,-1.8228418,38.101855,17.9230897,-1.8228418,45.3191906,17.9316882,-1.8228418,38.101855,17.9402961,-20.7778229,45.3192034,17.9230897,-1.8228418,45.3191906,17.9402866,-20.7778229,103.4720421,38.0193517,-20.8361008,103.5845767,156.5734877,-20.8491648,151.4361018,176.7245376,-1.8228418,45.3191906,174.8992067,-0.1816028,45.3191949,176.7159297,-20.7778569,45.3191949,97.3252467,-0.1815687,45.3192077,174.8992067,-0.1816028,45.3191949,174.8906177,-0.1816368,38.101855,19.7484159,-0.1816028,45.3191949,19.7570096,-0.1816368,38.101855,17.9316882,-1.8228418,38.101855,97.3252467,-0.1815687,45.3192077,97.3218319,-0.1815687,38.1018678,19.7570096,-0.1816368,38.101855,17.9402961,-20.7778569,38.1018636,38.0655317,-20.8491648,151.4361018,156.5734877,-20.8491648,151.4361018,129.1549028,-20.8242615,71.0641596,97.3195144,-20.8491308,103.2457721,176.7159675,-20.7778569,151.4361018,176.7245376,-1.8228418,45.3191906,176.7159297,-20.7778569,45.3191949,176.7159486,-1.8228418,38.101855,174.8992067,-0.1816028,45.3191949,176.7245376,-1.8228418,45.3191906,176.7159486,-1.8228418,38.101855,174.8992067,-0.1816028,45.3191949,176.7159486,-1.8228418,38.101855,174.8906177,-0.1816368,38.101855,97.3252467,-0.1815687,45.3192077,174.8906177,-0.1816368,38.101855,97.3218319,-0.1815687,38.1018678,38.0655317,-20.8491648,151.4361018,97.3195144,-20.8491308,103.2457721,65.5013324,-20.8242615,71.0641596,156.5734877,-20.8491648,151.4361018,97.3195144,-20.8491308,103.2457721,153.4239198,-20.8491648,151.3975968,97.3195144,-20.8491308,103.2457721,129.1549028,-20.8242615,71.0641596,97.3238184,-20.8134428,71.0600383,176.7159297,-20.7778569,38.1018508,97.3195144,-20.8491308,103.2457721,97.3238184,-20.8134428,71.0600383,65.5013324,-20.8242615,71.0641596,38.0655317,-20.8491648,151.4361018,41.2323107,-20.8491648,151.3975968,97.3195144,-20.8491308,103.2457721,153.6696236,-20.8491648,167.5286579,156.5734877,-20.8491648,151.4361018,153.4239198,-20.8491648,151.3975968,153.4239198,-20.8491648,151.3975968,97.3195144,-20.8491308,103.2457721,97.3238184,-20.8491308,151.3931009,40.9923581,-20.8490968,167.5286749,41.2323107,-20.8491648,151.3975968,38.0655317,-20.8491648,151.4361018,41.2323107,-20.8491648,151.3975968,97.3238184,-20.8491308,151.3931009,97.3195144,-20.8491308,103.2457721,156.5734877,-20.8491648,167.1765273,40.9923581,-20.8490968,167.5286749,38.0655317,-20.8491648,151.4361018,38.082757,-20.8491308,167.1765614,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.0874266f,0.3320678f,0.0173401f,0.3319907f,0.0173307f,0.3092248f,0.0874266f,0.3320678f,0.0173307f,0.3092248f,0.1918353f,0.3092248f,0.0874266f,0.3320678f,0.0173307f,0.3092248f,0.0173401f,0.3319907f,0.2170581f,0.7873824f,0.1899526f,0.8822955f,0.2169005f,0.8863817f,0.0873172f,0.3781621f,0.0874266f,0.3320678f,0.1918353f,0.3092248f,0.0874266f,0.3320678f,0.1918353f,0.3092248f,0.0173307f,0.3092248f,0.189867f,0.7873181f,0.1899526f,0.8822955f,0.2170581f,0.7873824f,0.1899526f,0.8822955f,0.1934122f,0.8864504f,0.2169005f,0.8863817f,0.1676163f,0.4646956f,0.0873172f,0.3781621f,0.1918353f,0.3092248f,0.0873172f,0.3781621f,0.1918353f,0.3092248f,0.0874266f,0.3320678f,0.2169005f,0.8863817f,0.1899526f,0.8822955f,0.2170581f,0.7873824f,0.1899526f,0.8822955f,0.189867f,0.7873181f,0.2170581f,0.7873824f,0.189867f,0.7873181f,0.169463f,0.8822955f,0.1899526f,0.8822955f,0.1899526f,0.8822955f,0.169463f,0.8864504f,0.1899526f,0.8864504f,0.169463f,0.8864504f,0.1900147f,0.9174516f,0.1899526f,0.8864504f,0.1918353f,0.4643772f,0.1676163f,0.4646956f,0.1918353f,0.3092248f,0.1478498f,0.4649799f,0.0873172f,0.3781621f,0.1676163f,0.4646956f,0.147571f,0.5933741f,0.1918353f,0.3092248f,0.0873172f,0.3781621f,0.1934122f,0.8864504f,0.1899526f,0.8822955f,0.2169005f,0.8863817f,0.189867f,0.7873181f,0.1899526f,0.8822955f,0.169463f,0.8822955f,0.1899526f,0.8822955f,0.169463f,0.8822955f,0.169463f,0.8864504f,0.189867f,0.7873181f,0.1693964f,0.7873801f,0.169463f,0.8822955f,0.169463f,0.8864504f,0.169463f,0.9174516f,0.1900147f,0.9174516f,0.147571f,0.5933741f,0.0873172f,0.3781621f,0.1478498f,0.4649799f,0.147571f,0.5933741f,0.0873172f,0.3781621f,0.0173947f,0.4643348f,0.1918353f,0.5933741f,0.1918353f,0.3092248f,0.147571f,0.5933741f,0.1899526f,0.8864504f,0.1900147f,0.9174516f,0.169463f,0.8864504f,0.1899526f,0.8822955f,0.1899526f,0.8864504f,0.169463f,0.8864504f,0.1899526f,0.8822955f,0.169463f,0.8864504f,0.169463f,0.8822955f,0.189867f,0.7873181f,0.169463f,0.8822955f,0.1693964f,0.7873801f,0.147571f,0.5933741f,0.0173947f,0.4643348f,0.0873172f,0.3781621f,0.147571f,0.5933741f,0.0173947f,0.4643348f,0.1406497f,0.5932711f,0.0173947f,0.4643348f,0.0873172f,0.3781621f,0.0173627f,0.378151f,0.169463f,0.8864504f,0.1900147f,0.9174516f,0.169463f,0.9174516f,0.0173947f,0.4643348f,0.0173627f,0.378151f,0.0873172f,0.3781621f,0.147571f,0.5933742f,0.1406497f,0.5932711f,0.0173947f,0.4643348f,0.1411897f,0.6364652f,0.147571f,0.5933741f,0.1406497f,0.5932711f,0.1406497f,0.5932711f,0.0173947f,0.4643348f,0.0174334f,0.593259f,0.1411897f,0.6364652f,0.1406497f,0.5932711f,0.147571f,0.5933741f,0.1406497f,0.5932711f,0.0174334f,0.593259f,0.0173947f,0.4643348f,0.1411897f,0.6364652f,0.147571f,0.6355223f,0.147571f,0.5933741f,0.1411897f,0.6364652f,0.147571f,0.5933741f,0.147571f,0.6355223f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,3,13,5,14,13,15,14,16,15,17,16,18,17,19,18,20,19,21,20,22,21,23,22,24,12,25,5,26,23,27,14,28,13,29,24,30,25,31,26,32,27,33,28,34,29,35,30,36,31,37,32,38,33,39,34,40,35,41,36,42,37,43,38,44,39,45,22,46,5,47,40,48,12,49,22,50,41,51,14,52,23,53,42,54,43,55,44,56,45,57,46,58,47,59,48,60,49,61,50,62,51,63,52,64,53,65,36,66,54,67,37,68,55,69,12,70,40,71,56,72,57,73,58,74,59,75,14,76,41,77,60,78,61,79,62,80,63,81,64,82,65,83,66,84,67,85,68,86,69,87,70,88,71,89,72,90,73,91,74,92,75,93,76,94,77,95,78,96,79,97,80,98,62,99,61,100,81,101,82,102,83,103,84,104,85,105,86,106,87,107,88,108,89,109,90,110,91,111,92,112,93,113,94,114,95,115,96,116,97,117,98,118,99,119,88,120,100,121,89,122,101,123,102,124,103,125,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID642(GL2 gl){
double[] positionsArray = {
47.9127721,-18.2021301,144.5462841,62.1069594,-18.2021301,135.6318646,47.9127721,-18.2021301,135.6318646,62.1069594,-18.2021301,144.5462841,63.4115874,-21.1044581,145.3656344,62.1069594,-18.2021301,144.5462841,47.9127721,-18.2021301,144.5462841,62.1069594,-18.2021301,135.6318646,63.4115874,-21.1044581,145.3656344,63.4115874,-21.1044581,134.8125228,62.1069594,-18.2021301,144.5462841,62.1069594,-18.2021301,135.6318646,46.6081535,-21.1044581,134.8125143,47.9127721,-18.2021301,135.6318646,47.9127721,-18.2021301,135.6318646,46.6081488,-21.1044581,145.3656344,47.9127721,-18.2021301,144.5462841,46.6081488,-21.1044581,145.3656344,63.4115874,-21.1044581,134.8125228,46.6081535,-21.1044581,134.8125143,62.1069594,-18.2021301,135.6318646,47.9127721,-18.2021301,135.6318646,46.6081535,-21.1044581,134.8125143,46.6081488,-21.1044581,145.3656344,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.4262843f,0.5277209f,0.5073442f,0.4466608f,0.4262843f,0.4466609f,0.5073442f,0.5277207f,0.5147947f,0.5351712f,0.5073442f,0.5277207f,0.4262843f,0.5277209f,0.5073442f,0.4466608f,0.5147947f,0.5351712f,0.5147947f,0.4392104f,0.5073442f,0.5277207f,0.5073442f,0.4466608f,0.4188339f,0.4392104f,0.4262843f,0.4466609f,0.4262843f,0.4466609f,0.4188339f,0.5351712f,0.4262843f,0.5277209f,0.5147947f,0.5351712f,0.4262843f,0.5277209f,0.4188339f,0.5351712f,0.5147947f,0.4392104f,0.4188339f,0.4392104f,0.5073442f,0.4466608f,0.4262843f,0.4466609f,0.4188339f,0.4392104f,0.4188339f,0.5351712f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,4,4,5,5,6,6,7,7,8,8,9,9,8,8,7,7,10,10,11,11,12,12,13,13,14,14,15,15,16,16,4,17,6,18,17,19,18,20,19,21,20,22,21,23,22,24,23,25,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID650(GL2 gl){
double[] positionsArray = {
23.0122135,-18.2021301,80.2223559,33.3906328,-18.2021301,52.5248862,23.0122183,-18.2021301,52.5248819,33.3906281,-18.2021301,80.2223559,34.6952514,-21.1044581,81.0417062,33.3906281,-18.2021301,80.2223559,23.0122135,-18.2021301,80.2223559,33.3906281,-18.2021301,80.2223559,34.6952561,-21.1044581,51.7055359,33.3906328,-18.2021301,52.5248862,33.3906328,-18.2021301,52.5248862,21.707595,-21.1044581,51.7055359,23.0122183,-18.2021301,52.5248819,23.0122183,-18.2021301,52.5248819,21.7075902,-21.1044581,81.0416977,23.0122135,-18.2021301,80.2223559,33.3906281,-18.2021301,80.2223559,34.6952514,-21.1044581,81.0417062,34.6952561,-21.1044581,51.7055359,34.6952514,-21.1044581,81.0417062,23.0122135,-18.2021301,80.2223559,21.7075902,-21.1044581,81.0416977,34.6952561,-21.1044581,51.7055359,21.707595,-21.1044581,51.7055359,33.3906328,-18.2021301,52.5248862,23.0122183,-18.2021301,52.5248819,21.707595,-21.1044581,51.7055359,21.7075902,-21.1044581,81.0416977,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.6775676f,0.3635894f,0.4622256f,0.3106076f,0.4622257f,0.3635902f,0.6775674f,0.3106069f,0.6839377f,0.3039466f,0.6775674f,0.3106069f,0.6775676f,0.3635894f,0.6775674f,0.3106069f,0.4558553f,0.3039474f,0.4622255f,0.3106076f,0.4622255f,0.3106076f,0.4558555f,0.3702505f,0.4622257f,0.3635902f,0.4622257f,0.3635902f,0.6839379f,0.3702496f,0.6775676f,0.3635894f,0.6775674f,0.3106069f,0.6839377f,0.3039466f,0.4558553f,0.3039474f,0.6839377f,0.3039466f,0.6775676f,0.3635894f,0.6839379f,0.3702496f,0.4558553f,0.3039474f,0.4558555f,0.3702505f,0.4622255f,0.3106076f,0.4622257f,0.3635902f,0.4558555f,0.3702505f,0.6839379f,0.3702496f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID658(GL2 gl){
double[] positionsArray = {
161.248396,-18.2021301,52.5248862,171.6268201,-18.2021301,80.2223559,171.6268106,-18.2021301,52.5248819,161.2484055,-18.2021301,80.2223559,161.248396,-18.2021301,52.5248862,159.943768,-21.1044581,51.7055359,161.2484055,-18.2021301,80.2223559,171.6268201,-18.2021301,80.2223559,161.2484055,-18.2021301,80.2223559,159.9437775,-21.1044581,81.0417062,171.6268201,-18.2021301,80.2223559,172.9314386,-21.1044581,81.0416977,171.6268106,-18.2021301,52.5248819,172.9314386,-21.1044581,51.7055359,161.248396,-18.2021301,52.5248862,171.6268106,-18.2021301,52.5248819,172.9314386,-21.1044581,51.7055359,159.943768,-21.1044581,51.7055359,161.248396,-18.2021301,52.5248862,161.2484055,-18.2021301,80.2223559,159.943768,-21.1044581,51.7055359,159.9437775,-21.1044581,81.0417062,172.9314386,-21.1044581,81.0416977,171.6268201,-18.2021301,80.2223559,159.9437775,-21.1044581,81.0417062,171.6268106,-18.2021301,52.5248819,172.9314386,-21.1044581,81.0416977,172.9314386,-21.1044581,51.7055359,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.4622256f,0.3106076f,0.6775676f,0.3635894f,0.4622257f,0.3635902f,0.6775674f,0.3106069f,0.4622255f,0.3106076f,0.4558553f,0.3039474f,0.6775674f,0.3106069f,0.6775676f,0.3635894f,0.6775674f,0.3106069f,0.6839377f,0.3039466f,0.6775676f,0.3635894f,0.6839379f,0.3702496f,0.4622257f,0.3635902f,0.4558555f,0.3702505f,0.4622255f,0.3106076f,0.4622257f,0.3635902f,0.4558555f,0.3702505f,0.4558553f,0.3039474f,0.4622255f,0.3106076f,0.6775674f,0.3106069f,0.4558553f,0.3039474f,0.6839377f,0.3039466f,0.6839379f,0.3702496f,0.6775676f,0.3635894f,0.6839377f,0.3039466f,0.4622257f,0.3635902f,0.6839379f,0.3702496f,0.4558555f,0.3702505f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID666(GL2 gl){
double[] positionsArray = {
132.5320789,-18.2021301,144.5462841,146.7262568,-18.2021301,135.6318646,132.5320789,-18.2021301,135.6318646,146.7262568,-18.2021301,144.5462841,132.5320789,-18.2021301,144.5462841,131.2274509,-21.1044581,134.8125228,131.2274509,-21.1044581,145.3656344,132.5320789,-18.2021301,135.6318646,146.7262568,-18.2021301,144.5462841,132.5320789,-18.2021301,144.5462841,131.2274509,-21.1044581,145.3656344,146.7262568,-18.2021301,144.5462841,148.0308848,-21.1044581,145.3656344,146.7262568,-18.2021301,135.6318646,148.0308753,-21.1044581,134.8125143,132.5320789,-18.2021301,135.6318646,146.7262568,-18.2021301,135.6318646,148.0308753,-21.1044581,134.8125143,131.2274509,-21.1044581,134.8125228,132.5320789,-18.2021301,135.6318646,148.0308848,-21.1044581,145.3656344,146.7262568,-18.2021301,144.5462841,131.2274509,-21.1044581,145.3656344,146.7262568,-18.2021301,135.6318646,148.0308848,-21.1044581,145.3656344,148.0308753,-21.1044581,134.8125143,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.5073442f,0.5277207f,0.4262843f,0.4466609f,0.5073442f,0.4466608f,0.4262843f,0.5277208f,0.5073442f,0.5277207f,0.5147947f,0.4392104f,0.5147947f,0.5351712f,0.5073442f,0.4466608f,0.4262843f,0.5277209f,0.5073442f,0.5277207f,0.5147947f,0.5351712f,0.4262843f,0.5277209f,0.4188339f,0.5351712f,0.4262843f,0.4466609f,0.4188339f,0.4392104f,0.5073442f,0.4466608f,0.4262843f,0.4466609f,0.4188339f,0.4392104f,0.5147947f,0.4392104f,0.5073442f,0.4466608f,0.4188339f,0.5351712f,0.4262843f,0.5277209f,0.5147947f,0.5351712f,0.4262843f,0.4466609f,0.4188339f,0.5351712f,0.4188339f,0.4392104f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,4,4,5,5,6,6,5,5,4,4,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID674(GL2 gl){
double[] positionsArray = {
174.3149661,-264.0653698,36.51344,174.3149661,-314.504026,36.51344,174.3149661,-264.0653698,25.0453245,174.3149661,-264.0653698,36.51344,174.3149661,-264.0653698,25.0453245,160.3422859,-264.0653698,25.0453245,174.3149661,-310.1770024,25.0453245,174.3149661,-264.0653698,25.0453245,160.3422859,-310.1770024,25.0453245,160.3422859,-264.0653698,25.0453245,160.3422859,-264.0653698,36.5134442,174.3149661,-314.504026,29.3773208,174.3149661,-310.1770024,25.0453245,160.3422859,-264.0653698,25.0453245,160.3422859,-310.1770024,25.0453245,160.3422859,-314.504026,29.3773293,160.3422859,-314.504026,36.51344,160.3422859,-264.0653698,36.5134442,160.3422859,-314.504026,36.51344,174.3149661,-314.504026,29.3773208,174.3149661,-314.504026,36.51344,160.3422859,-314.504026,29.3773293,174.3149661,-310.1770024,25.0453245,174.3149661,-314.504026,29.3773208,160.3422859,-314.504026,29.3773293,160.3422859,-310.1770024,25.0453245,174.3149661,-310.1770024,25.0453245,160.3422859,-314.504026,29.3773293,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.2323682f,0.979561f,0.3694673f,0.979561f,0.2323682f,0.9363122f,0.2323682f,0.979561f,0.2323682f,0.9363122f,0.2031538f,0.9363954f,0.2323682f,0.9363122f,0.3694673f,0.979561f,0.3577056f,0.9363121f,0.2323682f,0.9363122f,0.357491f,0.9107442f,0.2327106f,0.9107442f,0.2027061f,0.9795327f,0.2323682f,0.979561f,0.2031538f,0.9363954f,0.3577056f,0.9363121f,0.3694673f,0.979561f,0.3694673f,0.952649f,0.2323682f,0.9363122f,0.3577056f,0.9363121f,0.357491f,0.9107442f,0.2692647f,0.8775924f,0.3511846f,0.8775924f,0.3588719f,0.8882703f,0.2692647f,0.8775924f,0.3588719f,0.9058597f,0.2692647f,0.9058597f,0.3905042f,0.9795334f,0.3694675f,0.9526497f,0.3694675f,0.9795617f,0.3900561f,0.9511263f,0.3577056f,0.9363121f,0.3694673f,0.952649f,0.3900561f,0.9511263f,0.3776433f,0.9338526f,0.3577056f,0.9363121f,0.2692647f,0.8775924f,0.3588719f,0.8882703f,0.3588719f,0.9058597f,0.3905039f,0.9795327f,0.3900561f,0.9511263f,0.3694673f,0.952649f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,2,6,1,7,6,8,7,9,8,10,9,11,10,12,3,13,5,14,6,15,1,16,11,17,7,18,12,19,8,20,13,21,14,22,15,23,13,24,16,25,17,26,18,27,19,28,20,29,21,30,22,31,23,32,24,33,25,34,26,35,13,36,15,37,16,38,18,39,27,40,19,41,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID682(GL2 gl){
double[] positionsArray = {
176.4337416,-493.8106999,146.1874711,176.0365386,-494.7449197,148.2810957,176.5719411,-496.0318942,98.7408782,176.5719411,-496.0318942,98.7408782,176.0365386,-494.7449197,148.2810957,176.4337416,-493.8106999,146.1874711,176.0519098,-498.7652358,96.5806661,176.0519098,-498.7652358,96.5806661,174.8736668,-496.5743754,148.8804857,174.8736668,-496.5743754,148.8804857,174.8711411,-501.4137164,96.6148369,174.8711411,-501.4137164,96.6148369,172.0450131,-497.6262694,148.9987595,174.8711411,-501.4137164,96.6148369,174.8736668,-496.5743754,148.8804857,174.8736668,-496.5743754,148.8804857,174.8711411,-501.4137164,96.6148369,172.0450131,-497.6262694,148.9987595,172.0450131,-497.6262694,148.9987595,172.0450131,-502.4699396,96.6459679,174.8711411,-501.4137164,96.6148369,174.8711411,-501.4137164,96.6148369,172.0450131,-502.4699396,96.6459679,172.0450131,-497.6262694,148.9987595,102.8752957,-497.6585638,149.0121962,102.8752957,-497.6585638,149.0121962,102.8752957,-497.6585638,149.0121962,102.8531327,-502.4699438,96.6459679,172.0450131,-502.4699396,96.6459679,172.0450131,-502.4699396,96.6459679,102.8531327,-502.4699438,96.6459679,102.8752957,-497.6585638,149.0121962,102.8752957,-497.6585638,149.0121962,100.8883253,-497.8327809,147.13298,102.8531327,-502.4699438,96.6459679,102.8531327,-502.4699438,96.6459679,100.8883253,-497.8327809,147.13298,102.8752957,-497.6585638,149.0121962,100.7893722,-502.3002728,98.4632882,100.7893722,-502.3002728,98.4632882,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(0.2627451, 0.2627451, 0.2627451, 0.6);
int[] indices = {
0,1,2,3,4,5,1,6,2,3,7,4,1,8,6,7,9,4,8,10,6,7,11,9,12,13,14,15,16,17,18,19,20,21,22,23,24,19,18,23,22,25,26,27,28,29,30,31,32,33,34,35,36,37,33,38,34,35,39,36,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 60, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID690(GL2 gl){
double[] positionsArray = {
18.6368652,-494.7449197,148.2810957,18.1014579,-496.0318942,98.7408782,18.6214939,-498.7652358,96.5806661,18.6214939,-498.7652358,96.5806661,18.1014579,-496.0318942,98.7408782,18.6368652,-494.7449197,148.2810957,19.799737,-496.5743754,148.8804857,19.799737,-496.5743754,148.8804857,18.2396669,-493.8106999,146.1874711,18.2396669,-493.8106999,146.1874711,19.8022626,-501.4137164,96.6148369,19.8022626,-501.4137164,96.6148369,22.6283954,-497.6262694,148.9987595,19.799737,-496.5743754,148.8804857,19.8022626,-501.4137164,96.6148369,19.8022626,-501.4137164,96.6148369,19.799737,-496.5743754,148.8804857,22.6283954,-497.6262694,148.9987595,22.6283954,-497.6262694,148.9987595,19.8022626,-501.4137164,96.6148369,22.6283859,-502.4699396,96.6459679,22.6283859,-502.4699396,96.6459679,19.8022626,-501.4137164,96.6148369,22.6283954,-497.6262694,148.9987595,91.798108,-497.6585638,149.0121962,91.798108,-497.6585638,149.0121962,91.798108,-497.6585638,149.0121962,22.6283859,-502.4699396,96.6459679,91.820271,-502.4699438,96.6459679,91.820271,-502.4699438,96.6459679,22.6283859,-502.4699396,96.6459679,91.798108,-497.6585638,149.0121962,91.798108,-497.6585638,149.0121962,91.820271,-502.4699438,96.6459679,93.7850784,-497.8327809,147.13298,93.7850784,-497.8327809,147.13298,91.820271,-502.4699438,96.6459679,91.798108,-497.6585638,149.0121962,93.8840363,-502.3002728,98.4632882,93.8840363,-502.3002728,98.4632882,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(0.2627451, 0.2627451, 0.2627451, 0.6);
int[] indices = {
0,1,2,3,4,5,0,2,6,7,3,5,8,1,0,5,4,9,6,2,10,11,3,7,12,13,14,15,16,17,18,19,20,21,22,23,24,18,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,34,33,38,39,36,35,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 60, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID696(GL2 gl){
double[] positionsArray = {
136.0972007,-488.1742457,115.1000314,128.7471811,-486.5102318,114.4936846,136.0972007,-490.2309466,114.7369676,144.4529741,-488.3392346,114.0476418,136.0972007,-488.1742457,115.1000314,128.7471811,-487.2245167,112.5289435,128.7471811,-486.5102318,114.4936846,136.0972007,-490.2309466,114.7369676,128.7471811,-486.5102318,114.4936846,127.7414273,-488.3392346,114.0476418,136.0972007,-490.2309466,114.7369676,143.4472203,-487.2245167,112.5289435,144.4529741,-488.3392346,114.0476418,144.4529741,-488.3392346,114.0476418,143.4472203,-486.5102318,114.4936846,136.0972007,-488.1742457,115.1000314,128.7471811,-486.5102318,114.4936846,128.7471811,-487.2245167,112.5289435,123.3665945,-482.6783428,110.8723699,136.0972007,-488.1742457,115.1000314,136.0972007,-488.8885306,113.1352903,128.7471811,-487.2245167,112.5289435,123.3665945,-481.9640579,112.837111,136.0972007,-490.2309466,114.7369676,127.7414273,-488.3392346,114.0476418,136.0972007,-488.8885306,113.1352903,148.8278164,-482.6783428,110.8723699,143.4472203,-487.2245167,112.5289435,150.5698208,-483.1709811,112.1643895,136.0972007,-488.1742457,115.1000314,143.4472203,-486.5102318,114.4936846,136.0972007,-488.8885306,113.1352903,128.7471811,-487.2245167,112.5289435,121.6245806,-483.1709769,112.1643895,123.3665945,-482.6783428,110.8723699,128.7471811,-486.5102318,114.4936846,123.3665945,-482.6783428,110.8723699,123.3665945,-481.9640579,112.837111,127.7414273,-488.3392346,114.0476418,128.7471811,-487.2245167,112.5289435,136.0972007,-488.8885306,113.1352903,127.7414273,-488.3392346,114.0476418,123.3665945,-481.9640579,112.837111,121.6245806,-483.1709769,112.1643895,148.8278164,-481.9640579,112.837111,148.8278164,-482.6783428,110.8723699,143.4472203,-487.2245167,112.5289435,150.5698208,-483.1709811,112.1643895,144.4529741,-488.3392346,114.0476418,148.8278164,-482.6783428,110.8723699,143.4472203,-487.2245167,112.5289435,150.5698208,-483.1709811,112.1643895,148.8278164,-481.9640579,112.837111,143.4472203,-486.5102318,114.4936846,119.3856539,-476.1110114,109.5918115,121.6245806,-483.1709769,112.1643895,121.3971521,-476.4681549,108.6094409,123.3665945,-481.9640579,112.837111,123.3665945,-482.6783428,110.8723699,121.3971615,-475.7538679,110.574182,150.7972493,-475.7538679,110.574182,148.8278164,-482.6783428,110.8723699,148.8278164,-481.9640579,112.837111,143.4472203,-486.5102318,114.4936846,148.8278164,-481.9640579,112.837111,143.4472203,-487.2245167,112.5289435,150.7972493,-476.4681549,108.6094409,152.8087475,-476.1110114,109.5918115,121.6245806,-483.1709769,112.1643895,121.3971615,-475.7538679,110.574182,119.3856539,-476.1110114,109.5918115,123.3665945,-482.6783428,110.8723699,119.3856539,-476.1110114,109.5918115,121.3971521,-476.4681549,108.6094409,121.3971615,-475.7538679,110.574182,123.3665945,-481.9640579,112.837111,121.3971521,-476.4681549,108.6094409,152.8087475,-476.1110114,109.5918115,150.7972493,-475.7538679,110.574182,148.8278164,-481.9640579,112.837111,150.7972493,-475.7538679,110.574182,150.7972493,-476.4681549,108.6094409,148.8278164,-482.6783428,110.8723699,152.8087475,-476.1110114,109.5918115,150.5698208,-483.1709811,112.1643895,150.7972493,-476.4681549,108.6094409,123.3665945,-469.5436822,108.3112531,121.6245806,-469.0510417,107.0192334,123.3665945,-470.257965,106.346512,121.3971615,-475.7538679,110.574182,121.3971521,-476.4681549,108.6094409,122.1745089,-473.5845399,108.9055739,150.5698303,-469.0510459,107.0192334,148.8278164,-469.5436822,108.3112531,150.7972493,-476.4681549,108.6094409,150.7972493,-475.7538679,110.574182,148.8278164,-470.257965,106.346512,122.1745089,-473.5845399,108.9055739,123.3665945,-469.5436822,108.3112531,121.3971615,-475.7538679,110.574182,123.3665945,-470.257965,106.346512,123.3665945,-469.5436822,108.3112531,121.6245806,-469.0510417,107.0192334,119.3856539,-476.1110114,109.5918115,123.3665945,-470.257965,106.346512,121.3971521,-476.4681549,108.6094409,121.6245806,-469.0510417,107.0192334,152.8087475,-476.1110114,109.5918115,148.8278164,-470.257965,106.346512,150.5698303,-469.0510459,107.0192334,150.7972493,-475.7538679,110.574182,150.5698303,-469.0510459,107.0192334,148.8278164,-469.5436822,108.3112531,148.8278164,-469.5436822,108.3112531,148.8278164,-470.257965,106.346512,150.7972493,-476.4681549,108.6094409,123.3665945,-469.5436822,108.3112531,123.3665945,-470.257965,106.346512,128.7471811,-465.7117911,104.6899383,128.7471811,-464.9975041,106.6546794,127.7414273,-463.8827861,105.1359812,143.4472298,-465.7117911,104.6899383,144.4529741,-463.8827903,105.1359812,148.8278164,-469.5436822,108.3112531,143.4472298,-464.9975083,106.6546794,148.8278164,-470.257965,106.346512,128.7471811,-465.7117911,104.6899383,123.3665945,-470.257965,106.346512,127.7414273,-463.8827861,105.1359812,123.3665945,-469.5436822,108.3112531,128.7471811,-465.7117911,104.6899383,128.7471811,-464.9975041,106.6546794,128.7471811,-464.9975041,106.6546794,127.7414273,-463.8827861,105.1359812,121.6245806,-469.0510417,107.0192334,143.4472298,-464.9975083,106.6546794,143.4472298,-465.7117911,104.6899383,148.8278164,-470.257965,106.346512,150.5698303,-469.0510459,107.0192334,143.4472298,-465.7117911,104.6899383,144.4529741,-463.8827903,105.1359812,148.8278164,-469.5436822,108.3112531,144.4529741,-463.8827903,105.1359812,143.4472298,-464.9975083,106.6546794,136.0972102,-461.9910762,104.4466554,136.0972102,-463.3334922,106.0483326,128.7471811,-465.7117911,104.6899383,136.0972102,-464.0477792,104.0835915,128.7471811,-464.9975041,106.6546794,136.0972102,-463.3334922,106.0483326,143.4472298,-464.9975083,106.6546794,136.0972102,-463.3334922,106.0483326,143.4472298,-465.7117911,104.6899383,136.0972102,-464.0477792,104.0835915,136.0972102,-461.9910762,104.4466554,136.0972102,-463.3334922,106.0483326,136.0972102,-461.9910762,104.4466554,127.7414273,-463.8827861,105.1359812,136.0972102,-461.9910762,104.4466554,136.0972102,-464.0477792,104.0835915,128.7471811,-465.7117911,104.6899383,136.0972102,-463.3334922,106.0483326,136.0972102,-464.0477792,104.0835915,143.4472298,-465.7117911,104.6899383,143.4472298,-464.9975083,106.6546794,144.4529741,-463.8827903,105.1359812,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.5212797f,0.2606097f,0.5179667f,0.2482453f,0.525187f,0.2606097f,0.5214206f,0.2746659f,0.5212797f,0.2606097f,0.525187f,0.2606097f,0.5212797f,0.2606097f,0.5190136f,0.2482453f,0.5179667f,0.2482453f,0.525187f,0.2606097f,0.5179667f,0.2482453f,0.5214206f,0.2465534f,0.525187f,0.2606097f,0.5190136f,0.272974f,0.5214206f,0.2746659f,0.5214206f,0.2746659f,0.5179667f,0.272974f,0.5212797f,0.2606097f,0.5179667f,0.2482453f,0.5190136f,0.2482453f,0.5099624f,0.239194f,0.5212797f,0.2606097f,0.5223267f,0.2606097f,0.5190136f,0.2482453f,0.5179667f,0.2482453f,0.5089154f,0.239194f,0.5214206f,0.2465534f,0.525187f,0.2606097f,0.5214206f,0.2465534f,0.5223267f,0.2606097f,0.5099624f,0.2820252f,0.5214206f,0.2746659f,0.5190136f,0.272974f,0.525187f,0.2606097f,0.5223267f,0.2606097f,0.5190136f,0.272974f,0.5111308f,0.2849557f,0.5179667f,0.272974f,0.5214206f,0.2746659f,0.5212797f,0.2606097f,0.5179667f,0.272974f,0.5223267f,0.2606097f,0.5190136f,0.2482453f,0.5111308f,0.2362636f,0.5099624f,0.239194f,0.5179667f,0.2482453f,0.5099624f,0.239194f,0.5089154f,0.239194f,0.5214206f,0.2465534f,0.5190136f,0.2482453f,0.5223267f,0.2606097f,0.5214206f,0.2465534f,0.5089154f,0.239194f,0.5111308f,0.2362636f,0.5089154f,0.2820252f,0.5099624f,0.2820252f,0.5190136f,0.272974f,0.5111308f,0.2849557f,0.5214206f,0.2746659f,0.5099624f,0.2820252f,0.5179667f,0.272974f,0.5190136f,0.272974f,0.5223267f,0.2606097f,0.5111308f,0.2849557f,0.5089154f,0.2820252f,0.5179667f,0.272974f,0.5099624f,0.239194f,0.5111308f,0.2362636f,0.4970745f,0.2324972f,0.5190136f,0.2482453f,0.5214206f,0.2465534f,0.5111308f,0.2362636f,0.497598f,0.235881f,0.5089154f,0.239194f,0.5099624f,0.239194f,0.5089154f,0.239194f,0.4965511f,0.235881f,0.5111308f,0.2362636f,0.4965511f,0.2853383f,0.5099624f,0.2820252f,0.5089154f,0.2820252f,0.5179667f,0.272974f,0.5190136f,0.272974f,0.497598f,0.2853383f,0.5111308f,0.2849557f,0.5099624f,0.2820252f,0.4970745f,0.2887221f,0.5089154f,0.2820252f,0.5111308f,0.2849557f,0.5111308f,0.2362636f,0.4965511f,0.235881f,0.4970745f,0.2324972f,0.5099624f,0.239194f,0.4970745f,0.2324972f,0.497598f,0.235881f,0.4965511f,0.235881f,0.5089154f,0.239194f,0.497598f,0.235881f,0.4970745f,0.2887221f,0.4965511f,0.2853383f,0.5089154f,0.2820252f,0.4965511f,0.2853383f,0.497598f,0.2853383f,0.5099624f,0.2820252f,0.4970745f,0.2887221f,0.5111308f,0.2849557f,0.497598f,0.2853383f,0.4841868f,0.239194f,0.4970745f,0.2324972f,0.4965511f,0.235881f,0.4830183f,0.2362636f,0.497598f,0.235881f,0.4970745f,0.2324972f,0.485234f,0.239194f,0.4965514f,0.235881f,0.4975983f,0.235881f,0.4920842f,0.2371886f,0.4970745f,0.2887221f,0.4830183f,0.2849557f,0.4965511f,0.2853383f,0.4841868f,0.2820253f,0.497598f,0.2853383f,0.4965511f,0.2853383f,0.497598f,0.2853383f,0.4852337f,0.2820253f,0.4920836f,0.2371887f,0.4841865f,0.2391941f,0.4965508f,0.2358811f,0.4852334f,0.2391941f,0.4841868f,0.239194f,0.4830183f,0.2362636f,0.4970745f,0.2324972f,0.4852337f,0.239194f,0.497598f,0.235881f,0.4830183f,0.2362636f,0.4970745f,0.2887221f,0.4852337f,0.2820253f,0.4830183f,0.2849557f,0.4965511f,0.2853383f,0.4830183f,0.2849557f,0.4841868f,0.2820253f,0.4841868f,0.2820253f,0.4852337f,0.2820253f,0.497598f,0.2853383f,0.4841868f,0.239194f,0.4852337f,0.239194f,0.4761823f,0.2482453f,0.4751354f,0.2482453f,0.4830183f,0.2362636f,0.4841868f,0.239194f,0.4727284f,0.2465534f,0.4852337f,0.239194f,0.4830183f,0.2362636f,0.4830183f,0.2849557f,0.4852337f,0.2820253f,0.4761823f,0.272974f,0.4830183f,0.2849557f,0.4727284f,0.2746659f,0.4841868f,0.2820253f,0.4841868f,0.2820253f,0.4751354f,0.272974f,0.4852337f,0.2820253f,0.4852337f,0.239194f,0.4727284f,0.2465534f,0.4841868f,0.239194f,0.4761823f,0.2482453f,0.4751354f,0.2482453f,0.4751354f,0.2482453f,0.4727284f,0.2465534f,0.4830183f,0.2362636f,0.4751354f,0.272974f,0.4761823f,0.272974f,0.4852337f,0.2820253f,0.4830183f,0.2849557f,0.4761823f,0.272974f,0.4727284f,0.2746659f,0.4727284f,0.2746659f,0.4751354f,0.272974f,0.4689621f,0.2606097f,0.4761823f,0.2482453f,0.4727284f,0.2465534f,0.4718224f,0.2606097f,0.4761823f,0.2482453f,0.4728693f,0.2606097f,0.4751354f,0.2482453f,0.4751354f,0.2482453f,0.4718224f,0.2606097f,0.4727284f,0.2465534f,0.4751354f,0.272974f,0.4718224f,0.2606097f,0.4761823f,0.272974f,0.4727284f,0.2746659f,0.4761823f,0.272974f,0.4728693f,0.2606097f,0.4751354f,0.272974f,0.4727284f,0.2746659f,0.4689621f,0.2606097f,0.4718224f,0.2606097f,0.4689621f,0.2606097f,0.4727284f,0.2465534f,0.4689621f,0.2606097f,0.4728693f,0.2606097f,0.4761823f,0.2482453f,0.4718224f,0.2606097f,0.4728693f,0.2606097f,0.4761823f,0.272974f,0.4751354f,0.272974f,0.4689621f,0.2606097f,0.4718224f,0.2606097f,0.4727284f,0.2746659f,0.4728693f,0.2606097f,0.4689621f,0.2606097f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,0,4,2,5,4,6,5,7,6,8,7,9,8,10,9,11,10,12,11,13,12,14,13,15,14,16,15,17,16,18,17,19,18,20,19,21,20,22,21,23,8,24,22,25,9,26,23,27,24,28,25,29,26,30,12,31,11,32,23,33,25,34,27,35,28,36,14,37,13,38,29,39,30,40,31,41,32,42,33,43,34,44,35,45,36,46,37,47,38,48,39,49,40,50,41,51,42,52,43,53,44,54,45,55,46,56,47,57,48,58,49,59,30,60,50,61,31,62,51,63,52,64,53,65,34,66,33,67,54,68,39,69,38,70,55,71,56,72,57,73,58,74,42,75,59,76,43,77,60,78,61,79,62,80,63,81,64,80,65,82,66,83,47,84,49,85,67,86,52,87,51,88,68,89,69,90,70,91,71,92,72,93,73,94,74,95,75,96,76,97,77,98,78,99,79,100,80,101,81,102,82,103,83,104,84,105,85,106,86,107,70,108,69,109,87,110,73,111,72,112,88,113,89,114,90,115,89,114,88,113,91,116,77,117,92,118,78,119,93,120,94,121,95,122,83,98,85,123,96,124,97,125,98,126,99,127,98,126,97,125,100,128,101,129,102,130,103,131,104,132,105,133,106,134,107,135,108,136,109,137,110,138,111,139,112,140,113,141,114,142,115,143,116,144,117,145,118,146,119,147,102,148,101,149,120,150,104,151,106,152,109,153,108,154,121,155,111,156,122,157,112,158,123,159,124,160,125,161,126,146,127,162,128,163,129,164,130,165,131,166,132,167,133,168,134,169,135,170,136,171,137,172,138,173,139,174,140,175,141,141,142,176,143,177,144,178,126,179,128,180,145,181,146,182,147,183,146,182,145,181,148,184,132,185,149,186,133,187,150,188,151,189,152,190,140,191,139,192,153,193,143,194,142,195,154,196,155,197,156,198,157,199,158,200,159,201,160,202,161,203,162,204,163,205,164,206,156,207,155,208,165,209,159,210,158,211,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID704(GL2 gl){
double[] positionsArray = {
40.3584187,-258.94758,126.6156054,40.3584281,-303.6907026,122.2683247,40.3584281,-303.6907026,126.6156054,40.3584187,-258.94758,122.2683247,40.3584281,-303.6907026,126.6156054,40.3584281,-303.6907026,122.2683247,45.326625,-303.6907026,126.6156054,45.3266155,-258.94758,126.6156054,40.3584187,-258.94758,126.6156054,40.3584281,-303.6907026,126.6156054,40.3584187,-258.94758,126.6156054,45.3266155,-258.94758,122.2683247,40.3584187,-258.94758,122.2683247,45.326625,-303.6907026,122.2683247,40.3584281,-303.6907026,122.2683247,40.3584187,-258.94758,122.2683247,45.326625,-303.6907026,126.6156054,45.326625,-303.6907026,122.2683247,45.3266155,-258.94758,126.6156054,45.3266155,-258.94758,122.2683247,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.558511f,0.2747721f,0.6851965f,0.2577728f,0.6851965f,0.2747717f,0.558511f,0.2577732f,0.6851965f,0.2747717f,0.6851965f,0.2577728f,0.7017046f,0.2746334f,0.5583518f,0.2921719f,0.558511f,0.2747721f,0.6851965f,0.2747717f,0.558511f,0.2747721f,0.5420029f,0.2573169f,0.558511f,0.2577732f,0.6850584f,0.2397785f,0.6851965f,0.2577728f,0.558511f,0.2577732f,0.6850584f,0.2918741f,0.5583518f,0.2921719f,0.6851965f,0.2747717f,0.7017046f,0.2746334f,0.6851965f,0.2577728f,0.7017046f,0.2576137f,0.5414084f,0.2749312f,0.5420029f,0.2573169f,0.558511f,0.2747721f,0.6850584f,0.2397785f,0.558511f,0.2577732f,0.5583518f,0.2403736f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,7,17,9,18,6,19,5,20,17,21,18,22,11,23,10,24,13,25,15,26,19,27,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID712(GL2 gl){
double[] positionsArray = {
40.3584187,-281.9404405,145.437927,40.3584281,-303.6907026,141.0906463,40.3584281,-303.6907026,145.437927,40.3584187,-281.9404405,141.0906463,40.3584281,-303.6907026,145.437927,40.3584281,-303.6907026,141.0906463,45.326625,-303.6907026,145.437927,45.3266155,-281.9404405,145.437927,40.3584187,-281.9404405,145.437927,40.3584281,-303.6907026,145.437927,40.3584187,-281.9404405,145.437927,45.3266155,-281.9404405,141.0906463,40.3584187,-281.9404405,141.0906463,45.326625,-303.6907026,141.0906463,40.3584281,-303.6907026,141.0906463,40.3584187,-281.9404405,141.0906463,45.326625,-303.6907026,145.437927,45.326625,-303.6907026,141.0906463,45.3266155,-281.9404405,145.437927,45.3266155,-281.9404405,141.0906463,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.558511f,0.2747721f,0.6851965f,0.2577728f,0.6851965f,0.2747717f,0.558511f,0.2577732f,0.6851965f,0.2747717f,0.6851965f,0.2577728f,0.7017046f,0.2746334f,0.5583518f,0.2921719f,0.558511f,0.2747721f,0.6851965f,0.2747717f,0.558511f,0.2747721f,0.5420029f,0.2573169f,0.558511f,0.2577732f,0.6850584f,0.2397785f,0.6851965f,0.2577728f,0.558511f,0.2577732f,0.6850584f,0.2918741f,0.5583518f,0.2921719f,0.6851965f,0.2747717f,0.7017046f,0.2746334f,0.6851965f,0.2577728f,0.7017046f,0.2576137f,0.5414084f,0.2749312f,0.5420029f,0.2573169f,0.558511f,0.2747721f,0.6850584f,0.2397785f,0.558511f,0.2577732f,0.5583518f,0.2403736f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,7,17,9,18,6,19,5,20,17,21,18,22,11,23,10,24,13,25,15,26,19,27,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID720(GL2 gl){
double[] positionsArray = {
154.2978118,-258.94758,122.2683247,154.2977929,-303.6907026,126.6156054,154.2977929,-303.6907026,122.2683247,154.2978118,-258.94758,126.6156054,154.2978118,-258.94758,126.6156054,149.3296102,-258.94758,126.6156054,154.2977929,-303.6907026,126.6156054,149.3296008,-303.6907026,126.6156054,154.2977929,-303.6907026,122.2683247,154.2977929,-303.6907026,126.6156054,154.2978118,-258.94758,122.2683247,154.2977929,-303.6907026,122.2683247,149.3296008,-303.6907026,122.2683247,154.2978118,-258.94758,126.6156054,154.2978118,-258.94758,122.2683247,149.3296102,-258.94758,122.2683247,149.3296102,-258.94758,126.6156054,149.3296008,-303.6907026,126.6156054,149.3296008,-303.6907026,122.2683247,149.3296102,-258.94758,122.2683247,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.558511f,0.2577732f,0.6851965f,0.2747717f,0.6851965f,0.2577728f,0.558511f,0.2747721f,0.558511f,0.2747721f,0.5583518f,0.2921719f,0.6851965f,0.2747717f,0.7017046f,0.2746334f,0.6851965f,0.2577728f,0.6851965f,0.2747717f,0.558511f,0.2577732f,0.6851965f,0.2577728f,0.6850584f,0.2397785f,0.558511f,0.2747721f,0.558511f,0.2577732f,0.5420029f,0.2573169f,0.558511f,0.2747721f,0.5420029f,0.2573169f,0.5414084f,0.2749312f,0.6851965f,0.2747717f,0.5583518f,0.2921719f,0.6850584f,0.2918741f,0.7017046f,0.2746334f,0.7017046f,0.2576137f,0.6851965f,0.2577728f,0.558511f,0.2577732f,0.6850584f,0.2397785f,0.5583518f,0.2403736f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,13,16,15,17,16,18,6,19,5,20,17,21,7,22,18,23,8,24,10,25,12,26,19,27,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID728(GL2 gl){
double[] positionsArray = {
122.2453528,-487.835952,110.2695228,121.426296,-477.8241984,106.6213431,121.426296,-486.1652231,109.6607236,121.426296,-477.8241984,106.6213431,121.426296,-478.8610658,103.7693018,121.426296,-486.1652231,109.6607236,121.426296,-486.1652231,109.6607236,121.426296,-487.2020905,106.8086823,122.2453528,-487.835952,110.2695228,122.2453528,-487.835952,110.2695228,151.6024483,-477.8241984,106.6213431,121.426296,-477.8241984,106.6213431,125.71522,-489.7890229,110.9812005,149.290903,-489.0969856,110.7290279,151.6024483,-486.1652231,109.6607236,121.426296,-477.8241984,106.6213431,151.6024483,-478.8610658,103.7693018,121.426296,-478.8610658,103.7693018,121.426296,-487.2020905,106.8086823,122.2453528,-488.8728193,107.4174729,122.2453528,-487.835952,110.2695228,151.6024483,-486.1652231,109.6607236,149.290903,-489.0969856,110.7290279,150.7833916,-487.835952,110.2695228,151.6024483,-477.8241984,106.6213431,151.6024483,-486.1652231,109.6607236,151.6024483,-487.2020905,106.8086823,151.6024483,-477.8241984,106.6213431,125.71522,-489.7890229,110.9812005,122.2453528,-487.835952,110.2695228,123.7378413,-489.0969856,110.7290279,149.290903,-489.0969856,110.7290279,125.71522,-489.7890229,110.9812005,147.3135243,-489.7890229,110.9812005,123.7378413,-489.0969856,110.7290279,149.290903,-489.0969856,110.7290279,149.290903,-490.1338508,107.876978,150.7833916,-487.835952,110.2695228,151.6024483,-486.1652231,109.6607236,150.7833916,-487.835952,110.2695228,150.7833916,-488.8728193,107.4174729,150.7833916,-488.8728193,107.4174729,151.6024483,-487.2020905,106.8086823,151.6024483,-478.8610658,103.7693018,125.71522,-489.7890229,110.9812005,123.7378413,-489.0969856,110.7290279,123.7378413,-490.1338508,107.876978,125.71522,-489.7890229,110.9812005,125.71522,-490.8258903,108.1291506,147.3135243,-489.7890229,110.9812005,147.3135243,-489.7890229,110.9812005,147.3135243,-490.8258903,108.1291506,149.290903,-489.0969856,110.7290279,122.2453528,-488.8728193,107.4174729,147.3135243,-490.8258903,108.1291506,149.290903,-490.1338508,107.876978,123.7378413,-490.1338508,107.876978,125.71522,-490.8258903,108.1291506,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.169304f,0.2612188f,0.172863f,0.2168586f,0.172863f,0.2538161f,0.172863f,0.2168586f,0.1859751f,0.205064f,0.172863f,0.2538161f,0.172863f,0.2538161f,0.1859751f,0.2568045f,0.169304f,0.2612188f,0.169304f,0.2612188f,0.0417419f,0.2168586f,0.172863f,0.2168586f,0.1542268f,0.2698725f,0.051786f,0.2668062f,0.0417419f,0.2538161f,0.172863f,0.2168585f,0.0286298f,0.205064f,0.1859751f,0.2050639f,0.1859751f,0.205064f,0.1859751f,0.2568045f,0.172863f,0.2538161f,0.1859751f,0.2568045f,0.1817043f,0.2671683f,0.169304f,0.2612188f,0.0417419f,0.2538161f,0.051786f,0.2668062f,0.0453009f,0.2612188f,0.0417419f,0.2168586f,0.0417419f,0.2538161f,0.0286298f,0.2568045f,0.0417419f,0.2168587f,0.0286298f,0.2050641f,0.1728631f,0.2168587f,0.1542268f,0.2698725f,0.169304f,0.2612188f,0.1628189f,0.2668062f,0.051786f,0.2668062f,0.1542268f,0.2698725f,0.0603781f,0.2698725f,0.1628189f,0.2668062f,0.169304f,0.2612188f,0.1817043f,0.2671683f,0.051786f,0.2668062f,0.0406827f,0.2749906f,0.0453009f,0.2612188f,0.0417419f,0.2538161f,0.0453009f,0.2612188f,0.0329006f,0.2671683f,0.0417419f,0.2538161f,0.0329006f,0.2671683f,0.0286298f,0.2568045f,0.0417419f,0.2168586f,0.0286298f,0.2568045f,0.0286298f,0.205064f,0.1542268f,0.2698725f,0.1628189f,0.2668062f,0.1739222f,0.2749906f,0.1542268f,0.2698725f,0.1636117f,0.2792834f,0.0603781f,0.2698725f,0.0603781f,0.2698725f,0.0509932f,0.2792834f,0.051786f,0.2668062f,0.1628189f,0.2668062f,0.1817043f,0.2671683f,0.1739222f,0.2749906f,0.051786f,0.2668062f,0.0509932f,0.2792834f,0.0406827f,0.2749906f,0.0453009f,0.2612188f,0.0406827f,0.2749906f,0.0329006f,0.2671683f,0.1542268f,0.2698725f,0.1739222f,0.2749906f,0.1636117f,0.2792834f,0.0603781f,0.2698725f,0.1636117f,0.2792834f,0.0509932f,0.2792834f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,10,10,9,9,12,12,10,10,12,12,13,13,10,10,13,13,14,14,15,15,16,16,17,17,4,18,7,19,6,20,18,21,19,22,20,23,21,24,22,25,23,26,24,27,25,28,26,29,27,30,16,31,15,32,28,33,29,34,30,35,31,36,32,37,33,38,34,39,20,40,19,41,35,42,36,43,37,44,38,45,39,46,40,47,25,48,41,49,26,50,24,51,42,52,43,53,44,54,45,55,46,56,47,57,48,58,49,59,50,60,51,61,52,62,45,63,53,64,46,65,35,66,54,67,36,68,39,69,55,70,40,71,47,72,56,73,48,74,50,75,57,76,51,77,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID736(GL2 gl){
double[] positionsArray = {
121.0550302,-473.9180205,108.1895563,151.0495651,-477.433236,109.830624,121.0550302,-477.433236,109.830624,151.0495651,-473.9180205,108.1895563,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.2278865f,0.2722142f,0.3277797f,0.2549106f,0.2278865f,0.2549106f,0.3277797f,0.2722142f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID744(GL2 gl){
double[] positionsArray = {
151.0495651,-477.0996987,110.5467211,121.0550302,-473.584479,108.9056533,121.0550302,-477.0996987,110.5467211,122.1745089,-473.5845399,108.9055739,151.0495651,-473.584479,108.9056533,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.3277757f,0.2549127f,0.2278825f,0.2722166f,0.2278824f,0.2549129f,0.2316108f,0.2722165f,0.3277757f,0.2722163f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,3,3,0,0,4,4,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID752(GL2 gl){
double[] positionsArray = {
121.0550302,-477.0996987,110.5467211,121.0550302,-473.9180205,108.1895563,121.0550302,-477.433236,109.830624,121.0550302,-473.584479,108.9056533,121.0550302,-473.584479,108.9056533,151.0495651,-473.9180205,108.1895563,121.0550302,-473.9180205,108.1895563,122.1745089,-473.5845399,108.9055739,151.0495651,-473.584479,108.9056533,151.0495651,-477.0996987,110.5467211,121.0550302,-477.433236,109.830624,151.0495651,-477.433236,109.830624,121.0550302,-477.0996987,110.5467211,151.0495651,-473.9180205,108.1895563,151.0495651,-477.0996987,110.5467211,151.0495651,-477.433236,109.830624,151.0495651,-473.584479,108.9056533,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,4,5,6,5,4,7,8,5,7,9,10,11,10,9,12,13,14,15,14,13,16,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 27, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID758(GL2 gl){
double[] positionsArray = {
135.0828768,-476.1261252,102.2799974,136.4294566,-479.6277579,103.5559577,134.2506528,-478.2902537,103.0685829,137.7760363,-476.1261252,102.2799974,138.6082603,-478.2902515,103.0685829,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,1,3,4,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 9, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID764(GL2 gl){
double[] positionsArray = {
138.6082603,-476.0295142,109.2870671,136.4294566,-479.6277579,103.5559577,138.6082603,-478.2902515,103.0685829,136.4294566,-477.3670184,109.7744419,137.7760363,-473.8653815,108.4984816,138.6082603,-476.0295142,109.2870671,138.6082603,-478.2902515,103.0685829,136.4294566,-479.6277579,103.5559577,134.2506528,-476.0295142,109.2870671,134.2506528,-478.2902537,103.0685829,136.4294566,-477.3670184,109.7744419,137.7760363,-473.8653815,108.4984816,138.6082603,-478.2902515,103.0685829,137.7760363,-476.1261252,102.2799974,134.2506528,-476.0295142,109.2870671,135.0828768,-476.1261252,102.2799974,134.2506528,-478.2902537,103.0685829,135.0828768,-473.8653815,108.4984816,137.7760363,-476.1261252,102.2799974,135.0828768,-476.1261252,102.2799974,137.7760363,-473.8653815,108.4984816,135.0828768,-473.8653815,108.4984816,135.0828768,-476.1261252,102.2799974,134.2506528,-476.0295142,109.2870671,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.5099892f,0.2755484f,0.5051011f,0.2511078f,0.5099892f,0.2511078f,0.5051011f,0.2755484f,0.4904367f,0.2755484f,0.4855486f,0.2755484f,0.4855486f,0.2511078f,0.505101f,0.2511078f,0.500213f,0.2755484f,0.500213f,0.2511078f,0.505101f,0.2755484f,0.4904367f,0.2755484f,0.4855486f,0.2511078f,0.4904367f,0.2511078f,0.500213f,0.2755484f,0.4953248f,0.2511078f,0.500213f,0.2511078f,0.4953248f,0.2755484f,0.4904367f,0.2511078f,0.4953248f,0.2511078f,0.4904367f,0.2755484f,0.4953248f,0.2755484f,0.4953248f,0.2511078f,0.500213f,0.2755484f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,4,4,5,5,6,6,7,7,8,8,9,9,8,8,7,7,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,18,18,17,17,20,20,21,21,22,22,23,23,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID772(GL2 gl){
double[] positionsArray = {
136.4294566,-477.3670184,109.7744419,135.0828768,-473.8653815,108.4984816,134.2506528,-476.0295142,109.2870671,137.7760363,-473.8653815,108.4984816,138.6082603,-476.0295142,109.2870671,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,3,0,4,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 9, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID778(GL2 gl){
double[] positionsArray = {
179.3303315,-415.809892,41.051568,179.3303315,-423.1060948,43.710233,179.3303315,-430.4022975,41.0515766,179.3303315,-415.809892,41.051568,174.3273672,-423.1060948,50.5607496,179.3303315,-423.1060948,43.710233,174.3273767,-411.4115179,46.2993728,179.3303315,-430.4022975,41.0515766,174.3273577,-434.8006631,46.2993813,179.3303315,-415.809892,41.051568,179.3303315,-430.4022975,41.0515766,179.3303126,-434.2845311,34.3196233,174.3273767,-405.1889741,35.5091901,178.5931539,-412.4393421,50.8429207,174.3273672,-423.1060948,50.5607496,174.3273767,-411.4115179,46.2993728,179.3303126,-434.2845311,34.3196233,174.3273577,-441.0232069,35.5092028,178.593135,-426.8106284,53.3798889,174.3273577,-434.8006631,46.2993813,174.3273672,-423.1060948,50.5607496,179.3303315,-411.9276669,34.3196147,179.3303315,-415.809892,41.051568,179.3303126,-434.2845311,34.3196233,178.5931539,-403.0591515,39.6511691,174.3273767,-411.4115179,46.2993728,174.3273767,-405.1889741,35.5091901,174.3273767,-405.1889741,35.5091901,179.3303315,-415.809892,41.051568,179.3303315,-411.9276669,34.3196147,178.5931539,-406.7636682,46.074989,178.5931539,-412.4393421,50.8429207,178.593135,-419.4015781,53.3798889,174.3273577,-438.8621446,23.2390652,179.3303126,-432.9362465,26.6643214,174.3273577,-434.8006631,46.2993813,178.593135,-439.4485299,46.075006,174.3273577,-441.0232069,35.5092028,178.593135,-426.8106284,53.3798889,178.593135,-433.7728644,50.8429292,179.3303126,-432.9362465,26.6643214,179.3303315,-411.9276669,34.3196147,179.3303126,-434.2845311,34.3196233,179.3303126,-426.9883284,21.6676759,179.3303315,-413.275943,26.6643171,178.5931539,-401.772581,32.3462862,178.5931539,-403.0591515,39.6511691,174.3273672,-407.3500449,23.2390567,174.3273577,-429.3286386,15.2302959,179.3303126,-426.9883284,21.6676759,174.3273577,-441.0232069,35.5092028,178.5931161,-444.4396256,32.3462905,174.3273577,-438.8621446,23.2390652,178.593135,-439.4485299,46.075006,178.593135,-443.153055,39.6511904,174.3273672,-407.3500449,23.2390567,179.3303315,-411.9276669,34.3196147,179.3303315,-413.275943,26.6643171,179.3303315,-413.275943,26.6643171,179.3303126,-426.9883284,21.6676759,179.3303315,-419.2238611,21.6676759,178.5931539,-403.0591515,25.0413906,174.3273767,-405.1889741,35.5091901,174.3273672,-407.3500449,23.2390567,178.5931539,-403.0591515,25.0413906,179.3303315,-419.2238611,21.6676759,174.3273577,-429.3286386,15.2302959,174.3273577,-438.8621446,23.2390652,178.5931161,-439.4485299,18.617575,178.5931161,-444.4396256,32.3462905,178.5931161,-443.153055,25.0413949,174.3273577,-416.8835424,15.2302959,179.3303315,-413.275943,26.6643171,179.3303315,-419.2238611,21.6676759,174.3273577,-416.8835424,15.2302959,178.5931539,-406.7636767,18.617575,174.3273577,-429.3286386,15.2302959,174.3273577,-429.3286386,15.2302959,178.5931161,-439.4485299,18.617575,178.5931161,-433.7728729,13.8496518,174.3273672,-407.3500449,23.2390567,174.3273577,-416.8835424,15.2302959,178.593135,-412.4393421,13.8496348,178.593135,-412.4393421,13.8496348,178.593135,-426.8106284,11.3126836,174.3273577,-416.8835424,15.2302959,178.593135,-419.4015781,11.3126836,178.593135,-426.8106284,11.3126836,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.6229104f,0.4766284f,0.598603f,0.4856121f,0.5742956f,0.4766285f,0.6229102f,0.4766286f,0.5986028f,0.5087603f,0.5986028f,0.4856123f,0.6375634f,0.494361f,0.5742957f,0.4766286f,0.5986031f,0.5087602f,0.5596425f,0.4943611f,0.5986031f,0.4856122f,0.6229104f,0.4766284f,0.5742956f,0.4766285f,0.5613618f,0.4538811f,0.658294f,0.4579006f,0.6375635f,0.4943607f,0.6229103f,0.4766284f,0.6341399f,0.5097141f,0.5986035f,0.5087605f,0.6375641f,0.4943612f,0.561362f,0.4538812f,0.5596426f,0.494361f,0.5389121f,0.4579008f,0.5742958f,0.4766286f,0.5862613f,0.5182861f,0.5596424f,0.4943609f,0.598603f,0.5087601f,0.635844f,0.4538811f,0.6229104f,0.4766284f,0.5613618f,0.4538811f,0.66539f,0.4718967f,0.6375639f,0.494361f,0.6582944f,0.4579009f,0.6582939f,0.4579005f,0.6358439f,0.453881f,0.6530479f,0.4936026f,0.6341394f,0.5097136f,0.6375636f,0.4943608f,0.63414f,0.5097141f,0.6109452f,0.5182865f,0.5986035f,0.5087605f,0.5461115f,0.4164397f,0.5613619f,0.4538811f,0.5389119f,0.4579007f,0.5658537f,0.4280137f,0.5596423f,0.4943609f,0.544158f,0.4936027f,0.5389119f,0.4579007f,0.6109446f,0.518286f,0.5862613f,0.5182861f,0.598603f,0.5087601f,0.5862611f,0.5182859f,0.5630663f,0.5097134f,0.5596421f,0.4943607f,0.5658536f,0.4280139f,0.635844f,0.4538813f,0.5613618f,0.4538814f,0.5856692f,0.4111301f,0.6313522f,0.4280139f,0.6653896f,0.4718964f,0.658294f,0.4579006f,0.6696757f,0.4472131f,0.6653899f,0.4718967f,0.6530482f,0.4936028f,0.6375639f,0.494361f,0.6582942f,0.4579007f,0.6358441f,0.4538811f,0.6510945f,0.4164397f,0.5778724f,0.3893779f,0.5658536f,0.4280136f,0.5461114f,0.4164396f,0.5856692f,0.4111299f,0.5389118f,0.4579007f,0.52753f,0.4472131f,0.5461114f,0.4164397f,0.5630665f,0.5097136f,0.5441579f,0.4936027f,0.5596423f,0.4943609f,0.5441585f,0.4936032f,0.5318168f,0.471897f,0.5389124f,0.4579011f,0.6510944f,0.4164396f,0.635844f,0.4538811f,0.6313522f,0.4280136f,0.6313522f,0.4280137f,0.5856692f,0.4111299f,0.6115366f,0.4111299f,0.6582942f,0.4579007f,0.6653898f,0.4225298f,0.669676f,0.4472132f,0.658294f,0.4579006f,0.6510944f,0.4164396f,0.6653896f,0.4225297f,0.6115366f,0.4111299f,0.5856692f,0.4111299f,0.5778725f,0.3893779f,0.5778721f,0.3893777f,0.5461111f,0.4164394f,0.5441576f,0.4008234f,0.5318164f,0.4718967f,0.5275302f,0.4472133f,0.538912f,0.4579008f,0.5275301f,0.4472132f,0.5318163f,0.4225298f,0.5461115f,0.4164397f,0.6510945f,0.4164397f,0.6313523f,0.4280137f,0.6193335f,0.3893779f,0.6313523f,0.4280137f,0.6115367f,0.41113f,0.6193335f,0.3893779f,0.6653893f,0.4225296f,0.6510941f,0.4164394f,0.6530476f,0.4008234f,0.6193334f,0.3893779f,0.6115366f,0.4111299f,0.5778725f,0.3893779f,0.5318161f,0.4225296f,0.5441577f,0.4008235f,0.5461113f,0.4164395f,0.5778726f,0.3893781f,0.5441581f,0.4008238f,0.5630667f,0.3847128f,0.6510938f,0.4164392f,0.6193328f,0.3893775f,0.6341388f,0.3847123f,0.6530485f,0.4008239f,0.651095f,0.41644f,0.63414f,0.384713f,0.5862613f,0.3761402f,0.6193334f,0.3893779f,0.5778725f,0.3893779f,0.5862613f,0.3761402f,0.5778725f,0.3893779f,0.5630665f,0.3847127f,0.6341394f,0.3847127f,0.6193334f,0.3893779f,0.6109446f,0.3761402f,0.6109446f,0.3761402f,0.6193334f,0.3893779f,0.5862613f,0.3761402f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,4,4,3,3,6,6,7,7,4,8,8,9,4,8,7,7,5,10,9,11,10,12,11,13,12,14,6,15,3,16,13,17,14,18,15,19,16,20,8,21,17,22,8,21,16,20,7,23,18,24,19,25,20,26,21,27,22,28,23,29,24,30,25,31,26,32,27,33,28,0,29,34,30,35,13,36,15,37,31,38,32,39,20,40,33,41,16,42,17,43,16,42,33,41,34,44,35,45,36,46,37,47,32,48,18,49,20,50,38,51,39,52,35,53,40,54,41,55,42,56,41,55,40,54,43,57,41,55,43,57,44,58,24,59,26,60,45,61,46,62,30,63,15,64,27,65,29,66,47,67,48,68,34,69,33,70,34,69,48,68,49,71,50,72,51,73,52,74,39,75,36,76,35,77,53,78,54,79,50,80,55,81,56,82,57,83,58,84,59,85,60,86,26,87,61,88,45,89,62,90,63,91,64,92,65,93,49,94,48,95,66,96,67,97,68,98,54,99,51,100,50,101,69,102,70,103,67,104,55,105,57,106,71,107,72,108,73,109,74,110,64,111,63,112,75,113,74,114,73,115,76,116,70,117,68,118,67,119,77,120,78,121,79,122,80,123,81,124,82,125,75,126,63,127,83,128,84,129,85,130,77,131,84,132,77,133,79,134,82,135,81,136,86,137,86,138,81,139,87,140,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID786(GL2 gl){
double[] positionsArray = {
178.5931539,-390.3352196,32.3462735,178.5931539,-392.3115396,21.1250726,176.2597388,-390.5239253,20.4736728,178.5931539,-390.3352196,32.3462735,178.5931539,-401.772581,32.3462862,178.5931539,-392.3115396,21.1250726,176.2597294,-396.5448695,10.0330874,178.5931539,-390.3352196,32.3462735,176.2597388,-390.5239253,20.4736728,176.2597388,-388.4328612,32.3462735,178.5931539,-403.0591515,39.6511691,178.5931539,-403.0591515,25.0413906,176.2597388,-390.5239253,20.4736728,176.2597294,-396.5448695,10.0330874,158.4566618,-396.544861,10.0330874,178.5931539,-392.3115396,21.1250726,178.5931539,-398.0021487,11.2573018,176.2597294,-396.5448695,10.0330874,176.2597388,-388.4328612,32.3462735,176.2597388,-390.5239253,20.4736728,158.4566713,-390.5239083,20.4736813,178.5931539,-392.3115396,43.5674743,178.5931539,-392.3115396,43.5674743,178.5931539,-398.0021487,11.2573018,158.4566618,-405.7694822,2.2838051,158.4566618,-396.544861,10.0330874,176.2597294,-405.7694907,2.2838051,176.2597388,-388.4328612,32.3462735,158.4566713,-390.5239083,20.4736813,158.4566807,-388.4328612,32.3462735,176.2597388,-390.5239083,44.2188656,178.5931539,-392.3115396,43.5674743,176.2597388,-388.4328612,32.3462735,178.5931539,-406.7636682,46.074989,178.5931539,-406.7636767,18.617575,158.4566618,-396.544861,10.0330874,158.4566618,-405.7694822,2.2838051,156.1232373,-406.7206572,3.9331835,176.2597294,-396.5448695,10.0330874,176.2597294,-405.7694907,2.2838051,158.4566618,-405.7694822,2.2838051,158.4566713,-390.5239083,20.4736813,158.4566618,-396.544861,10.0330874,156.1232467,-398.0021487,11.2573018,178.5931539,-398.0021487,11.2573018,178.5931539,-406.7206657,3.9331835,176.2597294,-405.7694907,2.2838051,158.4566807,-388.4328612,32.3462735,158.4566713,-390.5239083,20.4736813,156.1232467,-392.3115396,21.1250726,176.2597388,-390.5239083,44.2188656,178.5931539,-398.0021402,53.4352408,178.5931539,-398.0021402,53.4352408,178.5931539,-406.7206657,3.9331835,156.1232373,-417.4155026,0.036101,156.1232373,-406.7206572,3.9331835,158.4566523,-417.0851591,-1.8395048,156.1232467,-398.0021487,11.2573018,176.2597104,-417.0851676,-1.8395048,158.4566807,-388.4328612,32.3462735,156.1232467,-392.3115396,21.1250726,156.1232562,-390.3352111,32.3462735,176.2597388,-390.5239083,44.2188656,158.4566807,-388.4328612,32.3462735,158.4566807,-390.5239083,44.2188656,176.2597388,-396.5448525,54.6594553,178.5931539,-398.0021402,53.4352408,176.2597388,-390.5239083,44.2188656,178.5931539,-412.4393421,50.8429207,178.5931539,-406.7206657,3.9331835,178.5931539,-406.7636767,18.617575,178.593135,-412.4393421,13.8496348,156.1232373,-406.7206572,3.9331835,156.1232373,-417.4155026,0.036101,156.1232278,-439.4915579,3.933192,158.4566618,-405.7694822,2.2838051,158.4566523,-417.0851591,-1.8395048,156.1232373,-417.4155026,0.036101,156.1232467,-398.0021487,11.2573018,156.1232278,-439.4915579,3.933192,156.1232183,-448.2100663,11.2573189,156.1232373,-406.7206572,3.9331835,176.2597294,-405.7694907,2.2838051,176.2597104,-417.0851676,-1.8395048,158.4566523,-417.0851591,-1.8395048,156.1232467,-392.3115396,21.1250726,156.1232467,-398.0021487,11.2573018,156.1232183,-453.900684,21.1250812,178.5931539,-406.7206657,3.9331835,178.5931539,-417.4155111,0.036101,176.2597104,-417.0851676,-1.8395048,156.1232562,-390.3352111,32.3462735,156.1232467,-392.3115396,21.1250726,156.1232183,-455.8769955,32.3462905,158.4566807,-390.5239083,44.2188656,176.2597388,-396.5448525,54.6594553,178.5931539,-406.7206572,60.7593677,178.5931539,-406.7206572,60.7593677,178.5931539,-406.7206657,3.9331835,178.593135,-412.4393421,13.8496348,178.5931539,-417.4155111,0.036101,156.1232373,-417.4155026,0.036101,156.1232373,-428.7967124,0.0361095,156.1232278,-439.4915579,3.933192,156.1232373,-428.7967124,0.0361095,156.1232278,-439.4915579,3.933192,158.4566334,-440.4427328,2.2838136,156.1232183,-448.2100663,11.2573189,156.1232467,-398.0021487,11.2573018,156.1232183,-448.2100663,11.2573189,156.1232183,-453.900684,21.1250812,176.2597104,-429.1270559,-1.8395048,158.4566429,-429.1270559,-1.8394962,156.1232467,-392.3115396,21.1250726,156.1232183,-453.900684,21.1250812,156.1232183,-455.8769955,32.3462905,176.2597104,-429.1270559,-1.8395048,156.1232562,-390.3352111,32.3462735,156.1232183,-455.8769955,32.3462905,156.1232183,-453.900667,43.5674998,158.4566807,-390.5239083,44.2188656,156.1232562,-390.3352111,32.3462735,156.1232562,-392.3115396,43.5674743,176.2597388,-396.5448525,54.6594553,158.4566807,-390.5239083,44.2188656,158.4566807,-396.5448525,54.6594553,176.2597388,-396.5448525,54.6594553,176.2597294,-405.7694822,62.4087504,178.5931539,-406.7206572,60.7593677,178.5931539,-406.7206572,60.7593677,178.593135,-419.4015781,53.3798889,178.5931539,-412.4393421,50.8429207,178.593135,-412.4393421,13.8496348,178.593135,-419.4015781,11.3126836,178.5931539,-417.4155111,0.036101,158.4566429,-429.1270559,-1.8394962,156.1232278,-439.4915579,3.933192,156.1232373,-428.7967124,0.0361095,158.4566523,-417.0851591,-1.8395048,158.4566429,-429.1270559,-1.8394962,158.4566334,-440.4427328,2.2838136,158.4566334,-449.6673541,10.0331044,156.1232183,-448.2100663,11.2573189,156.1232183,-453.900684,21.1250812,158.4566334,-440.4427328,2.2838136,156.1232183,-455.8769955,32.3462905,156.1232183,-453.900684,21.1250812,158.456624,-455.6882982,20.4736898,178.5931539,-417.4155111,0.036101,178.5931539,-428.7967209,0.0361095,176.2597104,-429.1270559,-1.8395048,156.1232183,-453.900667,43.5674998,156.1232183,-455.8769955,32.3462905,158.456624,-457.7793454,32.3462905,156.1232562,-390.3352111,32.3462735,156.1232183,-453.900667,43.5674998,156.1232562,-392.3115396,43.5674743,158.4566807,-396.5448525,54.6594553,176.2597294,-405.7694822,62.4087504,158.4566713,-405.7694737,62.4087504,178.5931539,-417.4154941,64.6564629,178.5931539,-406.7206572,60.7593677,178.5931539,-417.4154941,64.6564629,178.593135,-419.4015781,53.3798889,178.5931539,-417.4155111,0.036101,178.593135,-419.4015781,11.3126836,178.5931539,-428.7967209,0.0361095,176.259701,-440.4427413,2.2838136,158.4566334,-449.6673541,10.0331044,158.4566334,-440.4427328,2.2838136,158.4566334,-449.6673541,10.0331044,176.2597104,-429.1270559,-1.8395048,158.456624,-455.6882982,20.4736898,176.259701,-440.4427413,2.2838136,158.456624,-455.6882982,44.2188954,156.1232183,-453.900667,43.5674998,158.456624,-457.7793454,32.3462905,156.1232562,-392.3115396,43.5674743,156.1232183,-453.900667,43.5674998,156.1232278,-448.2100663,53.4352664,158.4566807,-396.5448525,54.6594553,156.1232562,-392.3115396,43.5674743,156.1232467,-398.0021402,53.4352408,158.4566713,-405.7694737,62.4087504,176.2597294,-417.0851591,66.5320687,178.5931539,-417.4154941,64.6564629,176.2597294,-405.7694822,62.4087504,176.2597294,-417.0851591,66.5320687,178.593135,-426.8106284,53.3798889,178.5931539,-417.4154941,64.6564629,178.5931539,-428.7967124,64.6564629,178.593135,-419.4015781,53.3798889,178.593135,-419.4015781,11.3126836,178.593135,-426.8106284,11.3126836,178.5931539,-428.7967209,0.0361095,176.259701,-440.4427413,2.2838136,176.2596915,-449.6673541,10.0331044,158.4566334,-449.6673541,10.0331044,158.456624,-455.6882982,20.4736898,158.456624,-457.7793454,32.3462905,158.456624,-455.6882982,20.4736898,176.2596915,-455.6883152,20.4736898,178.5931539,-428.7967209,0.0361095,178.593135,-439.4915664,3.933192,176.259701,-440.4427413,2.2838136,158.456624,-455.6882982,44.2188954,158.456624,-457.7793454,32.3462905,176.2596915,-457.7793624,32.3462905,156.1232278,-448.2100663,53.4352664,156.1232562,-392.3115396,43.5674743,156.1232278,-448.2100663,53.4352664,156.1232467,-398.0021402,53.4352408,156.1232467,-398.0021402,53.4352408,156.1232373,-406.7206487,60.7593719,158.4566713,-405.7694737,62.4087504,176.2597294,-417.0851591,66.5320687,158.4566713,-405.7694737,62.4087504,158.4566618,-417.0851506,66.5320687,178.5931539,-428.7967124,64.6564629,178.593135,-426.8106284,53.3798889,178.5931539,-428.7967124,64.6564629,178.593135,-433.7728644,50.8429292,178.593135,-426.8106284,11.3126836,178.593135,-439.4915664,3.933192,178.5931539,-428.7967209,0.0361095,176.2596915,-449.6673541,10.0331044,176.2596915,-449.6673541,10.0331044,176.2596915,-455.6883152,20.4736898,158.456624,-455.6882982,44.2188954,176.2596915,-457.7793624,32.3462905,176.2596915,-455.6882982,44.2188954,158.4566429,-449.6673541,54.6594808,156.1232278,-448.2100663,53.4352664,158.456624,-455.6882982,44.2188954,156.1232467,-398.0021402,53.4352408,156.1232278,-448.2100663,53.4352664,156.1232373,-439.4915494,60.7593847,156.1232467,-398.0021402,53.4352408,156.1232373,-439.4915494,60.7593847,156.1232373,-406.7206487,60.7593719,158.4566618,-417.0851506,66.5320687,176.2597104,-429.1270474,66.5320687,158.4566523,-429.1270474,66.5320687,178.5931539,-428.7967124,64.6564629,176.2597294,-417.0851591,66.5320687,176.2597104,-429.1270474,66.5320687,178.5931539,-428.7967124,64.6564629,178.593135,-439.4915494,60.7593847,178.593135,-433.7728644,50.8429292,178.593135,-426.8106284,11.3126836,178.5931161,-433.7728729,13.8496518,178.593135,-439.4915664,3.933192,178.593135,-439.4915664,3.933192,178.593135,-448.2100833,11.2573189,176.2596915,-449.6673541,10.0331044,176.2596915,-455.6883152,20.4736898,176.2596915,-457.7793624,32.3462905,176.2596915,-455.6883152,20.4736898,178.593135,-453.900684,21.1250812,176.2596915,-455.6882982,44.2188954,176.2596915,-457.7793624,32.3462905,178.593135,-455.8770125,32.3462905,158.4566429,-449.6673541,54.6594808,156.1232373,-439.4915494,60.7593847,156.1232373,-406.7206487,60.7593719,156.1232373,-439.4915494,60.7593847,156.1232373,-428.7967039,64.6564629,158.4566618,-417.0851506,66.5320687,156.1232373,-406.7206487,60.7593719,156.1232373,-417.4154941,64.6564629,158.4566523,-429.1270474,66.5320687,176.2597104,-440.4427243,62.4087674,178.593135,-439.4915494,60.7593847,178.593135,-433.7728644,50.8429292,178.593135,-439.4915494,60.7593847,178.593135,-439.4485299,46.075006,178.5931161,-433.7728729,13.8496518,178.593135,-448.2100833,11.2573189,178.593135,-439.4915664,3.933192,178.593135,-448.2100833,11.2573189,178.593135,-453.900684,21.1250812,176.2596915,-455.6882982,44.2188954,178.593135,-455.8770125,32.3462905,178.593135,-453.900684,43.5674998,158.4566429,-449.6673541,54.6594808,176.2596915,-455.6882982,44.2188954,176.259701,-449.6673541,54.6594808,156.1232373,-439.4915494,60.7593847,158.4566429,-449.6673541,54.6594808,158.4566429,-440.4427243,62.4087674,156.1232373,-428.7967039,64.6564629,156.1232373,-417.4154941,64.6564629,158.4566523,-429.1270474,66.5320687,156.1232373,-417.4154941,64.6564629,156.1232373,-428.7967039,64.6564629,178.593135,-439.4915494,60.7593847,176.2597104,-429.1270474,66.5320687,176.2597104,-440.4427243,62.4087674,176.2597104,-440.4427243,62.4087674,158.4566523,-429.1270474,66.5320687,158.4566429,-440.4427243,62.4087674,178.593135,-448.2100663,53.4352621,178.5931161,-433.7728729,13.8496518,178.5931161,-439.4485299,18.617575,178.593135,-448.2100833,11.2573189,178.5931161,-439.4485299,18.617575,178.593135,-453.900684,21.1250812,178.593135,-448.2100833,11.2573189,178.5931161,-443.153055,25.0413949,178.593135,-455.8770125,32.3462905,178.593135,-453.900684,21.1250812,178.5931161,-444.4396256,32.3462905,178.593135,-453.900684,43.5674998,178.593135,-455.8770125,32.3462905,176.259701,-449.6673541,54.6594808,158.4566429,-440.4427243,62.4087674,158.4566429,-440.4427243,62.4087674,178.593135,-448.2100663,53.4352621,176.259701,-449.6673541,54.6594808,178.593135,-443.153055,39.6511904,178.5931161,-439.4485299,18.617575,178.5931161,-443.153055,25.0413949,178.593135,-453.900684,21.1250812,178.5931161,-443.153055,25.0413949,178.5931161,-444.4396256,32.3462905,178.593135,-455.8770125,32.3462905,178.593135,-443.153055,39.6511904,178.593135,-453.900684,43.5674998,178.5931161,-444.4396256,32.3462905,176.259701,-449.6673541,54.6594808,178.593135,-453.900684,43.5674998,178.593135,-448.2100663,53.4352621,176.2597104,-440.4427243,62.4087674,178.593135,-453.900684,43.5674998,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.3440712f,0.0931263f,0.3589684f,0.090459f,0.3598331f,0.0928716f,0.3440712f,0.0931263f,0.3440712f,0.0776902f,0.3589684f,0.090459f,0.3589684f,0.090459f,0.3736939f,0.0847456f,0.3598331f,0.0928716f,0.3440712f,0.0931263f,0.3598331f,0.0928716f,0.3440712f,0.0956937f,0.3440712f,0.0931263f,0.3343733f,0.0759538f,0.3440712f,0.0776902f,0.3589684f,0.090459f,0.3440712f,0.0776902f,0.3537691f,0.0759538f,0.6445233f,0.0093194f,0.6648391f,0.0093193f,0.6648397f,0.059454f,0.3589684f,0.090459f,0.3720687f,0.0827788f,0.3736939f,0.0847456f,0.6243397f,0.0093196f,0.6445233f,0.0093194f,0.6445238f,0.059454f,0.329174f,0.090459f,0.3440712f,0.0931263f,0.3440712f,0.0956937f,0.3440712f,0.0931263f,0.329174f,0.090459f,0.3343733f,0.0759538f,0.3589684f,0.090459f,0.3537691f,0.0759538f,0.3720687f,0.0827788f,0.6648391f,0.0093193f,0.6853614f,0.0594538f,0.6648397f,0.059454f,0.6445238f,0.059454f,0.6445233f,0.0093194f,0.6648397f,0.059454f,0.3736939f,0.0847456f,0.3720687f,0.0827788f,0.3839819f,0.0722958f,0.6243397f,0.0093196f,0.6445238f,0.059454f,0.6243403f,0.0594541f,0.3283093f,0.0928716f,0.329174f,0.090459f,0.3440712f,0.0956937f,0.329174f,0.090459f,0.3258451f,0.0709541f,0.3343733f,0.0759538f,0.3720687f,0.0827788f,0.3537691f,0.0759538f,0.3622973f,0.070954f,0.4694691f,0.0847456f,0.4797569f,0.0722958f,0.4775673f,0.0710121f,0.6648391f,0.0093193f,0.6853609f,0.0093192f,0.6853614f,0.0594538f,0.4556083f,0.0928716f,0.4694691f,0.0847456f,0.4678438f,0.0827788f,0.3720687f,0.0827788f,0.3817922f,0.0710121f,0.3839819f,0.0722958f,0.4398464f,0.0956937f,0.4556083f,0.0928716f,0.4547434f,0.090459f,0.9726241f,0.0093173f,0.9928077f,0.0093173f,0.992808f,0.0594519f,0.3160737f,0.0827788f,0.329174f,0.090459f,0.3283093f,0.0928716f,0.329174f,0.090459f,0.3160737f,0.0827788f,0.3258451f,0.0709541f,0.3720687f,0.0827788f,0.3622973f,0.070954f,0.3817922f,0.0710121f,0.4797569f,0.0722958f,0.482741f,0.0565781f,0.4775673f,0.0710121f,0.4694691f,0.0847456f,0.4775673f,0.0710121f,0.4678438f,0.0827788f,0.6853609f,0.0093192f,0.7060673f,0.0594537f,0.6853614f,0.0594538f,0.4547434f,0.090459f,0.4556083f,0.0928716f,0.4678438f,0.0827788f,0.3817922f,0.0710121f,0.3894559f,0.057024f,0.3839819f,0.0722958f,0.4398464f,0.0956937f,0.4547434f,0.090459f,0.4398464f,0.0931263f,0.9726241f,0.0093173f,0.992808f,0.0594519f,0.9726246f,0.0594521f,0.3144485f,0.0847456f,0.3160737f,0.0827788f,0.3283093f,0.0928716f,0.3160737f,0.0827788f,0.3195152f,0.0632941f,0.3817922f,0.0710121f,0.3622973f,0.070954f,0.3686272f,0.0632941f,0.4775673f,0.0710121f,0.482741f,0.0565781f,0.4775673f,0.0267838f,0.4797569f,0.0722958f,0.485231f,0.057024f,0.482741f,0.0565781f,0.4775674f,0.0267838f,0.4678439f,0.0150171f,0.4775674f,0.0710121f,0.6853609f,0.0093192f,0.7060668f,0.0093191f,0.7060673f,0.0594537f,0.4547434f,0.090459f,0.4678438f,0.0827788f,0.4547434f,0.007337f,0.3817922f,0.0710121f,0.3869658f,0.0565781f,0.3894559f,0.057024f,0.4398464f,0.0931263f,0.4547434f,0.090459f,0.4398464f,0.0046697f,0.4240845f,0.0928716f,0.4398464f,0.0956937f,0.4398464f,0.0931263f,0.9523082f,0.0093176f,0.9726241f,0.0093173f,0.9726246f,0.0594521f,0.3144485f,0.0847456f,0.3063502f,0.0710121f,0.3160737f,0.0827788f,0.3160737f,0.0827788f,0.3063502f,0.0710121f,0.3195152f,0.0632941f,0.3817922f,0.0710121f,0.3686272f,0.0632941f,0.3869658f,0.0565781f,0.482741f,0.0565781f,0.482741f,0.0412178f,0.4775673f,0.0267838f,0.485231f,0.057024f,0.482741f,0.0412178f,0.4775673f,0.0267838f,0.4797569f,0.0255001f,0.4678438f,0.0150172f,0.4678438f,0.0827788f,0.4678438f,0.0150172f,0.4547434f,0.007337f,0.7060673f,0.0594537f,0.7268465f,0.009319f,0.726847f,0.0594537f,0.7060668f,0.0093191f,0.4547434f,0.090459f,0.4547434f,0.007337f,0.4398464f,0.0046697f,0.3869658f,0.0565781f,0.3894559f,0.040772f,0.3894559f,0.057024f,0.4398464f,0.0931263f,0.4398464f,0.0046697f,0.4249492f,0.007337f,0.4240845f,0.0928716f,0.4398464f,0.0931263f,0.4249493f,0.090459f,0.9523082f,0.0093176f,0.9726246f,0.0594521f,0.9523087f,0.0594522f,0.3144485f,0.0847456f,0.3041605f,0.0722959f,0.3063502f,0.0710121f,0.3063502f,0.0710121f,0.3161472f,0.0538977f,0.3195152f,0.0632941f,0.3686272f,0.0632941f,0.3719952f,0.0538977f,0.3869658f,0.0565781f,0.485231f,0.040772f,0.4775673f,0.0267838f,0.482741f,0.0412178f,0.485231f,0.057024f,0.485231f,0.040772f,0.482741f,0.0412178f,0.485231f,0.040772f,0.4797569f,0.0255001f,0.4775673f,0.0267838f,0.4797569f,0.0255001f,0.4694691f,0.0130504f,0.4678438f,0.0150172f,0.4547434f,0.007337f,0.4678438f,0.0150172f,0.4694691f,0.0130504f,0.7268465f,0.009319f,0.7475532f,0.0594535f,0.7268471f,0.0594536f,0.4398464f,0.0046697f,0.4547434f,0.007337f,0.4556083f,0.0049244f,0.3869658f,0.0565781f,0.3869658f,0.0412178f,0.3894559f,0.040772f,0.4249492f,0.007337f,0.4398464f,0.0046697f,0.4398464f,0.0021022f,0.4398464f,0.0931263f,0.4249492f,0.007337f,0.4249493f,0.090459f,0.4102236f,0.0847456f,0.4240845f,0.0928716f,0.4249493f,0.090459f,0.9317865f,0.0093178f,0.9523087f,0.0594523f,0.931787f,0.0594524f,0.9523082f,0.0093177f,0.3063502f,0.0710121f,0.3041605f,0.0722959f,0.3011766f,0.0565782f,0.3063502f,0.0710121f,0.3011766f,0.0565782f,0.3161472f,0.0538977f,0.3869658f,0.0565781f,0.3719952f,0.0538977f,0.3869658f,0.0412178f,0.7475526f,0.0093189f,0.7680748f,0.0594534f,0.7475532f,0.0594535f,0.4547434f,0.007337f,0.4694691f,0.0130504f,0.4556083f,0.0049244f,0.7268465f,0.009319f,0.7475526f,0.0093189f,0.7475532f,0.0594535f,0.4398464f,0.0046697f,0.4556083f,0.0049244f,0.4398464f,0.0021022f,0.3869658f,0.0412178f,0.3839818f,0.0255001f,0.3894559f,0.040772f,0.4240844f,0.0049244f,0.4249492f,0.007337f,0.4398464f,0.0021022f,0.4249493f,0.090459f,0.4249492f,0.007337f,0.4118488f,0.0150172f,0.4102236f,0.0847456f,0.4249493f,0.090459f,0.4118488f,0.0827788f,0.4102236f,0.0847456f,0.4118488f,0.0827788f,0.3999358f,0.0722959f,0.9317865f,0.0093177f,0.931787f,0.0594523f,0.9110805f,0.0093178f,0.3011766f,0.0565782f,0.3041605f,0.0722959f,0.2986865f,0.057024f,0.3161472f,0.0438983f,0.3011766f,0.0565782f,0.3011766f,0.0412178f,0.3161472f,0.0538977f,0.3719952f,0.0538977f,0.3719952f,0.0438983f,0.3869658f,0.0412178f,0.7475526f,0.0093189f,0.7680743f,0.0093188f,0.7680748f,0.0594534f,0.7883906f,0.0594532f,0.7680748f,0.0594534f,0.7680743f,0.0093188f,0.8085742f,0.0594531f,0.7883906f,0.0594532f,0.7883901f,0.0093186f,0.3869658f,0.0412178f,0.381792f,0.0267838f,0.3839818f,0.0255001f,0.8287578f,0.059453f,0.8085742f,0.0594531f,0.8085737f,0.0093185f,0.4118488f,0.0150172f,0.4249492f,0.007337f,0.4240844f,0.0049244f,0.4249493f,0.090459f,0.4118488f,0.0150172f,0.4118488f,0.0827788f,0.4118488f,0.0827788f,0.4021254f,0.0710121f,0.3999358f,0.0722959f,0.9110805f,0.0093178f,0.931787f,0.0594523f,0.911081f,0.0594525f,0.3011766f,0.0565782f,0.2986865f,0.057024f,0.3011766f,0.0412178f,0.3161472f,0.0438983f,0.3011766f,0.0412178f,0.3195152f,0.0345019f,0.3719952f,0.0438983f,0.381792f,0.0267838f,0.3869658f,0.0412178f,0.381792f,0.0267838f,0.3736939f,0.0130504f,0.3839818f,0.0255001f,0.7883906f,0.0594532f,0.7680743f,0.0093188f,0.7883901f,0.0093186f,0.8085742f,0.0594531f,0.7883901f,0.0093186f,0.8085737f,0.0093185f,0.8287578f,0.059453f,0.8085737f,0.0093185f,0.8287571f,0.0093183f,0.4102236f,0.0130504f,0.4118488f,0.0150172f,0.4240844f,0.0049244f,0.4118488f,0.0150172f,0.4021254f,0.0267839f,0.4118488f,0.0827788f,0.4021254f,0.0267839f,0.4021254f,0.0710121f,0.3999358f,0.0722959f,0.4021254f,0.0710121f,0.3944617f,0.057024f,0.8903008f,0.0093179f,0.911081f,0.0594525f,0.8903012f,0.0594526f,0.9110805f,0.0093178f,0.3011766f,0.0412178f,0.2986865f,0.057024f,0.2986865f,0.040772f,0.3011766f,0.0412178f,0.3063502f,0.0267839f,0.3195152f,0.0345019f,0.3719952f,0.0438983f,0.3686272f,0.0345019f,0.381792f,0.0267838f,0.381792f,0.0267838f,0.3720687f,0.0150172f,0.3736939f,0.0130504f,0.3598331f,0.0049244f,0.3736939f,0.0130504f,0.3720687f,0.0150172f,0.3440711f,0.0021022f,0.3598331f,0.0049244f,0.3589683f,0.007337f,0.3283093f,0.0049244f,0.3440711f,0.0021022f,0.3440711f,0.0046697f,0.8490736f,0.0594529f,0.8287578f,0.059453f,0.8287571f,0.0093183f,0.4021254f,0.0267839f,0.4118488f,0.0150172f,0.4102236f,0.0130504f,0.4021254f,0.0710121f,0.4021254f,0.0267839f,0.3969517f,0.0412178f,0.3944617f,0.057024f,0.4021254f,0.0710121f,0.3969517f,0.0565782f,0.3944617f,0.057024f,0.3969517f,0.0565782f,0.3944617f,0.040772f,0.8903008f,0.0093179f,0.8903012f,0.0594526f,0.8695948f,0.0093181f,0.3011766f,0.0412178f,0.2986865f,0.040772f,0.3063502f,0.0267839f,0.3195152f,0.0345019f,0.3063502f,0.0267839f,0.325845f,0.0268419f,0.3686272f,0.0345019f,0.3720687f,0.0150172f,0.381792f,0.0267838f,0.3589683f,0.007337f,0.3598331f,0.0049244f,0.3720687f,0.0150172f,0.3440711f,0.0021022f,0.3589683f,0.007337f,0.3440711f,0.0046697f,0.3283093f,0.0049244f,0.3440711f,0.0046697f,0.329174f,0.007337f,0.8490736f,0.0594529f,0.8287571f,0.0093183f,0.8490731f,0.0093182f,0.4021254f,0.0267839f,0.4102236f,0.0130504f,0.3999357f,0.0255001f,0.3999357f,0.0255001f,0.3969517f,0.0412178f,0.4021254f,0.0267839f,0.4021254f,0.0710121f,0.3969517f,0.0412178f,0.3969517f,0.0565782f,0.3944617f,0.040772f,0.3969517f,0.0565782f,0.3969517f,0.0412178f,0.3063502f,0.0267839f,0.2986865f,0.040772f,0.3041605f,0.0255001f,0.8695948f,0.0093181f,0.8903012f,0.0594526f,0.8695952f,0.0594527f,0.325845f,0.0268419f,0.3063502f,0.0267839f,0.3160736f,0.0150172f,0.3686272f,0.0345019f,0.3622973f,0.0268419f,0.3720687f,0.0150172f,0.3622973f,0.0268419f,0.3589683f,0.007337f,0.3720687f,0.0150172f,0.3537691f,0.0218422f,0.3440711f,0.0046697f,0.3589683f,0.007337f,0.3440711f,0.0201058f,0.329174f,0.007337f,0.3440711f,0.0046697f,0.3144484f,0.0130504f,0.3283093f,0.0049244f,0.329174f,0.007337f,0.8490731f,0.0093182f,0.8695952f,0.0594527f,0.8490736f,0.0594529f,0.3944617f,0.040772f,0.3969517f,0.0412178f,0.3999357f,0.0255001f,0.3063502f,0.0267839f,0.3041605f,0.0255001f,0.3160736f,0.0150172f,0.8695948f,0.0093181f,0.8695952f,0.0594527f,0.8490731f,0.0093182f,0.325845f,0.0268419f,0.3160736f,0.0150172f,0.3343733f,0.0218422f,0.3622973f,0.0268419f,0.3537691f,0.0218422f,0.3589683f,0.007337f,0.3537691f,0.0218422f,0.3440711f,0.0201058f,0.3440711f,0.0046697f,0.3343733f,0.0218422f,0.329174f,0.007337f,0.3440711f,0.0201058f,0.3144484f,0.0130504f,0.329174f,0.007337f,0.3160736f,0.0150172f,0.3041605f,0.0255001f,0.3144484f,0.0130504f,0.3160736f,0.0150172f,0.3343733f,0.0218422f,0.3160736f,0.0150172f,0.329174f,0.007337f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,1,6,6,7,2,8,7,9,8,10,9,11,3,12,10,13,4,14,5,15,4,16,11,17,12,18,13,19,14,20,15,21,16,22,17,23,18,24,19,25,20,26,21,27,7,28,9,29,3,30,22,31,10,32,5,33,11,34,23,35,13,36,24,37,14,38,20,39,19,40,25,41,17,42,16,43,26,44,27,45,28,46,29,47,30,48,31,49,32,50,22,51,33,52,10,53,23,54,11,55,34,56,35,57,36,58,37,59,38,60,39,61,40,62,41,63,42,64,43,65,44,66,45,67,46,68,47,69,48,70,49,71,50,72,27,73,29,74,51,75,31,76,30,77,22,78,52,79,33,80,23,81,34,82,53,83,36,84,54,85,37,86,42,87,55,88,43,89,39,90,56,91,40,92,49,93,48,94,57,95,45,96,58,97,46,98,59,99,60,100,61,101,62,102,63,103,64,104,65,105,66,106,67,107,52,108,68,109,33,80,69,110,70,111,71,112,72,113,73,114,74,115,75,116,76,117,77,118,78,95,79,119,80,120,79,119,78,95,81,121,82,122,83,123,84,124,85,125,86,126,87,127,88,128,89,129,90,130,91,131,92,132,93,133,94,134,59,135,61,136,95,137,62,138,64,139,65,140,96,141,66,142,52,143,97,144,68,145,98,146,99,147,100,148,101,149,102,150,103,151,76,152,104,153,77,149,105,154,106,155,107,156,108,157,109,158,110,159,84,160,111,161,112,162,111,161,84,160,83,163,113,164,114,165,115,166,89,167,116,168,90,169,117,170,118,171,119,172,120,173,121,174,122,175,123,176,124,177,125,178,126,179,127,180,128,181,129,182,130,183,131,184,132,185,133,186,134,187,135,188,136,189,137,190,138,191,135,192,137,193,139,194,106,195,105,196,140,197,141,198,142,199,143,200,142,201,141,202,111,203,144,204,112,205,145,206,146,207,147,208,148,209,149,210,150,211,151,212,152,213,153,214,154,215,155,216,156,217,157,218,120,219,122,220,158,221,125,222,159,223,125,222,158,221,123,224,128,225,127,226,160,227,161,228,162,229,163,230,164,231,165,232,166,233,167,234,168,235,169,236,146,237,170,238,147,239,171,240,167,241,169,242,152,243,172,244,153,245,149,246,173,247,150,248,174,249,175,250,176,251,177,252,178,253,179,254,180,255,181,256,182,257,180,258,182,259,183,260,158,261,159,262,184,263,185,264,186,265,187,266,188,267,189,268,190,269,189,268,188,267,191,270,192,271,193,272,194,273,195,274,196,275,197,276,198,277,197,278,196,279,199,280,200,281,201,282,202,283,203,284,204,285,205,286,206,287,207,288,208,289,175,290,174,291,209,292,210,293,211,294,212,295,213,296,214,297,215,298,216,299,217,300,185,301,187,302,218,303,219,304,220,305,221,306,222,307,223,308,224,309,203,310,225,311,204,312,200,313,226,314,201,315,206,316,227,317,207,318,228,319,229,320,230,321,231,322,232,323,233,324,234,294,235,325,236,326,237,327,238,328,239,329,214,330,213,331,240,332,241,333,217,334,242,335,217,334,241,333,215,336,243,337,244,338,245,339,246,340,247,341,248,342,249,343,250,344,251,345,252,346,253,347,254,348,255,349,254,350,253,351,256,352,257,353,258,354,259,355,260,356,261,357,262,358,228,359,230,360,263,361,232,362,231,363,264,364,265,365,266,366,267,367,268,368,269,369,267,370,269,371,270,372,241,373,242,374,271,375,243,376,245,377,272,378,273,379,274,380,275,381,276,382,277,383,278,384,258,385,257,386,279,387,260,388,280,389,261,390,281,391,282,392,283,393,284,394,285,395,286,396,287,397,288,398,289,399,289,400,290,401,287,402,264,403,266,404,291,405,292,406,293,407,294,408,295,409,296,410,297,411,298,412,299,413,300,414,275,415,274,416,301,417,302,418,303,419,304,420,305,421,306,422,307,423,308,424,309,425,310,426,311,427,312,428,313,429,314,430,281,431,283,432,286,433,315,434,284,435,292,436,294,437,316,438,295,439,297,440,317,441,298,442,300,443,318,444,275,445,301,446,319,447,320,448,321,449,322,450,323,451,324,452,325,453,326,454,327,455,328,456,329,457,330,458,331,459,332,460,329,461,331,462,319,463,301,464,333,465,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID794(GL2 gl){
double[] positionsArray = {
180.1317941,-129.4920332,41.0515723,180.1317941,-136.7882359,43.710233,180.1317941,-144.0844387,41.0515766,180.1317941,-129.4920332,41.0515723,170.7982,-125.0936676,46.2993728,180.1317941,-136.7882359,43.710233,180.1317941,-136.7882359,43.710233,170.7981905,-136.7882359,50.5607496,180.1317941,-144.0844387,41.0515766,180.1317941,-147.9666383,34.3196233,170.7982,-125.0936676,46.2993728,180.1317941,-129.4920332,41.0515723,170.7982,-118.8710983,35.5091943,180.1317941,-136.7882359,43.710233,170.7982,-125.0936676,46.2993728,170.7981905,-136.7882359,50.5607496,180.1317941,-144.0844387,41.0515766,170.7981905,-136.7882359,50.5607496,170.7981905,-148.4828043,46.2993813,170.7981905,-148.4828043,46.2993813,180.1317941,-147.9666383,34.3196233,180.1317941,-144.0844387,41.0515766,180.1317941,-125.6097656,34.3196105,170.7982,-125.0936676,46.2993728,170.7982,-118.8710983,35.5091943,178.5931539,-116.7680927,39.6511691,180.1317941,-129.4920332,41.0515723,180.1317941,-125.6097656,34.3196105,170.7982,-118.8710983,35.5091943,178.5931539,-126.1482833,50.842925,170.7981905,-136.7882359,50.5607496,170.7982,-125.0936676,46.2993728,178.5931161,-140.5195866,53.3798931,170.7981905,-148.4828043,46.2993813,170.7981905,-136.7882359,50.5607496,170.7981905,-148.4828043,46.2993813,170.7981811,-154.7053396,35.5092071,180.1317941,-147.9666383,34.3196233,180.1317941,-146.6183877,26.6643256,180.1317941,-126.9580842,26.6643171,178.5931539,-115.4815221,32.3462862,178.5931539,-116.7680927,39.6511691,178.5931539,-120.4726349,46.074989,170.7982,-118.8710983,35.5091943,180.1317941,-125.6097656,34.3196105,170.7981905,-121.0321776,23.2390567,178.5931539,-126.1482833,50.842925,178.5931161,-133.1105363,53.3798889,178.5931161,-140.5195866,53.3798931,178.5931161,-147.4818056,50.8429335,170.7981905,-148.4828043,46.2993813,178.5931161,-153.1574881,46.075006,170.7981811,-154.7053396,35.5092071,170.7981811,-154.7053396,35.5092071,180.1317941,-146.6183877,26.6643256,180.1317941,-147.9666383,34.3196233,180.1317941,-125.6097656,34.3196105,180.1317941,-126.9580842,26.6643171,170.7981905,-121.0321776,23.2390567,180.1317941,-140.6704355,21.6676759,178.593135,-116.7681267,25.0413906,170.7982,-118.8710983,35.5091943,170.7981905,-121.0321776,23.2390567,178.593135,-116.7681267,25.0413906,178.5931161,-153.1574881,46.075006,178.5931161,-156.8620302,39.6511904,170.7981811,-154.7053396,35.5092071,170.7981811,-154.7053396,35.5092071,170.7981716,-152.5442943,23.2390652,180.1317941,-146.6183877,26.6643256,180.1317941,-126.9580842,26.6643171,170.7981905,-130.5656666,15.2302959,170.7981905,-121.0321776,23.2390567,180.1317941,-140.6704355,21.6676759,180.1317941,-146.6183877,26.6643256,170.7981716,-152.5442943,23.2390652,180.1317941,-132.9059683,21.6676759,178.593135,-120.4726349,18.617575,178.5931161,-158.1485668,32.3462905,170.7981716,-152.5442943,23.2390652,178.5931161,-126.1482833,13.8496348,170.7981905,-121.0321776,23.2390567,170.7981905,-130.5656666,15.2302959,180.1317941,-126.9580842,26.6643171,180.1317941,-132.9059683,21.6676759,170.7981905,-130.5656666,15.2302959,180.1317941,-140.6704355,21.6676759,170.7981716,-152.5442943,23.2390652,170.7981811,-143.0107713,15.2302959,180.1317941,-132.9059683,21.6676759,180.1317941,-140.6704355,21.6676759,170.7981811,-143.0107713,15.2302959,178.5931161,-126.1482833,13.8496348,178.5931161,-158.1485668,32.3462905,178.5931161,-156.8620302,25.0413949,170.7981716,-152.5442943,23.2390652,178.5931161,-133.1105363,11.3126836,180.1317941,-132.9059683,21.6676759,170.7981811,-143.0107713,15.2302959,170.7981905,-130.5656666,15.2302959,178.5931161,-153.1574881,18.617575,170.7981811,-143.0107713,15.2302959,178.5931161,-140.5195866,11.3126836,178.5931161,-140.5195866,11.3126836,170.7981905,-130.5656666,15.2302959,170.7981811,-143.0107713,15.2302959,178.5931161,-147.4818396,13.8496518,178.5931161,-153.1574881,18.617575,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.7836283f,0.4766284f,0.7593209f,0.4856121f,0.7350134f,0.4766285f,0.7836283f,0.4766284f,0.8029568f,0.5000185f,0.7593209f,0.4856121f,0.7593209f,0.4856121f,0.7593209f,0.5161457f,0.7350134f,0.4766285f,0.7836283f,0.4766284f,0.7350134f,0.4766285f,0.7220796f,0.4538811f,0.8029568f,0.5000185f,0.7836283f,0.4766284f,0.8261749f,0.4591832f,0.7593209f,0.4856121f,0.8029568f,0.5000185f,0.7593209f,0.5161457f,0.7350134f,0.4766285f,0.7593209f,0.5161457f,0.7156849f,0.5000187f,0.7156849f,0.5000187f,0.7220796f,0.4538811f,0.7350134f,0.4766285f,0.7965618f,0.4538811f,0.7836283f,0.4766284f,0.7220796f,0.4538811f,0.8029572f,0.5000188f,0.8261754f,0.4591834f,0.8341224f,0.4748587f,0.7836283f,0.4766284f,0.7965618f,0.4538811f,0.8261749f,0.4591832f,0.7991217f,0.5172137f,0.7593209f,0.5161457f,0.8029568f,0.5000185f,0.7454981f,0.5268149f,0.7156849f,0.5000187f,0.7593209f,0.5161457f,0.7156849f,0.5000187f,0.6924667f,0.4591832f,0.7220796f,0.4538811f,0.7265715f,0.4280137f,0.7965618f,0.4538811f,0.7220796f,0.4538811f,0.79207f,0.4280137f,0.8341218f,0.4748584f,0.8261748f,0.4591831f,0.8389223f,0.4472131f,0.8029572f,0.5000188f,0.8341224f,0.4748587f,0.8202997f,0.4991697f,0.8261749f,0.4591832f,0.7965618f,0.4538811f,0.8181113f,0.4127468f,0.8202992f,0.4991694f,0.7991217f,0.5172137f,0.8029568f,0.5000185f,0.7991217f,0.5172137f,0.7731435f,0.5268148f,0.7593209f,0.5161457f,0.7731435f,0.5268148f,0.7454981f,0.5268149f,0.7593209f,0.5161457f,0.7454981f,0.5268149f,0.71952f,0.5172137f,0.7156849f,0.5000187f,0.7156847f,0.5000185f,0.6983422f,0.4991694f,0.6924666f,0.4591831f,0.6924667f,0.4591832f,0.7265715f,0.4280137f,0.7220796f,0.4538811f,0.7965618f,0.4538811f,0.79207f,0.4280137f,0.8181113f,0.4127468f,0.79207f,0.4280137f,0.7265715f,0.4280137f,0.746387f,0.4111299f,0.826175f,0.4591832f,0.8341221f,0.4195678f,0.8389226f,0.4472132f,0.8261748f,0.4591831f,0.8181112f,0.4127468f,0.8341219f,0.4195677f,0.7195196f,0.5172134f,0.698342f,0.4991692f,0.7156845f,0.5000184f,0.6983431f,0.49917f,0.6845204f,0.474859f,0.6924674f,0.4591837f,0.6924667f,0.4591832f,0.7005303f,0.4127468f,0.7265715f,0.4280137f,0.79207f,0.4280137f,0.7825389f,0.3824376f,0.8181113f,0.4127468f,0.746387f,0.4111299f,0.7265715f,0.4280137f,0.7005303f,0.4127468f,0.79207f,0.4280137f,0.746387f,0.4111299f,0.7722545f,0.4111299f,0.8341213f,0.4195674f,0.8181107f,0.4127465f,0.8202986f,0.3952565f,0.6845199f,0.4748587f,0.6797194f,0.4472133f,0.6924669f,0.4591834f,0.6924666f,0.4591831f,0.679719f,0.4472131f,0.7005302f,0.4127468f,0.7991217f,0.3772126f,0.8181113f,0.4127468f,0.7825389f,0.3824376f,0.79207f,0.4280137f,0.7722545f,0.4111299f,0.7825389f,0.3824376f,0.746387f,0.4111299f,0.7005303f,0.4127468f,0.7361026f,0.3824377f,0.7722545f,0.4111299f,0.746387f,0.4111299f,0.7361026f,0.3824377f,0.8202994f,0.3952569f,0.8181115f,0.4127469f,0.7991219f,0.3772127f,0.6797192f,0.4472132f,0.6845198f,0.4195678f,0.7005303f,0.4127469f,0.7991217f,0.3772126f,0.7825389f,0.3824376f,0.7731435f,0.3676115f,0.7722545f,0.4111299f,0.7361025f,0.3824377f,0.7825388f,0.3824376f,0.6983423f,0.3952569f,0.7361026f,0.3824377f,0.7005303f,0.4127468f,0.6845192f,0.4195675f,0.6983418f,0.3952566f,0.7005298f,0.4127466f,0.7731435f,0.3676115f,0.7825389f,0.3824376f,0.7454981f,0.3676115f,0.7454981f,0.3676115f,0.7825389f,0.3824376f,0.7361026f,0.3824377f,0.71952f,0.3772126f,0.7361026f,0.3824377f,0.6983423f,0.3952569f,0.7454981f,0.3676115f,0.7361026f,0.3824377f,0.71952f,0.3772126f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,0,9,2,10,9,11,10,12,11,13,12,14,13,15,14,16,15,17,16,18,17,19,18,20,19,21,20,22,21,23,22,24,0,25,9,26,23,27,24,28,25,29,26,30,27,31,28,32,29,33,30,34,31,35,32,36,33,37,34,38,35,39,36,40,37,41,38,42,22,43,9,44,22,43,38,42,39,45,25,46,24,47,40,48,31,49,41,50,42,51,43,52,44,53,45,54,42,55,29,56,31,57,46,58,47,59,34,60,47,61,32,62,34,63,48,64,49,65,50,66,50,67,51,68,52,69,53,70,54,71,55,72,56,73,57,74,58,75,39,76,38,77,59,78,24,79,60,80,40,81,61,82,62,83,63,84,49,85,51,86,50,87,64,88,65,89,66,90,67,91,68,92,69,93,70,94,71,95,72,96,73,97,74,98,75,99,39,100,59,101,76,102,63,103,62,104,77,105,65,106,78,107,66,108,66,109,78,110,79,111,80,112,81,113,82,114,83,115,84,116,85,117,86,118,87,119,88,120,89,121,90,122,91,123,77,124,62,125,92,126,93,127,94,128,95,129,80,130,82,131,96,132,97,133,98,134,99,135,100,136,101,137,95,138,94,139,100,140,95,141,96,142,82,143,102,144,103,145,104,146,105,147,106,148,105,149,107,150,103,151,105,152,106,153,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID802(GL2 gl){
double[] positionsArray = {
178.5931539,-104.0709948,32.3462735,178.5931539,-106.0473063,21.1250726,176.2597294,-104.2597091,20.4736728,178.5931539,-104.0709948,32.3462735,178.5931539,-115.4815221,32.3462862,178.5931539,-106.0473063,21.1250726,176.2597294,-110.2806702,10.0330874,178.5931539,-104.0709948,32.3462735,176.2597294,-104.2597091,20.4736728,176.2597294,-102.1686449,32.3462735,178.5931539,-116.7680927,39.6511691,178.5931539,-106.0473063,21.1250726,178.5931539,-115.4815221,32.3462862,178.593135,-116.7681267,25.0413906,176.2597294,-104.2597091,20.4736728,176.2597294,-110.2806702,10.0330874,158.4566618,-110.2806362,10.0330874,178.5931539,-106.0473063,21.1250726,178.5931539,-111.7379239,11.2573018,176.2597294,-110.2806702,10.0330874,176.2597294,-102.1686449,32.3462735,176.2597294,-104.2597091,20.4736728,158.4566618,-104.2597091,20.4736813,178.5931539,-106.0473063,43.5674743,178.5931539,-106.0473063,43.5674743,178.5931539,-106.0473063,21.1250726,178.593135,-116.7681267,25.0413906,178.5931539,-111.7379239,11.2573018,158.4566523,-119.5052489,2.2838051,158.4566618,-110.2806362,10.0330874,176.2597105,-119.5052489,2.2838051,176.2597294,-102.1686449,32.3462735,158.4566618,-104.2597091,20.4736813,158.4566618,-102.1686449,32.3462735,176.2597294,-104.2597091,44.2188656,178.5931539,-106.0473063,43.5674743,176.2597294,-102.1686449,32.3462735,178.5931539,-120.4726349,46.074989,178.5931539,-111.7379239,11.2573018,178.593135,-116.7681267,25.0413906,178.593135,-120.4726349,18.617575,158.4566618,-110.2806362,10.0330874,158.4566523,-119.5052489,2.2838051,156.1232373,-120.4564409,3.9331835,176.2597294,-110.2806702,10.0330874,176.2597105,-119.5052489,2.2838051,158.4566523,-119.5052489,2.2838051,158.4566618,-104.2597091,20.4736813,158.4566618,-110.2806362,10.0330874,156.1232373,-111.7379239,11.2573018,178.5931539,-111.7379239,11.2573018,178.5931539,-120.4564409,3.9331835,176.2597105,-119.5052489,2.2838051,158.4566618,-102.1686449,32.3462735,158.4566618,-104.2597091,20.4736813,156.1232373,-106.0473063,21.1250726,176.2597294,-104.2597091,44.2188656,178.5931539,-111.7379239,53.4352408,178.5931539,-111.7379239,53.4352408,178.5931539,-111.7379239,11.2573018,178.593135,-120.4726349,18.617575,178.5931539,-120.4564409,3.9331835,156.1232278,-131.1513034,0.036101,156.1232373,-120.4564409,3.9331835,158.4566429,-130.8209599,-1.8395048,156.1232373,-111.7379239,11.2573018,176.2597105,-130.8209599,-1.8395048,158.4566618,-102.1686449,32.3462735,156.1232373,-106.0473063,21.1250726,156.1232373,-104.0709948,32.3462735,176.2597294,-104.2597091,44.2188656,158.4566618,-102.1686449,32.3462735,158.4566618,-104.2597091,44.2188656,176.2597294,-110.2806362,54.6594553,178.5931539,-111.7379239,53.4352408,176.2597294,-104.2597091,44.2188656,178.5931539,-126.1482833,50.842925,178.5931539,-120.4564409,3.9331835,178.593135,-120.4726349,18.617575,178.5931161,-126.1482833,13.8496348,156.1232373,-120.4564409,3.9331835,156.1232278,-131.1513034,0.036101,156.1232183,-153.2273331,3.933192,158.4566523,-119.5052489,2.2838051,158.4566429,-130.8209599,-1.8395048,156.1232278,-131.1513034,0.036101,156.1232373,-111.7379239,11.2573018,156.1232373,-120.4564409,3.9331835,156.1232183,-161.94585,11.2573189,176.2597105,-119.5052489,2.2838051,176.2597105,-130.8209599,-1.8395048,158.4566429,-130.8209599,-1.8395048,156.1232373,-106.0473063,21.1250726,156.1232373,-111.7379239,11.2573018,156.1232183,-167.6364677,21.1250812,178.5931539,-120.4564409,3.9331835,178.593135,-131.1513034,0.036101,176.2597105,-130.8209599,-1.8395048,156.1232373,-104.0709948,32.3462735,156.1232373,-106.0473063,21.1250726,156.1232183,-169.6127792,32.3462905,158.4566618,-104.2597091,44.2188656,176.2597294,-110.2806362,54.6594553,178.5931539,-120.4564409,60.7593677,178.5931539,-120.4564409,60.7593677,178.5931539,-120.4564409,3.9331835,178.5931161,-126.1482833,13.8496348,178.593135,-131.1513034,0.036101,156.1232373,-120.4564409,3.9331835,156.1232183,-153.2273331,3.933192,156.1232183,-161.94585,11.2573189,156.1232278,-131.1513034,0.036101,156.1232183,-142.5325046,0.0361095,156.1232183,-153.2273331,3.933192,156.1232183,-142.5325046,0.0361095,156.1232373,-111.7379239,11.2573018,156.1232183,-161.94585,11.2573189,156.1232183,-167.6364677,21.1250812,176.2596915,-142.8628481,-1.8395048,158.4566334,-142.8628481,-1.8394962,156.1232373,-106.0473063,21.1250726,156.1232183,-167.6364677,21.1250812,156.1232183,-169.6127792,32.3462905,176.2596915,-142.8628481,-1.8395048,156.1232373,-104.0709948,32.3462735,156.1232183,-169.6127792,32.3462905,156.1232183,-167.6364677,43.5674998,158.4566618,-104.2597091,44.2188656,156.1232373,-104.0709948,32.3462735,156.1232373,-106.0473063,43.5674743,176.2597294,-110.2806362,54.6594553,158.4566618,-104.2597091,44.2188656,158.4566618,-110.2806362,54.6594553,176.2597294,-110.2806362,54.6594553,176.2597294,-119.5052489,62.4087504,178.5931539,-120.4564409,60.7593677,178.5931539,-120.4564409,60.7593677,178.5931161,-133.1105363,53.3798889,178.5931539,-126.1482833,50.842925,178.5931161,-126.1482833,13.8496348,178.5931161,-133.1105363,11.3126836,178.593135,-131.1513034,0.036101,156.1232183,-153.2273331,3.933192,158.456624,-154.1785251,2.2838136,156.1232183,-161.94585,11.2573189,158.4566334,-142.8628481,-1.8394962,156.1232183,-153.2273331,3.933192,156.1232183,-142.5325046,0.0361095,158.4566429,-130.8209599,-1.8395048,156.1232183,-167.6364677,21.1250812,156.1232183,-161.94585,11.2573189,158.456624,-163.4031378,10.0331044,158.456624,-154.1785251,2.2838136,156.1232183,-169.6127792,32.3462905,156.1232183,-167.6364677,21.1250812,158.456624,-169.4240649,20.4736898,178.593135,-131.1513034,0.036101,178.593135,-142.5325046,0.0361095,176.2596915,-142.8628481,-1.8395048,156.1232183,-167.6364677,43.5674998,156.1232183,-169.6127792,32.3462905,158.456624,-171.5151291,32.3462905,156.1232373,-104.0709948,32.3462735,156.1232183,-167.6364677,43.5674998,156.1232373,-106.0473063,43.5674743,158.4566618,-110.2806362,54.6594553,176.2597294,-119.5052489,62.4087504,158.4566618,-119.5052489,62.4087504,178.593135,-131.1513034,64.6564629,178.5931539,-120.4564409,60.7593677,178.593135,-131.1513034,64.6564629,178.5931161,-133.1105363,53.3798889,178.593135,-131.1513034,0.036101,178.5931161,-133.1105363,11.3126836,178.593135,-142.5325046,0.0361095,158.4566334,-142.8628481,-1.8394962,158.456624,-154.1785251,2.2838136,158.456624,-163.4031378,10.0331044,176.2596915,-142.8628481,-1.8395048,176.2596915,-154.1785251,2.2838136,158.456624,-154.1785251,2.2838136,158.456624,-169.4240649,20.4736898,176.2596915,-154.1785251,2.2838136,158.456624,-169.4240649,44.2188954,156.1232183,-167.6364677,43.5674998,158.456624,-171.5151291,32.3462905,156.1232373,-106.0473063,43.5674743,156.1232183,-167.6364677,43.5674998,156.1232183,-161.94585,53.4352664,158.4566618,-110.2806362,54.6594553,156.1232373,-106.0473063,43.5674743,156.1232373,-111.7379239,53.4352408,158.4566618,-119.5052489,62.4087504,176.2597105,-130.8209599,66.5320687,178.593135,-131.1513034,64.6564629,176.2597294,-119.5052489,62.4087504,176.2597105,-130.8209599,66.5320687,178.593135,-131.1513034,64.6564629,178.5931161,-140.5195866,53.3798931,178.5931161,-133.1105363,53.3798889,178.5931161,-133.1105363,11.3126836,178.5931161,-140.5195866,11.3126836,178.593135,-142.5325046,0.0361095,158.456624,-163.4031378,10.0331044,158.456624,-169.4240649,20.4736898,158.456624,-163.4031378,10.0331044,176.2596821,-163.4031378,10.0331044,158.456624,-171.5151291,32.3462905,158.456624,-169.4240649,20.4736898,176.2596821,-169.4240989,20.4736898,178.593135,-142.5325046,0.0361095,178.5931161,-153.2273671,3.933192,176.2596915,-154.1785251,2.2838136,158.456624,-169.4240649,44.2188954,158.456624,-171.5151291,32.3462905,176.2596821,-171.5151291,32.3462905,156.1232183,-161.94585,53.4352664,156.1232373,-106.0473063,43.5674743,156.1232183,-161.94585,53.4352664,156.1232373,-111.7379239,53.4352408,156.1232373,-111.7379239,53.4352408,156.1232373,-120.4564409,60.7593719,158.4566618,-119.5052489,62.4087504,176.2597105,-130.8209599,66.5320687,158.4566618,-119.5052489,62.4087504,158.4566523,-130.8209599,66.5320687,178.593135,-142.5324706,64.6564629,178.593135,-131.1513034,64.6564629,178.593135,-142.5324706,64.6564629,178.5931161,-140.5195866,53.3798931,178.5931161,-140.5195866,11.3126836,178.5931161,-153.2273671,3.933192,178.593135,-142.5325046,0.0361095,176.2596915,-154.1785251,2.2838136,176.2596821,-163.4031378,10.0331044,176.2596821,-169.4240989,20.4736898,176.2596821,-163.4031378,10.0331044,158.456624,-169.4240649,44.2188954,176.2596821,-171.5151291,32.3462905,176.2596821,-169.4240649,44.2188954,158.456624,-163.4031378,54.6594808,156.1232183,-161.94585,53.4352664,158.456624,-169.4240649,44.2188954,156.1232373,-111.7379239,53.4352408,156.1232183,-161.94585,53.4352664,156.1232183,-153.2273331,60.7593847,156.1232373,-111.7379239,53.4352408,156.1232183,-153.2273331,60.7593847,156.1232373,-120.4564409,60.7593719,158.4566523,-130.8209599,66.5320687,176.2597105,-142.8628141,66.5320687,158.4566429,-142.8628141,66.5320687,178.593135,-142.5324706,64.6564629,176.2597105,-130.8209599,66.5320687,176.2597105,-142.8628141,66.5320687,178.5931161,-140.5195866,53.3798931,178.593135,-142.5324706,64.6564629,178.5931161,-147.4818056,50.8429335,178.5931161,-140.5195866,11.3126836,178.5931161,-147.4818396,13.8496518,178.5931161,-153.2273671,3.933192,176.2596821,-169.4240989,20.4736898,176.2596821,-163.4031378,10.0331044,178.5931161,-161.94585,11.2573189,176.2596821,-171.5151291,32.3462905,176.2596821,-169.4240989,20.4736898,178.5931161,-167.6364677,21.1250812,178.5931161,-153.2273671,3.933192,176.2596821,-169.4240649,44.2188954,176.2596821,-171.5151291,32.3462905,178.5931161,-169.6127792,32.3462905,158.456624,-163.4031378,54.6594808,156.1232183,-153.2273331,60.7593847,156.1232373,-120.4564409,60.7593719,156.1232183,-153.2273331,60.7593847,156.1232278,-142.5324706,64.6564629,158.4566523,-130.8209599,66.5320687,156.1232373,-120.4564409,60.7593719,156.1232373,-131.1512693,64.6564629,158.4566429,-142.8628141,66.5320687,176.259701,-154.1785251,62.4087674,178.5931161,-153.2273331,60.7593847,178.593135,-142.5324706,64.6564629,178.5931161,-153.2273331,60.7593847,178.5931161,-147.4818056,50.8429335,178.5931161,-161.94585,11.2573189,178.5931161,-161.94585,11.2573189,178.5931161,-167.6364677,21.1250812,176.2596821,-169.4240649,44.2188954,178.5931161,-169.6127792,32.3462905,178.5931161,-167.6364677,43.5674998,158.456624,-163.4031378,54.6594808,176.2596821,-169.4240649,44.2188954,176.2596915,-163.4031378,54.6594808,156.1232183,-153.2273331,60.7593847,158.456624,-163.4031378,54.6594808,158.4566429,-154.1785251,62.4087674,156.1232278,-142.5324706,64.6564629,156.1232373,-120.4564409,60.7593719,156.1232278,-142.5324706,64.6564629,156.1232373,-131.1512693,64.6564629,158.4566429,-142.8628141,66.5320687,156.1232373,-131.1512693,64.6564629,156.1232278,-142.5324706,64.6564629,178.5931161,-153.2273331,60.7593847,176.2597105,-142.8628141,66.5320687,176.259701,-154.1785251,62.4087674,176.259701,-154.1785251,62.4087674,158.4566429,-142.8628141,66.5320687,158.4566429,-154.1785251,62.4087674,178.5931161,-147.4818056,50.8429335,178.5931161,-153.2273331,60.7593847,178.5931161,-153.1574881,46.075006,178.5931161,-153.1574881,18.617575,178.5931161,-167.6364677,21.1250812,178.5931161,-156.8620302,25.0413949,178.5931161,-169.6127792,32.3462905,178.5931161,-158.1485668,32.3462905,178.5931161,-167.6364677,43.5674998,176.2596915,-163.4031378,54.6594808,158.4566429,-154.1785251,62.4087674,158.4566429,-154.1785251,62.4087674,178.5931161,-161.94585,53.4352621,176.2596915,-163.4031378,54.6594808,178.5931161,-161.94585,53.4352621,178.5931161,-156.8620302,39.6511904,176.2596915,-163.4031378,54.6594808,178.5931161,-167.6364677,43.5674998,178.5931161,-161.94585,53.4352621,176.259701,-154.1785251,62.4087674,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.3440712f,0.0931263f,0.3589684f,0.090459f,0.3598331f,0.0928716f,0.3440712f,0.0931263f,0.3440712f,0.0776902f,0.3589684f,0.090459f,0.3589684f,0.090459f,0.3736939f,0.0847456f,0.3598331f,0.0928716f,0.3440712f,0.0931263f,0.3598331f,0.0928716f,0.3440712f,0.0956937f,0.3440712f,0.0931263f,0.3343733f,0.0759538f,0.3440712f,0.0776902f,0.3589684f,0.090459f,0.3440712f,0.0776902f,0.3537691f,0.0759538f,0.6445233f,0.0093194f,0.6648391f,0.0093193f,0.6648397f,0.059454f,0.3589684f,0.090459f,0.3720687f,0.0827788f,0.3736939f,0.0847456f,0.6243397f,0.0093196f,0.6445233f,0.0093194f,0.6445238f,0.059454f,0.329174f,0.090459f,0.3440712f,0.0931263f,0.3440712f,0.0956937f,0.3440712f,0.0931263f,0.329174f,0.090459f,0.3343733f,0.0759538f,0.3589684f,0.090459f,0.3537691f,0.0759538f,0.3720687f,0.0827788f,0.6648391f,0.0093193f,0.6853614f,0.0594538f,0.6648397f,0.059454f,0.6445238f,0.059454f,0.6445233f,0.0093194f,0.6648397f,0.059454f,0.3736939f,0.0847456f,0.3720687f,0.0827788f,0.3839819f,0.0722958f,0.6243397f,0.0093196f,0.6445238f,0.059454f,0.6243403f,0.0594541f,0.3283093f,0.0928716f,0.329174f,0.090459f,0.3440712f,0.0956937f,0.329174f,0.090459f,0.3258451f,0.0709541f,0.3343733f,0.0759538f,0.3537691f,0.0759538f,0.3622973f,0.070954f,0.4694691f,0.0847456f,0.4797569f,0.0722958f,0.4775673f,0.0710121f,0.6648391f,0.0093193f,0.6853609f,0.0093192f,0.6853614f,0.0594538f,0.4556083f,0.0928716f,0.4694691f,0.0847456f,0.4678438f,0.0827788f,0.3720687f,0.0827788f,0.3817922f,0.0710121f,0.3839819f,0.0722958f,0.4398464f,0.0956937f,0.4556083f,0.0928716f,0.4547434f,0.090459f,0.9726241f,0.0093173f,0.9928077f,0.0093173f,0.992808f,0.0594519f,0.3160737f,0.0827788f,0.329174f,0.090459f,0.3283093f,0.0928716f,0.329174f,0.090459f,0.3160737f,0.0827788f,0.3258451f,0.0709541f,0.3720687f,0.0827788f,0.3622973f,0.070954f,0.3817922f,0.0710121f,0.4797569f,0.0722958f,0.482741f,0.0565781f,0.4775673f,0.0710121f,0.4694691f,0.0847456f,0.4775673f,0.0710121f,0.4678438f,0.0827788f,0.6853609f,0.0093192f,0.7060673f,0.0594537f,0.6853614f,0.0594538f,0.4547434f,0.090459f,0.4556083f,0.0928716f,0.4678438f,0.0827788f,0.3817922f,0.0710121f,0.3894559f,0.057024f,0.3839819f,0.0722958f,0.4398464f,0.0956937f,0.4547434f,0.090459f,0.4398464f,0.0931263f,0.9726241f,0.0093173f,0.992808f,0.0594519f,0.9726246f,0.0594521f,0.3144485f,0.0847456f,0.3160737f,0.0827788f,0.3283093f,0.0928716f,0.3160737f,0.0827788f,0.3195152f,0.0632941f,0.3258451f,0.0709541f,0.3817922f,0.0710121f,0.3622973f,0.070954f,0.3686272f,0.0632941f,0.4775673f,0.0710121f,0.482741f,0.0565781f,0.4775673f,0.0267838f,0.4797569f,0.0722958f,0.485231f,0.057024f,0.482741f,0.0565781f,0.4678438f,0.0827788f,0.4775673f,0.0710121f,0.4678438f,0.0150172f,0.6853609f,0.0093192f,0.7060668f,0.0093191f,0.7060673f,0.0594537f,0.4547434f,0.090459f,0.4678438f,0.0827788f,0.4547434f,0.007337f,0.3817922f,0.0710121f,0.3869658f,0.0565781f,0.3894559f,0.057024f,0.4398464f,0.0931263f,0.4547434f,0.090459f,0.4398464f,0.0046697f,0.4240845f,0.0928716f,0.4398464f,0.0956937f,0.4398464f,0.0931263f,0.9523082f,0.0093176f,0.9726241f,0.0093173f,0.9726246f,0.0594521f,0.3144485f,0.0847456f,0.3063502f,0.0710121f,0.3160737f,0.0827788f,0.3160737f,0.0827788f,0.3063502f,0.0710121f,0.3195152f,0.0632941f,0.3817922f,0.0710121f,0.3686272f,0.0632941f,0.3869658f,0.0565781f,0.4775673f,0.0710121f,0.4775673f,0.0267838f,0.4678438f,0.0150172f,0.482741f,0.0565781f,0.482741f,0.0412178f,0.4775673f,0.0267838f,0.485231f,0.057024f,0.482741f,0.0412178f,0.482741f,0.0565781f,0.4678438f,0.0827788f,0.4678438f,0.0150172f,0.4547434f,0.007337f,0.7060673f,0.0594537f,0.7268465f,0.009319f,0.726847f,0.0594537f,0.7060668f,0.0093191f,0.4547434f,0.090459f,0.4547434f,0.007337f,0.4398464f,0.0046697f,0.3869658f,0.0565781f,0.3894559f,0.040772f,0.3894559f,0.057024f,0.4398464f,0.0931263f,0.4398464f,0.0046697f,0.4249492f,0.007337f,0.4240845f,0.0928716f,0.4398464f,0.0931263f,0.4249493f,0.090459f,0.9523082f,0.0093176f,0.9726246f,0.0594521f,0.9523087f,0.0594522f,0.3144485f,0.0847456f,0.3041605f,0.0722959f,0.3063502f,0.0710121f,0.3063502f,0.0710121f,0.3161472f,0.0538977f,0.3195152f,0.0632941f,0.3686272f,0.0632941f,0.3719952f,0.0538977f,0.3869658f,0.0565781f,0.4775673f,0.0267838f,0.4797569f,0.0255001f,0.4678438f,0.0150172f,0.485231f,0.040772f,0.4775673f,0.0267838f,0.482741f,0.0412178f,0.485231f,0.057024f,0.485231f,0.040772f,0.482741f,0.0412178f,0.4547434f,0.007337f,0.4678438f,0.0150172f,0.4694691f,0.0130504f,0.7268465f,0.009319f,0.7475532f,0.0594535f,0.7268471f,0.0594536f,0.4398464f,0.0046697f,0.4547434f,0.007337f,0.4556083f,0.0049244f,0.3869658f,0.0565781f,0.3869658f,0.0412178f,0.3894559f,0.040772f,0.4249492f,0.007337f,0.4398464f,0.0046697f,0.4398464f,0.0021022f,0.4398464f,0.0931263f,0.4249492f,0.007337f,0.4249493f,0.090459f,0.4102236f,0.0847456f,0.4240845f,0.0928716f,0.4249493f,0.090459f,0.9317865f,0.0093177f,0.9523087f,0.0594522f,0.931787f,0.0594523f,0.9523082f,0.0093176f,0.3063502f,0.0710121f,0.3041605f,0.0722959f,0.3011766f,0.0565782f,0.3063502f,0.0710121f,0.3011766f,0.0565782f,0.3161472f,0.0538977f,0.3869658f,0.0565781f,0.3719952f,0.0538977f,0.3869658f,0.0412178f,0.485231f,0.040772f,0.4797569f,0.0255001f,0.4775673f,0.0267838f,0.4797569f,0.0255001f,0.4694691f,0.0130504f,0.4678438f,0.0150172f,0.4547434f,0.007337f,0.4694691f,0.0130504f,0.4556083f,0.0049244f,0.7268465f,0.009319f,0.7475526f,0.0093189f,0.7475532f,0.0594535f,0.4398464f,0.0046697f,0.4556083f,0.0049244f,0.4398464f,0.0021022f,0.3869658f,0.0412178f,0.3839818f,0.0255001f,0.3894559f,0.040772f,0.4240844f,0.0049244f,0.4249492f,0.007337f,0.4398464f,0.0021022f,0.4249493f,0.090459f,0.4249492f,0.007337f,0.4118488f,0.0150172f,0.4102236f,0.0847456f,0.4249493f,0.090459f,0.4118488f,0.0827788f,0.4102236f,0.0847456f,0.4118488f,0.0827788f,0.3999358f,0.0722959f,0.9317865f,0.0093177f,0.931787f,0.0594523f,0.9110805f,0.0093178f,0.3011766f,0.0565782f,0.3041605f,0.0722959f,0.2986865f,0.057024f,0.3011766f,0.0565782f,0.3161472f,0.0438983f,0.3161472f,0.0538977f,0.3719952f,0.0538977f,0.3719952f,0.0438983f,0.3869658f,0.0412178f,0.7475526f,0.0093189f,0.7680748f,0.0594534f,0.7475532f,0.0594535f,0.7883906f,0.0594532f,0.7680748f,0.0594534f,0.7680743f,0.0093188f,0.8085742f,0.0594531f,0.7883906f,0.0594532f,0.7883901f,0.0093186f,0.3869658f,0.0412178f,0.381792f,0.0267838f,0.3839818f,0.0255001f,0.8287578f,0.059453f,0.8085742f,0.0594531f,0.8085737f,0.0093185f,0.4118488f,0.0150172f,0.4249492f,0.007337f,0.4240844f,0.0049244f,0.4249493f,0.090459f,0.4118488f,0.0150172f,0.4118488f,0.0827788f,0.4118488f,0.0827788f,0.4021254f,0.0710121f,0.3999358f,0.0722959f,0.9110805f,0.0093178f,0.931787f,0.0594523f,0.911081f,0.0594525f,0.3011766f,0.0565782f,0.2986865f,0.057024f,0.3011766f,0.0412178f,0.3011766f,0.0565782f,0.3011766f,0.0412178f,0.3161472f,0.0438983f,0.3719952f,0.0438983f,0.381792f,0.0267838f,0.3869658f,0.0412178f,0.7475526f,0.0093189f,0.7680743f,0.0093188f,0.7680748f,0.0594534f,0.7883906f,0.0594532f,0.7680743f,0.0093188f,0.7883901f,0.0093186f,0.8085742f,0.0594531f,0.7883901f,0.0093186f,0.8085737f,0.0093185f,0.381792f,0.0267838f,0.3736939f,0.0130504f,0.3839818f,0.0255001f,0.8287578f,0.059453f,0.8085737f,0.0093185f,0.8287571f,0.0093183f,0.4102236f,0.0130504f,0.4118488f,0.0150172f,0.4240844f,0.0049244f,0.4118488f,0.0827788f,0.4118488f,0.0150172f,0.4021254f,0.0267839f,0.4118488f,0.0827788f,0.4021254f,0.0267839f,0.4021254f,0.0710121f,0.3999358f,0.0722959f,0.4021254f,0.0710121f,0.3944617f,0.057024f,0.8903008f,0.0093179f,0.911081f,0.0594525f,0.8903012f,0.0594526f,0.9110805f,0.0093179f,0.3011766f,0.0412178f,0.2986865f,0.057024f,0.2986865f,0.040772f,0.3161472f,0.0438983f,0.3011766f,0.0412178f,0.3195152f,0.0345019f,0.3719952f,0.0438983f,0.3686272f,0.0345019f,0.381792f,0.0267838f,0.3598331f,0.0049244f,0.3736939f,0.0130504f,0.3720687f,0.0150172f,0.3440711f,0.0021022f,0.3598331f,0.0049244f,0.3589683f,0.007337f,0.381792f,0.0267838f,0.3720687f,0.0150172f,0.3736939f,0.0130504f,0.3283093f,0.0049244f,0.3440711f,0.0021022f,0.3440711f,0.0046697f,0.8490736f,0.0594529f,0.8287578f,0.059453f,0.8287571f,0.0093183f,0.4021254f,0.0267839f,0.4118488f,0.0150172f,0.4102236f,0.0130504f,0.4021254f,0.0710121f,0.4021254f,0.0267839f,0.3969517f,0.0412178f,0.3944617f,0.057024f,0.4021254f,0.0710121f,0.3969517f,0.0565782f,0.3944617f,0.057024f,0.3969517f,0.0565782f,0.3944617f,0.040772f,0.8903008f,0.0093179f,0.8903012f,0.0594526f,0.8695948f,0.0093181f,0.3011766f,0.0412178f,0.2986865f,0.040772f,0.3063502f,0.0267839f,0.3011766f,0.0412178f,0.3063502f,0.0267839f,0.3195152f,0.0345019f,0.3686272f,0.0345019f,0.3720687f,0.0150172f,0.381792f,0.0267838f,0.3589683f,0.007337f,0.3598331f,0.0049244f,0.3720687f,0.0150172f,0.3440711f,0.0021022f,0.3589683f,0.007337f,0.3440711f,0.0046697f,0.3283093f,0.0049244f,0.3440711f,0.0046697f,0.329174f,0.007337f,0.8490736f,0.0594529f,0.8287571f,0.0093183f,0.8490731f,0.0093182f,0.4021254f,0.0267839f,0.4102236f,0.0130504f,0.3999357f,0.0255001f,0.3999357f,0.0255001f,0.3969517f,0.0412178f,0.4021254f,0.0267839f,0.4021254f,0.0710121f,0.3969517f,0.0412178f,0.3969517f,0.0565782f,0.3944617f,0.040772f,0.3969517f,0.0565782f,0.3969517f,0.0412178f,0.3063502f,0.0267839f,0.2986865f,0.040772f,0.3041605f,0.0255001f,0.8695948f,0.0093181f,0.8903012f,0.0594526f,0.8695952f,0.0594527f,0.3195152f,0.0345019f,0.3063502f,0.0267839f,0.325845f,0.0268419f,0.3686272f,0.0345019f,0.3622973f,0.0268419f,0.3720687f,0.0150172f,0.3622973f,0.0268419f,0.3589683f,0.007337f,0.3720687f,0.0150172f,0.3537691f,0.0218422f,0.3440711f,0.0046697f,0.3589683f,0.007337f,0.3440711f,0.0201058f,0.329174f,0.007337f,0.3440711f,0.0046697f,0.3144484f,0.0130504f,0.3283093f,0.0049244f,0.329174f,0.007337f,0.8490731f,0.0093182f,0.8695952f,0.0594527f,0.8490736f,0.0594529f,0.3944617f,0.040772f,0.3969517f,0.0412178f,0.3999357f,0.0255001f,0.3063502f,0.0267839f,0.3041605f,0.0255001f,0.3160736f,0.0150172f,0.8695948f,0.0093181f,0.8695952f,0.0594527f,0.8490731f,0.0093182f,0.325845f,0.0268419f,0.3063502f,0.0267839f,0.3160736f,0.0150172f,0.3622973f,0.0268419f,0.3537691f,0.0218422f,0.3589683f,0.007337f,0.3537691f,0.0218422f,0.3440711f,0.0201058f,0.3440711f,0.0046697f,0.3343733f,0.0218422f,0.329174f,0.007337f,0.3440711f,0.0201058f,0.3144484f,0.0130504f,0.329174f,0.007337f,0.3160736f,0.0150172f,0.3041605f,0.0255001f,0.3144484f,0.0130504f,0.3160736f,0.0150172f,0.325845f,0.0268419f,0.3160736f,0.0150172f,0.3343733f,0.0218422f,0.3343733f,0.0218422f,0.3160736f,0.0150172f,0.329174f,0.007337f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,1,6,6,7,2,8,7,9,8,10,9,11,3,12,10,13,4,14,11,15,12,16,13,17,14,18,15,19,16,20,17,21,18,22,19,23,20,24,21,25,22,26,23,27,7,28,9,29,3,30,24,31,10,32,25,33,26,34,27,35,15,36,28,37,16,38,22,39,21,40,29,41,19,42,18,43,30,44,31,45,32,46,33,47,34,48,35,49,36,50,24,51,37,52,10,53,38,35,39,54,40,55,41,56,42,57,43,58,44,59,45,60,46,61,47,62,48,63,49,64,50,65,51,66,52,67,53,68,54,69,55,70,56,71,31,72,33,73,57,74,35,75,34,76,24,77,58,78,37,79,59,80,60,81,61,82,42,83,62,84,43,85,48,86,63,87,49,88,45,89,64,90,46,91,55,92,54,93,65,94,51,95,66,96,52,97,67,98,68,99,69,100,70,101,71,102,72,103,73,104,74,105,75,106,58,107,76,108,37,109,77,110,78,111,79,112,80,113,81,114,82,115,83,116,84,117,85,118,86,119,87,120,88,121,89,122,90,123,91,124,92,125,93,126,94,127,95,128,96,129,97,130,98,131,99,132,100,133,101,134,67,135,69,136,102,137,70,138,72,139,73,140,103,141,74,142,58,143,104,144,76,145,105,146,106,147,107,148,108,149,109,150,110,151,111,152,112,153,113,154,84,155,114,156,85,157,115,158,116,159,117,160,91,161,118,162,119,163,118,162,91,161,90,164,120,165,121,166,122,167,96,168,123,169,97,170,124,171,125,172,126,173,127,174,128,175,129,176,130,177,131,178,132,179,133,180,134,181,135,182,136,183,137,184,138,185,139,186,140,187,141,188,142,189,143,190,144,191,145,192,146,193,147,194,148,195,145,196,147,197,149,198,150,199,151,200,118,201,152,202,119,203,153,204,154,205,155,206,156,207,157,208,158,209,159,210,160,211,161,212,162,213,163,214,164,215,165,216,127,217,129,218,166,219,132,220,167,221,132,220,166,219,130,222,135,223,134,224,168,225,169,226,170,227,171,228,172,229,173,230,174,231,175,232,143,233,142,234,176,235,151,236,150,237,154,238,177,239,155,240,178,241,179,242,180,243,160,244,181,245,161,246,157,247,182,248,158,249,183,250,184,251,185,252,186,253,187,254,188,255,189,256,190,257,191,258,189,259,191,260,192,261,166,262,167,263,193,264,194,265,195,266,196,267,197,268,198,269,199,270,200,271,201,272,202,273,179,274,203,275,180,276,204,277,205,278,206,279,207,280,208,281,209,282,210,283,211,284,212,285,213,286,214,287,215,288,216,289,184,290,183,291,217,292,218,293,219,294,220,295,221,296,222,297,223,298,224,299,225,300,194,301,196,302,226,303,227,304,228,305,229,306,230,307,231,308,232,309,233,310,206,311,205,312,208,313,234,314,209,315,214,316,235,317,215,318,211,319,236,320,212,321,237,322,238,323,239,324,240,325,241,326,242,327,243,328,244,329,245,330,246,331,247,332,248,333,222,334,221,335,249,336,250,337,225,338,251,339,225,338,250,337,223,340,252,341,253,342,254,343,255,344,256,345,257,346,258,347,259,348,260,349,261,350,262,351,263,352,264,353,265,354,266,355,267,356,263,357,262,358,268,359,269,360,270,361,271,362,237,363,239,364,272,365,241,366,240,367,273,368,274,369,275,370,276,371,277,372,278,373,276,374,278,375,279,376,250,377,251,378,280,379,252,380,254,381,281,382,282,383,283,384,284,385,259,386,285,387,260,388,266,389,265,390,286,391,269,392,287,393,270,394,288,395,289,396,290,397,291,398,292,399,293,400,294,401,295,402,296,403,296,404,297,405,294,406,298,407,299,408,300,409,301,410,302,411,303,412,304,413,305,414,306,415,307,416,308,417,309,418,310,419,311,420,312,421,259,422,313,423,285,424,313,425,314,426,285,427,315,428,316,429,314,430,317,431,318,432,316,433,319,434,288,435,290,436,293,437,320,438,291,439,301,440,303,441,321,442,304,443,306,444,322,445,307,446,309,447,323,448,312,449,311,450,324,451,313,452,315,453,314,454,315,455,317,456,316,457,325,458,318,459,317,460,326,461,327,462,328,463,329,464,326,465,328,466,312,467,324,468,325,469,325,470,324,471,318,472,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID810(GL2 gl){
double[] positionsArray = {
172.7088437,-368.6819088,151.2381614,176.539458,-403.6691643,151.3081209,172.7088343,-403.6691643,151.3081209,176.539458,-368.6819088,151.2381614,172.7088343,-403.6691643,151.3081209,176.539458,-405.071117,149.048947,172.7088343,-405.071117,149.048947,176.539458,-403.6691643,151.3081209,176.539458,-368.6819088,151.2381614,172.7088437,-366.1916937,148.4396626,176.539458,-366.1916937,148.4396626,172.7088437,-368.6819088,151.2381614,172.7088343,-405.071117,149.048947,176.539458,-404.9991797,117.3259285,172.7088343,-404.9991797,117.3259285,176.539458,-405.071117,149.048947,176.539458,-366.1916937,148.4396626,172.7088437,-366.1302008,117.1234837,176.539458,-366.1302008,117.1234837,172.7088437,-366.1916937,148.4396626,172.7088343,-404.9991797,117.3259285,176.539458,-403.168631,113.9249913,172.7088343,-403.168631,113.9249913,176.539458,-404.9991797,117.3259285,176.539458,-366.1302008,117.1234837,172.7088437,-368.6001224,113.9710491,176.539458,-368.6001224,113.9710491,172.7088437,-366.1302008,117.1234837,176.539458,-403.168631,113.9249913,172.7088437,-368.6001224,113.9710491,172.7088343,-403.168631,113.9249913,176.539458,-368.6001224,113.9710491,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,4,5,6,5,4,7,8,9,10,9,8,11,12,13,14,13,12,15,16,17,18,17,16,19,20,21,22,21,20,23,24,25,26,25,24,27,28,29,30,29,28,31,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 48, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID816(GL2 gl){
double[] positionsArray = {
176.5430904,-404.9991797,117.3259285,176.5430904,-403.6691643,151.3081209,176.5430904,-405.071117,149.048947,176.5430904,-403.168631,113.9249998,176.5431093,-368.6819088,151.2381614,176.5431093,-368.6001224,113.9710576,176.5431093,-366.1916937,148.4396626,176.5431093,-366.1302008,117.1234922,176.5431093,-366.1302008,117.1234922,176.5431093,-368.6001224,113.9710576,176.5431093,-366.1916937,148.4396626,176.5431093,-368.6819088,151.2381614,176.5430904,-403.168631,113.9249998,176.5430904,-403.6691643,151.3081209,176.5430904,-404.9991797,117.3259285,176.5430904,-405.071117,149.048947,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(0.2627451, 0.2627451, 0.2627451, 0.6);
int[] indices = {
0,1,2,1,0,3,1,3,4,4,3,5,4,5,6,6,5,7,8,9,10,10,9,11,9,12,11,11,12,13,12,14,13,15,13,14,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 36, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID822(GL2 gl){
double[] positionsArray = {
174.2977882,-488.5310256,150.3234598,176.6012269,-489.0680167,114.5175097,174.2977882,-489.0680167,114.5175097,176.6012269,-488.5310256,150.3234598,176.6012269,-489.0680167,114.5175097,174.2977882,-487.1121178,112.82949,174.2977882,-489.0680167,114.5175097,176.6012269,-487.1121178,112.82949,174.2977882,-486.6139106,152.1781015,176.6012269,-488.5310256,150.3234598,174.2977882,-488.5310256,150.3234598,176.6012269,-486.6139106,152.1781015,176.6012269,-487.1121178,112.82949,174.2977976,-446.4687036,113.1745787,174.2977882,-487.1121178,112.82949,176.6012269,-446.4687036,113.1745787,174.2977976,-444.1309066,151.7859844,176.6012269,-486.6139106,152.1781015,174.2977882,-486.6139106,152.1781015,176.6012269,-444.1309109,151.7859844,176.6012269,-444.4401912,115.4753399,174.2977976,-446.4687036,113.1745787,176.6012269,-446.4687036,113.1745787,174.2977976,-444.4401954,115.4753399,174.2977976,-442.1983419,150.1681116,176.6012269,-444.1309109,151.7859844,174.2977976,-444.1309066,151.7859844,176.6012269,-442.1983419,150.1681116,176.6012269,-442.1983419,150.1681116,174.2977976,-444.4401954,115.4753399,176.6012269,-444.4401912,115.4753399,174.2977976,-442.1983419,150.1681116,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,4,5,6,5,4,7,8,9,10,9,8,11,12,13,14,13,12,15,16,17,18,17,16,19,20,21,22,21,20,23,24,25,26,25,24,27,28,29,30,29,28,31,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 48, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID828(GL2 gl){
double[] positionsArray = {
176.6012458,-493.3201857,98.9235001,174.2982233,-493.4449746,95.4576017,176.6012458,-493.4449746,95.4576017,174.2982233,-493.3201857,98.9235001,176.6012458,-491.4624755,146.173251,174.2982233,-491.4624755,146.173251,176.601246,-493.6453254,49.593668,174.2982233,-493.6454473,49.5455919,176.6012458,-493.6454473,49.5455919,176.6012458,-490.8640535,153.5441236,174.2982233,-491.4124539,146.789184,176.6012469,-493.6478069,49.3079045,174.2982233,-493.766596,36.0863729,176.6012458,-493.766596,36.0863729,176.601246,-493.6460187,49.4903062,176.6012458,-490.8640535,153.5441236,174.2982233,-490.8367621,153.8804435,174.2982233,-491.4124539,146.789184,176.6012458,-490.8367621,153.8804435,176.6012458,-490.8347562,153.8825671,174.2982233,-490.8367621,153.8804435,176.6012458,-490.8367621,153.8804435,174.2982233,-490.7948456,153.9250917,174.2982233,-490.8367621,153.8804435,176.6012458,-490.8347562,153.8825671,176.6012458,-489.4611544,155.3461527,174.2982233,-490.7948456,153.9250917,176.6012458,-490.8347562,153.8825671,174.2982233,-489.4611544,155.3461527,176.6012458,-489.4611544,155.3461527,174.2982236,-487.8226489,155.3616928,174.2982233,-489.4611544,155.3461527,176.6012458,-489.3834158,155.3468899,176.6012458,-489.3834158,155.3468899,174.2982266,-470.6156899,155.5248911,174.2982236,-487.8226489,155.3616928,176.6012461,-488.5673336,155.3546299,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,4,3,0,3,4,5,6,7,8,7,6,1,1,6,2,9,5,4,5,9,10,11,12,13,12,11,7,7,11,14,7,14,8,15,16,17,16,15,18,19,20,21,22,23,24,25,26,27,26,25,28,29,30,31,30,29,32,33,34,35,34,33,36,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 69, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID834(GL2 gl){
double[] positionsArray = {
174.2982327,-435.7022114,128.422738,176.6012647,-435.7701838,77.5450089,174.2982327,-435.7701838,77.5450089,176.6012647,-435.667307,154.5554736,174.2982327,-435.6655864,155.8563733,176.6012647,-435.667307,154.5554736,174.2982327,-435.7022114,128.422738,176.6012647,-435.6655864,155.8563733,174.2982327,-435.7701838,77.5450089,176.6012647,-435.8195978,77.5278478,174.2982327,-436.8128566,77.1831002,176.6012647,-435.7701838,77.5450089,176.6012647,-435.8195978,77.5278478,174.2982327,-442.6766723,75.147849,174.2982327,-436.8128566,77.1831002,176.6012647,-442.6766723,75.147849,174.2982327,-442.6766723,75.147849,176.6012458,-448.7210271,71.3443467,174.2982327,-448.7210271,71.3443467,176.6012647,-442.6766723,75.147849,176.6012659,-442.7196751,75.1210695,176.6012458,-448.7588736,71.3097758,174.2982313,-449.5194312,70.6154032,174.2982313,-449.5194312,70.6154032,176.6012458,-454.0095043,66.5160775,174.2982233,-454.0095043,66.5160775,176.6012458,-448.7588736,71.3097758,176.6012458,-454.0433537,66.4691081,174.2982233,-454.7236149,65.5255949,174.2982233,-454.7236149,65.5255949,176.6012458,-458.7374053,59.9585461,174.2982233,-458.7374053,59.9585461,176.6012458,-454.0433537,66.4691081,174.2982233,-458.7374053,59.9585461,176.6012458,-462.2056592,49.6245944,174.2982233,-462.2056592,49.6245944,176.6012458,-458.7374053,59.9585461,176.6012458,-464.5941516,36.0863644,174.2982233,-464.5941516,36.0863644,174.2982233,-464.5941516,36.0863644,176.6012458,-493.766596,36.0863729,174.2982233,-493.7464126,36.0863729,176.6012458,-464.5941516,36.0863644,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,4,5,6,5,4,7,8,9,10,9,8,11,12,13,14,13,12,15,16,17,18,17,16,19,17,19,20,18,21,22,21,18,17,23,24,25,24,23,26,25,27,28,27,25,24,29,30,31,30,29,32,33,34,35,34,33,36,35,37,38,37,35,34,39,40,41,40,39,42,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 75, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID840(GL2 gl){
double[] positionsArray = {
176.6012269,-487.1121178,112.82949,176.6012269,-488.5310256,150.3234598,176.6012269,-489.0680167,114.5175097,176.6012269,-486.6139106,152.1781015,176.6012269,-446.4687036,113.1745787,176.6012269,-444.1309109,151.7859844,176.6012269,-444.4401912,115.4753399,176.6012269,-442.1983419,150.1681116,176.6012269,-442.1983419,150.1681116,176.6012269,-444.4401912,115.4753399,176.6012269,-444.1309109,151.7859844,176.6012269,-446.4687036,113.1745787,176.6012269,-486.6139106,152.1781015,176.6012269,-487.1121178,112.82949,176.6012269,-488.5310256,150.3234598,176.6012269,-489.0680167,114.5175097,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(0.2627451, 0.2627451, 0.2627451, 0.6);
int[] indices = {
0,1,2,1,0,3,3,0,4,3,4,5,5,4,6,5,6,7,8,9,10,9,11,10,10,11,12,11,13,12,12,13,14,15,14,13,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 36, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID846(GL2 gl){
double[] positionsArray = {
181.4489745,-482.9629685,117.5972685,182.411055,-482.7311837,108.0409775,181.4489745,-482.9629685,108.9606263,182.411055,-482.7311837,108.0409775,182.1366992,-484.650425,109.4018071,181.4489745,-482.9629685,108.9606263,181.4489745,-482.9629685,108.9606263,182.1366992,-484.6504421,117.1560877,181.4489745,-482.9629685,117.5972685,181.4489745,-482.9629685,117.5972685,193.6768977,-480.0169576,108.9606263,182.411055,-482.7311837,108.0409775,181.4489745,-482.9629685,108.9606263,182.1366992,-484.650425,109.4018071,182.1366992,-484.6504421,117.1560877,183.0987418,-484.4186403,108.4821497,182.1366992,-484.650425,109.4018071,182.411055,-482.7311837,108.0409775,183.0987418,-484.4186403,118.0757451,181.4489745,-482.9629685,117.5972685,182.1366992,-484.6504421,117.1560877,192.7148362,-480.2487424,118.5169173,193.6768977,-480.0169576,108.9606263,181.4489745,-482.9629685,117.5972685,193.6768977,-480.0169576,108.9606263,192.7148362,-480.2487424,108.040969,182.411055,-482.7311837,108.0409775,182.1366992,-484.6504421,117.1560877,182.1366992,-484.650425,109.4018071,188.7116096,-485.3444866,115.7693128,192.7148362,-480.2487424,108.040969,183.0987418,-484.4186403,108.4821497,182.411055,-482.7311837,108.0409775,188.7115907,-485.3444866,110.788582,182.1366992,-484.650425,109.4018071,183.0987418,-484.4186403,108.4821497,183.0987418,-484.4186403,118.0757451,183.0987418,-484.4186403,118.0757451,182.411055,-482.7311837,118.5169173,181.4489745,-482.9629685,117.5972685,192.7148362,-480.2487424,118.5169173,181.4489745,-482.9629685,117.5972685,182.411055,-482.7311837,118.5169173,192.7148362,-480.2487424,118.5169173,193.6768977,-480.0169576,117.59726,193.6768977,-480.0169576,108.9606263,193.6768977,-480.0169576,108.9606263,193.0576391,-482.0193122,108.4821497,192.7148362,-480.2487424,108.040969,188.7116096,-485.3444866,115.7693128,193.0576391,-482.0193122,108.4821497,183.0987418,-484.4186403,108.4821497,192.7148362,-480.2487424,108.040969,188.7115907,-485.3444866,110.788582,183.0987418,-484.4186403,108.4821497,193.0576391,-482.0193122,108.4821497,183.0987418,-484.4186403,118.0757451,188.7116096,-485.3444866,115.7693128,193.0576391,-482.0193122,118.0757366,193.0576391,-482.0193122,118.0757366,182.411055,-482.7311837,118.5169173,183.0987418,-484.4186403,118.0757451,193.0576391,-482.0193122,118.0757366,192.7148362,-480.2487424,118.5169173,182.411055,-482.7311837,118.5169173,194.0197006,-481.7875274,117.1560877,193.6768977,-480.0169576,117.59726,192.7148362,-480.2487424,118.5169173,193.6768977,-480.0169576,117.59726,194.0197006,-481.7875274,109.4018071,193.6768977,-480.0169576,108.9606263,194.0197006,-481.7875274,109.4018071,193.0576391,-482.0193122,108.4821497,193.6768977,-480.0169576,108.9606263,194.0197006,-481.7875274,117.1560877,188.7116096,-485.3444866,115.7693128,188.7115907,-485.3444866,110.788582,188.7115907,-485.3444866,110.788582,193.0576391,-482.0193122,108.4821497,194.0197006,-481.7875274,109.4018071,193.0576391,-482.0193122,118.0757366,194.0197006,-481.7875274,117.1560877,192.7148362,-480.2487424,118.5169173,193.0576391,-482.0193122,118.0757366,193.6768977,-480.0169576,117.59726,194.0197006,-481.7875274,117.1560877,194.0197006,-481.7875274,109.4018071,194.0197006,-481.7875274,117.1560877,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.0767497f,0.9826065f,0.0714242f,0.9288553f,0.0767497f,0.9335491f,0.0723138f,0.8573902f,0.0714335f,0.8655906f,0.0776396f,0.862084f,0.0776396f,0.862084f,0.0714335f,0.9076346f,0.0776396f,0.9111413f,0.0767497f,0.9826065f,0.0090601f,0.9335492f,0.0714242f,0.9288553f,0.0776396f,0.862084f,0.0714335f,0.8655906f,0.0714335f,0.9076346f,0.0669582f,0.8609888f,0.0714335f,0.8655906f,0.0723138f,0.8573902f,0.0669582f,0.9122364f,0.0776396f,0.9111413f,0.0714335f,0.9076346f,0.0143859f,0.9873003f,0.0090601f,0.9335492f,0.0767497f,0.9826065f,0.0090601f,0.9335492f,0.0143856f,0.9288554f,0.0714242f,0.9288553f,0.0714335f,0.9076346f,0.0714335f,0.8655906f,0.0437948f,0.9006955f,0.0152755f,0.8573902f,0.0669582f,0.8609888f,0.0723138f,0.8573902f,0.0437948f,0.8725298f,0.0714335f,0.8655907f,0.0669583f,0.8609889f,0.0669582f,0.9122363f,0.0714335f,0.9076346f,0.0437948f,0.9006954f,0.0669582f,0.9122364f,0.0723138f,0.9158351f,0.0776396f,0.9111413f,0.0143859f,0.9873003f,0.0767497f,0.9826065f,0.0714242f,0.9873003f,0.0143859f,0.9873003f,0.0090601f,0.9826065f,0.0090601f,0.9335492f,0.00995f,0.862084f,0.0206311f,0.8609888f,0.0152755f,0.8573902f,0.0437948f,0.9006955f,0.0714335f,0.8655906f,0.0437948f,0.8725297f,0.0206311f,0.8609888f,0.0669582f,0.8609888f,0.0152755f,0.8573902f,0.0437948f,0.8725297f,0.0669582f,0.8609888f,0.0206311f,0.8609888f,0.0669582f,0.9122364f,0.0437948f,0.9006955f,0.0206314f,0.9122364f,0.0206314f,0.9122364f,0.0723138f,0.9158351f,0.0669582f,0.9122364f,0.0206314f,0.9122364f,0.0152755f,0.9158351f,0.0723138f,0.9158351f,0.016156f,0.9076346f,0.00995f,0.9111413f,0.0152755f,0.9158351f,0.00995f,0.9111413f,0.016156f,0.8655906f,0.00995f,0.862084f,0.016156f,0.8655906f,0.0206311f,0.8609888f,0.00995f,0.862084f,0.016156f,0.9076346f,0.0437948f,0.9006955f,0.0437948f,0.8725297f,0.0437948f,0.8725298f,0.0206311f,0.8609889f,0.016156f,0.8655906f,0.0437948f,0.9006954f,0.016156f,0.9076345f,0.016156f,0.9076346f,0.0152755f,0.9158351f,0.0206314f,0.9122364f,0.00995f,0.9111413f,0.016156f,0.9076346f,0.016156f,0.8655906f,0.016156f,0.9076346f,0.0437948f,0.8725297f,0.016156f,0.8655906f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,27,37,29,38,37,39,38,40,39,41,40,42,41,43,42,44,43,45,44,46,45,47,46,48,47,49,48,50,49,51,34,52,33,53,50,54,51,55,52,56,53,57,54,58,55,59,56,60,57,61,58,62,59,63,60,64,61,65,62,66,63,67,64,68,65,69,66,70,67,71,68,72,69,73,70,74,71,75,72,76,73,77,74,78,75,79,76,80,77,81,78,82,79,83,80,62,75,84,74,85,81,86,82,87,83,88,84,89,85,90,86,91,87,92,77,93,79,94,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID854(GL2 gl){
double[] positionsArray = {
181.4489934,-482.9629685,147.174891,182.411055,-482.7311837,120.2946087,181.4489745,-482.9629685,121.2142576,182.411055,-482.7311837,120.2946087,182.1366992,-484.650425,121.6554383,181.4489745,-482.9629685,121.2142576,181.4489745,-482.9629685,121.2142576,182.1366992,-484.6504421,146.7337103,181.4489934,-482.9629685,147.174891,181.4489934,-482.9629685,147.174891,193.6768977,-480.0169406,121.2142576,182.411055,-482.7311837,120.2946087,192.7148551,-480.2487424,148.0945484,181.4489745,-482.9629685,121.2142576,182.1366992,-484.650425,121.6554383,182.1366992,-484.6504421,146.7337103,183.0987418,-484.4186403,120.735781,182.1366992,-484.650425,121.6554383,182.411055,-482.7311837,120.2946087,183.0987418,-484.4186403,147.6533676,181.4489934,-482.9629685,147.174891,182.1366992,-484.6504421,146.7337103,192.7148551,-480.2487424,148.0945484,193.6768977,-480.0169576,147.174891,193.6768977,-480.0169406,121.2142576,193.6768977,-480.0169406,121.2142576,192.7148362,-480.2487254,120.2946087,182.411055,-482.7311837,120.2946087,192.7148551,-480.2487424,148.0945484,181.4489934,-482.9629685,147.174891,182.411055,-482.7311837,148.0945484,182.1366992,-484.6504421,146.7337103,182.1366992,-484.650425,121.6554383,188.7116096,-485.3444866,145.3469354,192.7148362,-480.2487254,120.2946087,183.0987418,-484.4186403,120.735781,182.411055,-482.7311837,120.2946087,188.7116096,-485.3444866,123.0422132,182.1366992,-484.650425,121.6554383,183.0987418,-484.4186403,120.735781,183.0987418,-484.4186403,147.6533676,183.0987418,-484.4186403,147.6533676,182.411055,-482.7311837,148.0945484,181.4489934,-482.9629685,147.174891,194.0197006,-481.7875274,146.7337103,193.6768977,-480.0169576,147.174891,192.7148551,-480.2487424,148.0945484,193.6768977,-480.0169406,121.2142576,193.6768977,-480.0169576,147.174891,194.0197006,-481.7875104,121.6554298,193.6768977,-480.0169406,121.2142576,193.0576391,-482.0192952,120.735781,192.7148362,-480.2487254,120.2946087,193.0576391,-482.0192952,147.6533676,192.7148551,-480.2487424,148.0945484,182.411055,-482.7311837,148.0945484,188.7116096,-485.3444866,145.3469354,193.0576391,-482.0192952,120.735781,183.0987418,-484.4186403,120.735781,192.7148362,-480.2487254,120.2946087,188.7116096,-485.3444866,123.0422132,183.0987418,-484.4186403,120.735781,193.0576391,-482.0192952,120.735781,183.0987418,-484.4186403,147.6533676,188.7116096,-485.3444866,145.3469354,193.0576391,-482.0192952,147.6533676,193.0576391,-482.0192952,147.6533676,182.411055,-482.7311837,148.0945484,183.0987418,-484.4186403,147.6533676,193.6768977,-480.0169576,147.174891,194.0197006,-481.7875274,146.7337103,194.0197006,-481.7875104,121.6554298,194.0197006,-481.7875274,146.7337103,192.7148551,-480.2487424,148.0945484,193.0576391,-482.0192952,147.6533676,194.0197006,-481.7875104,121.6554298,193.0576391,-482.0192952,120.735781,193.6768977,-480.0169406,121.2142576,194.0197006,-481.7875274,146.7337103,188.7116096,-485.3444866,145.3469354,188.7116096,-485.3444866,123.0422132,188.7116096,-485.3444866,123.0422132,193.0576391,-482.0192952,120.735781,194.0197006,-481.7875104,121.6554298,193.0576391,-482.0192952,147.6533676,194.0197006,-481.7875274,146.7337103,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.1486008f,0.8124136f,0.1432753f,0.6752197f,0.1486008f,0.6799134f,0.0712891f,0.6752197f,0.0704088f,0.6834201f,0.0766149f,0.6799134f,0.0766149f,0.6799134f,0.0704088f,0.8089069f,0.0766149f,0.8124136f,0.1486009f,0.8124136f,0.0809113f,0.6799135f,0.1432751f,0.6752197f,0.086237f,0.8171074f,0.0766149f,0.6799134f,0.0704088f,0.6834201f,0.0704088f,0.8089069f,0.0659335f,0.6788182f,0.0704088f,0.6834201f,0.0712891f,0.6752197f,0.0659335f,0.8135087f,0.0766149f,0.8124136f,0.0704088f,0.8089069f,0.086237f,0.8171074f,0.0809113f,0.8124136f,0.0809113f,0.6799135f,0.0809113f,0.6799135f,0.0862367f,0.6752197f,0.1432753f,0.6752197f,0.086237f,0.8171074f,0.1486008f,0.8124136f,0.1432753f,0.8171074f,0.0704088f,0.8089069f,0.0704088f,0.6834201f,0.04277f,0.8019679f,0.0142508f,0.6752197f,0.0659335f,0.6788182f,0.0712891f,0.6752197f,0.04277f,0.6903591f,0.0704088f,0.68342f,0.0659335f,0.6788181f,0.0659334f,0.8135084f,0.0704088f,0.8089066f,0.04277f,0.8019675f,0.0659335f,0.8135087f,0.0712891f,0.8171074f,0.0766149f,0.8124136f,0.0151314f,0.8089069f,0.0089253f,0.8124136f,0.0142508f,0.8171074f,0.0089253f,0.6799135f,0.0089253f,0.8124136f,0.0151314f,0.6834201f,0.0089253f,0.6799135f,0.0196065f,0.6788182f,0.0142508f,0.6752197f,0.0196066f,0.8135087f,0.0142508f,0.8171074f,0.0712891f,0.8171074f,0.04277f,0.8019679f,0.0704088f,0.6834201f,0.04277f,0.6903592f,0.0196065f,0.6788182f,0.0659335f,0.6788182f,0.0142508f,0.6752197f,0.04277f,0.6903592f,0.0659335f,0.6788182f,0.0196065f,0.6788182f,0.0659335f,0.8135087f,0.04277f,0.8019679f,0.0196066f,0.8135087f,0.0196066f,0.8135087f,0.0712891f,0.8171074f,0.0659335f,0.8135087f,0.0089253f,0.8124136f,0.0151314f,0.8089069f,0.0151314f,0.6834201f,0.0151314f,0.8089069f,0.0142508f,0.8171074f,0.0196066f,0.8135087f,0.0151314f,0.6834201f,0.0196065f,0.6788182f,0.0089253f,0.6799135f,0.0151314f,0.8089069f,0.04277f,0.8019679f,0.04277f,0.6903592f,0.04277f,0.690359f,0.0151313f,0.6834199f,0.0196066f,0.8135085f,0.04277f,0.8019676f,0.0151313f,0.8089067f,0.0151314f,0.8089069f,0.04277f,0.6903592f,0.0151314f,0.6834201f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,10,10,9,9,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,31,41,33,42,41,43,42,44,43,45,44,46,45,47,46,48,47,49,48,50,49,51,50,52,51,53,52,54,53,55,54,56,55,57,56,58,38,59,37,60,57,61,58,62,59,63,60,64,61,65,62,66,63,67,64,68,65,69,66,70,67,71,68,72,69,73,70,74,71,75,72,76,73,77,74,78,75,79,76,80,77,81,78,82,79,83,80,84,81,85,82,53,83,86,84,87,79,88,78,89,85,90,81,91,83,92,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID862(GL2 gl){
double[] positionsArray = {
176.3432166,-485.8772038,107.919187,176.3495922,-485.8772038,106.3462565,181.6394458,-485.8772038,106.7284366,181.6394458,-485.8772038,106.7284366,176.3495922,-485.8772038,106.3462565,176.3495827,-484.5994957,106.3462565,180.7838196,-485.8772038,108.0852471,181.6394458,-484.5994957,106.7284366,181.6394458,-485.8772038,106.7284366,176.3495827,-484.5994957,106.3462565,181.6608237,-485.8772038,109.5632861,180.7838196,-484.5994957,108.0852471,176.3432166,-485.8772038,107.919187,180.7838196,-485.8772038,108.0852471,176.3432166,-484.5994957,107.919187,181.6394458,-484.5994957,106.7284366,176.3495827,-484.5994957,106.3462565,181.6394458,-484.5994957,106.7284366,183.0567428,-484.5994957,109.3239286,181.6394458,-485.8772038,106.7284366,180.7838196,-484.5994957,108.0852471,180.7838196,-485.8772038,108.0852471,181.6608237,-485.8772038,109.5632861,183.0567428,-485.8772038,109.3239286,176.3432166,-484.5994957,107.919187,180.7838196,-484.5994957,108.0852471,181.6608237,-484.5994957,109.5632861,183.0567428,-484.5994957,109.3239286,183.0567428,-484.5994957,109.3239286,183.0567428,-485.8772038,109.3239286,181.6394458,-485.8772038,106.7284366,180.7838196,-484.5994957,108.0852471,181.6608237,-485.8772038,109.5632861,181.6608237,-484.5994957,109.5632861,183.0379757,-485.8772038,152.0437854,181.6796097,-484.5994957,151.6681023,183.0379757,-484.5994957,152.0437854,183.0567428,-485.8772038,109.3239286,183.0567428,-484.5994957,109.3239286,181.6608237,-484.5994957,109.5632861,181.6608237,-485.8772038,109.5632861,181.6796097,-485.8772038,151.6681023,183.0379757,-484.5994957,152.0437854,183.0379757,-485.8772038,152.0437854,183.0567428,-485.8772038,109.3239286,181.6796097,-485.8772038,151.6681023,181.6796097,-484.5994957,151.6681023,183.0379757,-484.5994957,152.0437854,183.0379757,-484.5994957,152.0437854,181.0019308,-485.8772038,154.1003697,183.0379757,-485.8772038,152.0437854,181.0019308,-485.8772038,154.1003697,181.6796097,-484.5994957,151.6681023,181.6796097,-485.8772038,151.6681023,180.4217766,-484.5994957,152.8954077,181.0019308,-484.5994957,154.1003697,181.0019308,-484.5994957,154.1003697,180.4217766,-485.8772038,152.8954077,180.4217766,-484.5994957,152.8954077,181.6796097,-485.8772038,151.6681023,180.4217766,-485.8772038,152.8954077,180.4217766,-484.5994957,152.8954077,181.0019308,-484.5994957,154.1003697,176.5411796,-484.5994957,154.7671987,181.0019308,-485.8772038,154.1003697,176.52648,-485.8772038,153.145392,176.52648,-484.5994957,153.145392,180.4217766,-484.5994957,152.8954077,180.4217766,-485.8772038,152.8954077,176.52648,-485.8772038,153.145392,176.5411796,-484.5994957,154.7671987,176.5411796,-485.8772038,154.7671987,176.5411796,-485.8772038,154.7671987,180.4217766,-484.5994957,152.8954077,176.52648,-485.8772038,153.145392,176.52648,-484.5994957,153.145392,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.9305828f,0.2990235f,0.9366812f,0.2988881f,0.9366257f,0.3121112f,0.9366257f,0.3121112f,0.9366812f,0.2988881f,0.9435516f,0.2988881f,0.9306147f,0.311965f,0.9305828f,0.2990235f,0.9366257f,0.3121112f,0.9434913f,0.3121112f,0.9366257f,0.3121112f,0.9435516f,0.2988881f,0.9304586f,0.3251693f,0.9306147f,0.311965f,0.9366257f,0.3121112f,0.9239166f,0.311965f,0.9305828f,0.2990235f,0.9306146f,0.311965f,0.9500245f,0.2990235f,0.9434913f,0.3121112f,0.9435516f,0.2988881f,0.9434913f,0.3121112f,0.9434105f,0.3251955f,0.9366257f,0.3121112f,0.9239167f,0.311965f,0.9306147f,0.311965f,0.9304587f,0.3251693f,0.9304586f,0.3251693f,0.9366257f,0.3121112f,0.9365514f,0.3251955f,0.9239167f,0.311965f,0.9238122f,0.2990235f,0.9305829f,0.2990235f,0.9499894f,0.311965f,0.9434913f,0.3121112f,0.9500245f,0.2990235f,0.9501616f,0.3251693f,0.9434105f,0.3251955f,0.9434913f,0.3121112f,0.9434105f,0.3251955f,0.9365514f,0.3251955f,0.9366257f,0.3121112f,0.9239166f,0.311965f,0.9304586f,0.3251693f,0.923405f,0.3251693f,0.9364694f,0.4941932f,0.9304586f,0.3251693f,0.9365514f,0.3251955f,0.9501616f,0.3251693f,0.9434913f,0.3121112f,0.9499894f,0.311965f,0.9500712f,0.4941941f,0.9434105f,0.3251955f,0.9501616f,0.3251693f,0.9433213f,0.4941932f,0.9365514f,0.3251955f,0.9434105f,0.3251955f,0.923405f,0.3251693f,0.9304586f,0.3251693f,0.9305406f,0.4941941f,0.9433213f,0.4941932f,0.9364694f,0.4941932f,0.9365514f,0.3251955f,0.9364694f,0.4941932f,0.9305406f,0.4941941f,0.9304586f,0.3251693f,0.923405f,0.3251693f,0.9305406f,0.4941941f,0.9236739f,0.4941941f,0.9433213f,0.4941932f,0.9434105f,0.3251955f,0.9500712f,0.4941941f,0.9433213f,0.4941932f,0.9365376f,0.506667f,0.9364694f,0.4941932f,0.9365376f,0.506667f,0.9305406f,0.4941941f,0.9364694f,0.4941932f,0.9236739f,0.4941941f,0.9305406f,0.4941941f,0.9236464f,0.5066746f,0.9433953f,0.506667f,0.9433213f,0.4941932f,0.9500712f,0.4941941f,0.9433953f,0.506667f,0.9365376f,0.506667f,0.9433213f,0.4941932f,0.9365376f,0.506667f,0.9305323f,0.5066746f,0.9305406f,0.4941941f,0.9433953f,0.506667f,0.9500712f,0.4941941f,0.9500803f,0.5066746f,0.9305406f,0.4941941f,0.9305323f,0.5066746f,0.9236464f,0.5066746f,0.9433953f,0.506667f,0.9433112f,0.5250497f,0.9365376f,0.506667f,0.9365376f,0.506667f,0.930574f,0.5251213f,0.9305323f,0.5066746f,0.9433953f,0.506667f,0.9500803f,0.5066746f,0.9500342f,0.5251213f,0.9236464f,0.5066746f,0.9305323f,0.5066746f,0.930574f,0.5251213f,0.9433112f,0.5250497f,0.9433953f,0.506667f,0.9500342f,0.5251213f,0.9365376f,0.506667f,0.9433112f,0.5250497f,0.9364602f,0.5250497f,0.9364602f,0.5250497f,0.930574f,0.5251213f,0.9365376f,0.506667f,0.9236464f,0.5066746f,0.930574f,0.5251213f,0.9237835f,0.5251213f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,0,7,2,8,7,9,8,10,9,11,10,12,6,13,2,14,11,15,12,16,13,17,14,18,15,19,16,20,17,21,18,22,19,23,20,24,21,25,22,26,10,27,2,28,23,29,11,30,24,31,12,32,25,33,15,34,14,35,26,36,27,37,15,38,28,39,29,40,30,41,31,42,32,43,33,44,34,45,10,46,23,47,26,48,15,49,25,50,35,51,27,52,26,53,36,54,37,55,38,56,39,57,40,58,41,59,42,60,43,61,44,62,34,63,45,64,10,65,39,66,41,67,46,68,47,69,27,70,35,71,48,72,49,73,50,74,51,75,45,76,34,77,52,78,53,79,54,80,55,81,47,82,35,83,56,84,49,85,48,86,51,87,57,88,45,89,55,90,35,91,58,92,59,93,60,94,61,95,62,96,63,97,64,98,51,99,65,100,57,101,55,102,58,103,66,104,67,105,68,106,69,107,70,108,55,109,66,110,64,111,63,112,71,113,72,114,65,115,51,116,73,117,74,118,75,119,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID870(GL2 gl){
double[] positionsArray = {
14.5244021,-129.4920332,41.0515723,14.5244033,-144.0844387,41.0515766,14.5243986,-136.7882359,43.710233,14.5244021,-129.4920332,41.0515723,14.5243998,-147.9666723,34.3196233,14.5244033,-144.0844387,41.0515766,23.8580068,-136.7882359,50.5607496,14.5243986,-136.7882359,43.710233,14.5244033,-144.0844387,41.0515766,23.8580092,-125.0936676,46.2993728,14.5244021,-129.4920332,41.0515723,14.5243986,-136.7882359,43.710233,23.8580092,-148.4828043,46.2993813,14.5244033,-144.0844387,41.0515766,14.5243998,-147.9666723,34.3196233,14.5244057,-125.6097996,34.3196105,14.5243998,-147.9666723,34.3196233,14.5244021,-129.4920332,41.0515723,23.8580092,-125.0936676,46.2993728,14.5243986,-136.7882359,43.710233,23.8580068,-136.7882359,50.5607496,23.8580092,-148.4828043,46.2993813,23.8580068,-136.7882359,50.5607496,14.5244033,-144.0844387,41.0515766,23.8580092,-125.0936676,46.2993728,23.8580128,-118.8711323,35.5091943,14.5244021,-129.4920332,41.0515723,23.8580092,-148.4828043,46.2993813,14.5243998,-147.9666723,34.3196233,23.8580092,-154.7053396,35.5092071,14.5244021,-129.4920332,41.0515723,23.8580128,-118.8711323,35.5091943,14.5244057,-125.6097996,34.3196105,14.5244057,-125.6097996,34.3196105,14.5244009,-146.6183877,26.6643256,14.5243998,-147.9666723,34.3196233,14.5244045,-126.9580842,26.6643171,23.8580092,-125.0936676,46.2993728,23.8580068,-136.7882359,50.5607496,16.0630648,-126.1482833,50.842925,23.8580092,-148.4828043,46.2993813,16.063073,-140.5195866,53.3798931,23.8580068,-136.7882359,50.5607496,23.8580092,-125.0936676,46.2993728,16.0630695,-116.7680927,39.6511691,23.8580128,-118.8711323,35.5091943,23.8580092,-154.7053396,35.5092071,14.5243998,-147.9666723,34.3196233,14.5244009,-146.6183877,26.6643256,23.8580092,-148.4828043,46.2993813,23.8580092,-154.7053396,35.5092071,16.0630659,-153.1574881,46.075006,23.8580128,-118.8711323,35.5091943,23.8580163,-121.0321776,23.2390567,14.5244057,-125.6097996,34.3196105,14.5244057,-125.6097996,34.3196105,23.8580163,-121.0321776,23.2390567,14.5244045,-126.9580842,26.6643171,14.5244045,-126.9580842,26.6643171,14.5244045,-140.6704696,21.6676759,14.5244009,-146.6183877,26.6643256,16.0630683,-120.4726349,46.074989,16.0630789,-133.1105363,53.3798889,16.0630648,-126.1482833,50.842925,16.0630695,-147.4818056,50.8429335,16.063073,-140.5195866,53.3798931,16.0630718,-115.4815221,32.3462862,16.0630695,-116.7680927,39.6511691,23.8580092,-154.7053396,35.5092071,14.5244009,-146.6183877,26.6643256,23.8580151,-152.5442943,23.2390567,16.0630659,-153.1574881,46.075006,23.8580092,-154.7053396,35.5092071,16.0630636,-156.8620302,39.6511904,23.8580128,-118.8711323,35.5091943,16.0630789,-116.7681267,25.0413906,23.8580163,-121.0321776,23.2390567,23.8580199,-130.5656666,15.2302959,14.5244045,-126.9580842,26.6643171,23.8580163,-121.0321776,23.2390567,23.8580151,-152.5442943,23.2390567,14.5244009,-146.6183877,26.6643256,14.5244045,-140.6704696,21.6676759,14.5244045,-126.9580842,26.6643171,14.5244104,-132.9060023,21.6676759,14.5244045,-140.6704696,21.6676759,16.0630789,-116.7681267,25.0413906,23.8580151,-152.5442943,23.2390567,16.0630718,-158.1486008,32.3462905,16.0630778,-120.4726349,18.617575,23.8580199,-130.5656666,15.2302959,23.8580163,-121.0321776,23.2390567,16.0630825,-126.1482833,13.8496348,23.8580199,-130.5656666,15.2302959,14.5244104,-132.9060023,21.6676759,14.5244045,-126.9580842,26.6643171,23.8580163,-143.0107713,15.2302959,23.8580151,-152.5442943,23.2390567,14.5244045,-140.6704696,21.6676759,23.8580163,-143.0107713,15.2302959,14.5244045,-140.6704696,21.6676759,14.5244104,-132.9060023,21.6676759,16.0630718,-158.1486008,32.3462905,23.8580151,-152.5442943,23.2390567,16.063073,-156.8620302,25.0413949,16.0630825,-126.1482833,13.8496348,16.0630789,-133.1105363,11.3126836,23.8580199,-130.5656666,15.2302959,23.8580163,-143.0107713,15.2302959,14.5244104,-132.9060023,21.6676759,23.8580163,-143.0107713,15.2302959,16.0630754,-153.1574881,18.617575,16.063073,-140.5195866,11.3126836,23.8580199,-130.5656666,15.2302959,16.063073,-140.5195866,11.3126836,23.8580163,-143.0107713,15.2302959,16.0630778,-147.4818396,13.8496518,16.0630754,-153.1574881,18.617575,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.7836283f,0.4766284f,0.7350134f,0.4766285f,0.7593209f,0.4856121f,0.7836283f,0.4766284f,0.7220796f,0.4538811f,0.7350134f,0.4766285f,0.7593209f,0.5161457f,0.7593209f,0.4856121f,0.7350134f,0.4766285f,0.8029568f,0.5000185f,0.7836283f,0.4766284f,0.7593209f,0.4856121f,0.7156849f,0.5000187f,0.7350134f,0.4766285f,0.7220796f,0.4538811f,0.7965618f,0.4538811f,0.7220796f,0.4538811f,0.7836283f,0.4766284f,0.8029568f,0.5000185f,0.7593209f,0.4856121f,0.7593209f,0.5161457f,0.7156849f,0.5000187f,0.7593209f,0.5161457f,0.7350134f,0.4766285f,0.8029568f,0.5000185f,0.8261749f,0.4591832f,0.7836283f,0.4766284f,0.7156849f,0.5000187f,0.7220796f,0.4538811f,0.6924667f,0.4591832f,0.7836283f,0.4766284f,0.8261749f,0.4591832f,0.7965618f,0.4538811f,0.7965618f,0.4538811f,0.7265715f,0.4280137f,0.7220796f,0.4538811f,0.79207f,0.4280137f,0.8029568f,0.5000185f,0.7593209f,0.5161457f,0.7991217f,0.5172137f,0.7156849f,0.5000187f,0.7454981f,0.5268149f,0.7593209f,0.5161457f,0.8029572f,0.5000188f,0.8341224f,0.4748587f,0.8261754f,0.4591834f,0.6924667f,0.4591832f,0.7220796f,0.4538811f,0.7265715f,0.4280137f,0.7156847f,0.5000185f,0.6924666f,0.4591831f,0.6983422f,0.4991694f,0.8261749f,0.4591832f,0.8181113f,0.4127468f,0.7965618f,0.4538811f,0.7965618f,0.4538811f,0.8181113f,0.4127468f,0.79207f,0.4280137f,0.79207f,0.4280137f,0.746387f,0.4111299f,0.7265715f,0.4280137f,0.8029568f,0.5000185f,0.7991217f,0.5172137f,0.8202992f,0.4991694f,0.7593209f,0.5161457f,0.7731435f,0.5268148f,0.7991217f,0.5172137f,0.7593209f,0.5161457f,0.7454981f,0.5268149f,0.7731435f,0.5268148f,0.7156849f,0.5000187f,0.71952f,0.5172137f,0.7454981f,0.5268149f,0.8341218f,0.4748584f,0.8389223f,0.4472131f,0.8261748f,0.4591831f,0.8029572f,0.5000188f,0.8202997f,0.4991697f,0.8341224f,0.4748587f,0.6924667f,0.4591832f,0.7265715f,0.4280137f,0.7005303f,0.4127468f,0.7156845f,0.5000184f,0.698342f,0.4991692f,0.7195196f,0.5172134f,0.6983431f,0.49917f,0.6924674f,0.4591837f,0.6845204f,0.474859f,0.8261748f,0.4591831f,0.8341219f,0.4195677f,0.8181112f,0.4127468f,0.7825389f,0.3824376f,0.79207f,0.4280137f,0.8181113f,0.4127468f,0.7005303f,0.4127468f,0.7265715f,0.4280137f,0.746387f,0.4111299f,0.79207f,0.4280137f,0.7722545f,0.4111299f,0.746387f,0.4111299f,0.826175f,0.4591832f,0.8389226f,0.4472132f,0.8341221f,0.4195678f,0.6924667f,0.4591832f,0.7005302f,0.4127468f,0.6797191f,0.4472131f,0.6845199f,0.4748587f,0.6924669f,0.4591834f,0.6797194f,0.4472133f,0.8341213f,0.4195674f,0.8202986f,0.3952565f,0.8181107f,0.4127465f,0.7825389f,0.3824376f,0.8181113f,0.4127468f,0.7991217f,0.3772126f,0.7825389f,0.3824376f,0.7722545f,0.4111299f,0.79207f,0.4280137f,0.7361026f,0.3824377f,0.7005303f,0.4127468f,0.746387f,0.4111299f,0.7361026f,0.3824377f,0.746387f,0.4111299f,0.7722545f,0.4111299f,0.6797194f,0.4472133f,0.7005305f,0.412747f,0.68452f,0.4195679f,0.8181115f,0.4127469f,0.8202994f,0.3952569f,0.7991219f,0.3772127f,0.7825389f,0.3824376f,0.7991217f,0.3772126f,0.7731435f,0.3676115f,0.7825388f,0.3824376f,0.7361025f,0.3824377f,0.7722545f,0.4111299f,0.7361021f,0.3824375f,0.6983419f,0.3952566f,0.7005299f,0.4127466f,0.6845201f,0.419568f,0.7005307f,0.4127471f,0.6983427f,0.3952571f,0.7825389f,0.3824376f,0.7731435f,0.3676115f,0.7454981f,0.3676115f,0.7825389f,0.3824376f,0.7454981f,0.3676115f,0.7361026f,0.3824377f,0.7361026f,0.3824377f,0.71952f,0.3772126f,0.6983423f,0.3952569f,0.7361026f,0.3824377f,0.7454981f,0.3676115f,0.71952f,0.3772126f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,34,34,33,33,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,37,61,39,62,61,63,42,64,62,65,63,66,42,67,41,68,62,69,49,70,64,71,65,72,44,73,66,74,45,75,37,76,61,77,67,78,68,79,69,80,70,81,49,82,51,83,64,84,71,85,72,86,73,87,74,88,75,89,76,90,77,91,78,92,79,93,80,94,81,95,82,96,83,97,84,98,85,99,45,100,66,101,86,102,72,103,87,104,88,105,73,106,72,107,88,108,75,109,89,110,76,111,90,112,91,113,92,114,93,115,94,116,95,117,96,118,97,119,98,120,99,121,100,122,101,123,102,124,103,125,104,126,76,127,89,128,105,129,90,130,92,131,106,132,107,133,108,134,109,135,110,136,111,137,103,138,104,139,103,140,111,141,90,142,106,143,112,144,113,145,114,146,115,147,115,148,116,149,117,150,115,151,114,152,116,153,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID878(GL2 gl){
double[] positionsArray = {
18.396494,-102.1686449,32.3462735,18.3964928,-104.2597091,20.4736728,16.0630778,-104.0709948,32.3462735,16.0630766,-106.0473403,43.5674743,18.396494,-102.1686449,32.3462735,36.1995604,-104.2597091,20.4736813,18.3964928,-104.2597091,20.4736728,16.0630778,-104.0709948,32.3462735,18.3964928,-104.2597091,20.4736728,16.0630766,-106.0473403,21.1250726,16.0630778,-104.0709948,32.3462735,16.0630695,-116.7680927,39.6511691,16.0630766,-106.0473403,43.5674743,18.3964934,-104.2597091,44.2188656,18.396494,-102.1686449,32.3462735,16.0630766,-106.0473403,43.5674743,36.1995616,-110.2806362,10.0330874,36.1995569,-102.1686449,32.3462735,36.1995604,-104.2597091,20.4736813,18.396494,-102.1686449,32.3462735,18.3964934,-110.2806702,10.0330874,16.0630778,-104.0709948,32.3462735,16.0630766,-106.0473403,21.1250726,16.0630718,-115.4815221,32.3462862,16.0630766,-106.0473403,43.5674743,16.0630695,-116.7680927,39.6511691,16.0630683,-120.4726349,46.074989,16.0630778,-104.0709948,32.3462735,16.0630718,-115.4815221,32.3462862,16.0630695,-116.7680927,39.6511691,16.063073,-111.7379239,53.4352408,18.3964934,-104.2597091,44.2188656,36.1995604,-104.2597091,20.4736813,38.532979,-111.7379239,11.2573018,36.1995616,-110.2806362,10.0330874,18.3964928,-104.2597091,20.4736728,36.1995616,-110.2806362,10.0330874,18.3964934,-110.2806702,10.0330874,36.1995569,-102.1686449,32.3462735,38.5329838,-106.0473403,21.1250726,36.1995604,-104.2597091,20.4736813,16.0630766,-106.0473403,21.1250726,18.3964934,-110.2806702,10.0330874,16.063073,-111.737958,11.2573018,16.0630766,-106.0473403,21.1250726,16.0630789,-116.7681267,25.0413906,16.0630718,-115.4815221,32.3462862,16.0630766,-106.0473403,43.5674743,16.0630683,-120.4726349,46.074989,16.063073,-111.7379239,53.4352408,18.3964899,-110.2806362,54.6594553,18.3964934,-104.2597091,44.2188656,16.063073,-111.7379239,53.4352408,36.1995569,-104.2597091,44.2188656,36.1995569,-102.1686449,32.3462735,18.3964934,-104.2597091,44.2188656,38.532979,-120.4564409,3.9331835,38.532979,-111.7379239,11.2573018,36.1995592,-119.5052829,2.2838051,38.532979,-104.0709948,32.3462735,38.5329838,-106.0473403,21.1250726,36.1995569,-102.1686449,32.3462735,18.396497,-119.5052829,2.2838051,16.0630766,-106.0473403,21.1250726,16.063073,-111.737958,11.2573018,16.0630789,-116.7681267,25.0413906,16.063073,-111.7379239,53.4352408,16.0630683,-120.4726349,46.074989,16.0630648,-126.1482833,50.842925,16.0630695,-120.4564409,60.7593677,18.3964899,-110.2806362,54.6594553,36.1995569,-104.2597091,44.2188656,38.532979,-111.7379239,11.2573018,38.5329743,-161.94585,11.2573189,38.532979,-120.4564409,3.9331835,36.1995616,-110.2806362,10.0330874,38.532979,-120.4564409,3.9331835,36.1995592,-119.5052829,2.2838051,38.5329838,-106.0473403,21.1250726,38.5329696,-167.6364677,21.1250812,38.532979,-111.7379239,11.2573018,36.1995592,-119.5052829,2.2838051,18.396497,-119.5052829,2.2838051,18.3964934,-110.2806702,10.0330874,38.5329696,-167.6364677,21.1250812,38.532979,-104.0709948,32.3462735,38.5329696,-169.6127792,32.3462905,38.5329838,-106.0473403,21.1250726,16.063073,-111.737958,11.2573018,18.396497,-119.5052829,2.2838051,16.0630671,-120.4564409,3.9331835,16.063073,-111.737958,11.2573018,16.0630778,-120.4726349,18.617575,16.0630789,-116.7681267,25.0413906,16.063073,-111.7379239,53.4352408,16.0630648,-126.1482833,50.842925,16.0630695,-120.4564409,60.7593677,18.3964899,-110.2806362,54.6594553,16.0630695,-120.4564409,60.7593677,18.3964893,-119.5052829,62.4087504,18.3964899,-110.2806362,54.6594553,36.1995521,-110.2806362,54.659451,36.1995569,-104.2597091,44.2188656,36.1995569,-104.2597091,44.2188656,38.532979,-106.0473403,43.5674743,38.532979,-104.0709948,32.3462735,38.532979,-111.7379239,11.2573018,38.5329696,-167.6364677,21.1250812,38.5329743,-161.94585,11.2573189,38.532979,-120.4564409,3.9331835,38.5329743,-161.94585,11.2573189,38.5329719,-153.2273331,3.933192,38.5329767,-131.1513034,0.036101,36.1995616,-130.8209599,-1.8395048,38.532979,-104.0709948,32.3462735,38.5329696,-167.6364677,43.5674998,38.5329696,-169.6127792,32.3462905,38.5329696,-169.6127792,32.3462905,36.1995616,-169.4240989,20.4736898,38.5329696,-167.6364677,21.1250812,18.3964993,-130.8209599,-1.8395048,16.063073,-111.737958,11.2573018,16.0630671,-120.4564409,3.9331835,16.0630778,-120.4726349,18.617575,16.0630695,-120.4564409,60.7593677,16.0630648,-126.1482833,50.842925,16.0630789,-133.1105363,53.3798889,16.0630707,-131.1513034,64.6564629,36.1995521,-119.5052829,62.4087504,18.3964893,-119.5052829,62.4087504,36.1995521,-110.2806362,54.659451,38.532979,-104.0709948,32.3462735,38.532979,-106.0473403,43.5674743,38.5329696,-167.6364677,43.5674998,38.5329696,-167.6364677,21.1250812,36.1995604,-163.4031378,10.0331044,38.5329743,-161.94585,11.2573189,38.5329719,-153.2273331,3.933192,38.5329743,-161.94585,11.2573189,36.1995663,-154.1785251,2.2838136,38.532979,-120.4564409,3.9331835,38.5329719,-153.2273331,3.933192,38.5329767,-131.1513034,0.036101,38.5329767,-131.1513034,0.036101,36.1995616,-130.8209599,-1.8395048,36.1995592,-119.5052829,2.2838051,36.1995616,-130.8209599,-1.8395048,18.3964993,-130.8209599,-1.8395048,18.396497,-119.5052829,2.2838051,38.5329696,-167.6364677,43.5674998,36.1995616,-171.5151291,32.3462905,38.5329696,-169.6127792,32.3462905,36.1995604,-163.4031378,10.0331044,36.1995616,-169.4240989,20.4736898,18.3964993,-130.8209599,-1.8395048,16.0630695,-131.1513034,0.036101,16.0630671,-120.4564409,3.9331835,16.0630671,-120.4564409,3.9331835,16.0630825,-126.1482833,13.8496348,16.0630778,-120.4726349,18.617575,16.0630695,-120.4564409,60.7593677,16.0630789,-133.1105363,53.3798889,16.0630707,-131.1513034,64.6564629,18.3964911,-130.8209599,66.5320687,18.3964893,-119.5052829,62.4087504,16.0630707,-131.1513034,64.6564629,36.1995521,-110.2806362,54.659451,36.1995521,-119.5052829,62.4087504,38.532979,-111.7379239,53.4352366,18.3964911,-130.8209599,66.5320687,38.532979,-106.0473403,43.5674743,38.532979,-106.0473403,43.5674743,38.5329696,-161.94585,53.4352621,38.5329696,-167.6364677,43.5674998,36.1995663,-154.1785251,2.2838136,36.199564,-142.8628481,-1.8394962,38.5329767,-131.1513034,0.036101,38.5329719,-153.2273331,3.933192,38.5329743,-142.5325046,0.0361095,38.5329743,-142.5325046,0.0361095,18.3965011,-142.8628481,-1.8395048,36.199564,-142.8628481,-1.8394962,36.1995616,-169.4240989,44.2188954,36.1995616,-171.5151291,32.3462905,38.5329696,-167.6364677,43.5674998,36.1995616,-169.4240989,20.4736898,18.3965023,-163.4031378,10.0331044,36.1995604,-163.4031378,10.0331044,36.1995616,-171.5151291,32.3462905,18.3964987,-169.4240989,20.4736898,36.1995616,-169.4240989,20.4736898,18.3965011,-142.8628481,-1.8395048,16.0630671,-120.4564409,3.9331835,16.0630695,-131.1513034,0.036101,16.0630825,-126.1482833,13.8496348,16.0630707,-131.1513034,64.6564629,16.0630789,-133.1105363,53.3798889,16.063073,-140.5195866,53.3798931,16.0630636,-142.5325046,64.6564629,38.532979,-111.7379239,53.4352366,36.1995521,-119.5052829,62.4087504,38.5329814,-120.4564409,60.7593719,36.1995545,-130.8209599,66.5320687,36.1995521,-119.5052829,62.4087504,18.3964911,-130.8209599,66.5320687,38.532979,-106.0473403,43.5674743,38.532979,-111.7379239,53.4352366,38.5329696,-161.94585,53.4352621,38.5329696,-161.94585,53.4352621,36.1995663,-154.1785251,2.2838136,36.1995604,-163.4031378,10.0331044,18.3964982,-154.1785251,2.2838136,36.1995663,-154.1785251,2.2838136,38.5329743,-142.5325046,0.0361095,38.5329719,-153.2273331,3.933192,36.199564,-142.8628481,-1.8394962,36.1995616,-130.8209599,-1.8395048,36.1995616,-169.4240989,44.2188954,18.3964982,-171.5151631,32.3462905,36.1995616,-171.5151291,32.3462905,18.3964982,-154.1785251,2.2838136,18.3965023,-163.4031378,10.0331044,18.3964987,-169.4240989,20.4736898,18.3965011,-142.8628481,-1.8395048,16.0630624,-142.5325046,0.0361095,16.0630695,-131.1513034,0.036101,16.0630825,-126.1482833,13.8496348,16.0630695,-131.1513034,0.036101,16.0630789,-133.1105363,11.3126836,16.0630707,-131.1513034,64.6564629,16.063073,-140.5195866,53.3798931,16.0630636,-142.5325046,64.6564629,18.3964928,-142.8628481,66.5320687,18.3964911,-130.8209599,66.5320687,16.0630636,-142.5325046,64.6564629,36.1995545,-130.8209599,66.5320687,38.532979,-111.7379239,53.4352366,38.5329814,-120.4564409,60.7593719,38.5329696,-153.2273331,60.7593804,18.3964928,-142.8628481,66.5320687,36.1995557,-142.8628481,66.5320687,38.532979,-111.7379239,53.4352366,38.5329696,-153.2273331,60.7593804,38.5329696,-161.94585,53.4352621,36.1995569,-163.4031378,54.6594766,36.1995616,-169.4240989,44.2188954,38.5329696,-161.94585,53.4352621,18.3965011,-142.8628481,-1.8395048,18.3964993,-169.4240989,44.2188954,18.3964982,-171.5151631,32.3462905,36.1995616,-169.4240989,44.2188954,16.0630648,-153.2273671,3.933192,18.3964982,-154.1785251,2.2838136,18.3965023,-163.4031378,10.0331044,18.3964987,-169.4240989,20.4736898,16.0630612,-161.94585,11.2573189,18.3965023,-163.4031378,10.0331044,18.3964982,-171.5151631,32.3462905,16.0630565,-167.6364677,21.1250812,18.3964987,-169.4240989,20.4736898,18.3964982,-154.1785251,2.2838136,16.0630695,-131.1513034,0.036101,16.0630624,-142.5325046,0.0361095,16.0630789,-133.1105363,11.3126836,16.063073,-140.5195866,53.3798931,16.0630695,-147.4818056,50.8429335,16.0630636,-142.5325046,64.6564629,16.0630671,-153.2273331,60.7593847,38.5329814,-120.4564409,60.7593719,36.1995545,-130.8209599,66.5320687,38.5329743,-131.1512693,64.6564544,38.5329814,-120.4564409,60.7593719,38.5329696,-142.5325046,64.6564629,38.5329696,-153.2273331,60.7593804,36.1995557,-142.8628481,66.5320687,18.3964905,-154.1785251,62.4087674,38.5329696,-153.2273331,60.7593804,36.1995569,-163.4031378,54.6594766,18.3964993,-169.4240989,44.2188954,16.0630565,-169.6127792,32.3462905,18.3964982,-171.5151631,32.3462905,16.0630624,-142.5325046,0.0361095,16.0630648,-153.2273671,3.933192,16.0630612,-161.94585,11.2573189,16.0630565,-167.6364677,21.1250812,16.0630789,-133.1105363,11.3126836,16.0630624,-142.5325046,0.0361095,16.063073,-140.5195866,11.3126836,16.0630636,-142.5325046,64.6564629,16.0630695,-147.4818056,50.8429335,16.0630671,-153.2273331,60.7593847,18.3964928,-142.8628481,66.5320687,16.0630671,-153.2273331,60.7593847,18.3964905,-154.1785251,62.4087674,38.5329814,-120.4564409,60.7593719,38.5329743,-131.1512693,64.6564544,38.5329696,-142.5325046,64.6564629,38.5329696,-142.5325046,64.6564629,36.1995533,-154.1785251,62.4087674,38.5329696,-153.2273331,60.7593804,38.5329743,-131.1512693,64.6564544,36.1995557,-142.8628481,66.5320687,38.5329696,-142.5325046,64.6564629,36.1995557,-142.8628481,66.5320687,18.3964905,-154.1785251,62.4087674,36.1995533,-154.1785251,62.4087674,36.1995569,-163.4031378,54.6594766,18.396494,-163.4031378,54.6594808,18.3964993,-169.4240989,44.2188954,36.1995569,-163.4031378,54.6594766,18.3964993,-169.4240989,44.2188954,16.0630577,-167.6364677,43.5674998,16.0630565,-169.6127792,32.3462905,16.063073,-140.5195866,11.3126836,16.0630624,-142.5325046,0.0361095,16.0630648,-153.2273671,3.933192,16.0630778,-147.4818396,13.8496518,16.0630648,-153.2273671,3.933192,16.0630612,-161.94585,11.2573189,16.0630754,-153.1574881,18.617575,16.0630612,-161.94585,11.2573189,16.0630565,-167.6364677,21.1250812,16.063073,-156.8620302,25.0413949,16.0630565,-167.6364677,21.1250812,16.0630565,-169.6127792,32.3462905,16.0630695,-147.4818056,50.8429335,16.0630659,-153.1574881,46.075006,16.0630671,-153.2273331,60.7593847,16.0630612,-161.94585,53.4352621,36.1995533,-154.1785251,62.4087674,18.396494,-163.4031378,54.6594808,36.1995533,-154.1785251,62.4087674,18.396494,-163.4031378,54.6594808,16.0630718,-158.1486008,32.3462905,16.0630565,-169.6127792,32.3462905,16.0630577,-167.6364677,43.5674998,16.063073,-140.5195866,11.3126836,16.0630648,-153.2273671,3.933192,16.0630778,-147.4818396,13.8496518,16.0630778,-147.4818396,13.8496518,16.0630612,-161.94585,11.2573189,16.0630754,-153.1574881,18.617575,16.0630754,-153.1574881,18.617575,16.0630565,-167.6364677,21.1250812,16.063073,-156.8620302,25.0413949,16.063073,-156.8620302,25.0413949,16.0630565,-169.6127792,32.3462905,16.0630718,-158.1486008,32.3462905,16.0630659,-153.1574881,46.075006,16.0630612,-161.94585,53.4352621,16.0630671,-153.2273331,60.7593847,18.3964905,-154.1785251,62.4087674,16.0630612,-161.94585,53.4352621,18.396494,-163.4031378,54.6594808,16.0630577,-167.6364677,43.5674998,16.0630636,-156.8620302,39.6511904,16.0630718,-158.1486008,32.3462905,16.0630577,-167.6364677,43.5674998,16.0630659,-153.1574881,46.075006,16.0630636,-156.8620302,39.6511904,16.0630612,-161.94585,53.4352621,16.0630636,-156.8620302,39.6511904,16.0630577,-167.6364677,43.5674998,16.0630612,-161.94585,53.4352621,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.3440712f,0.0956937f,0.3598331f,0.0928716f,0.3440712f,0.0931263f,0.329174f,0.090459f,0.3440712f,0.0956937f,0.3440712f,0.0931263f,0.6243397f,0.0093196f,0.6445238f,0.059454f,0.6445233f,0.0093194f,0.3440712f,0.0931263f,0.3598331f,0.0928716f,0.3589684f,0.090459f,0.3440712f,0.0931263f,0.3343733f,0.0759538f,0.329174f,0.090459f,0.3283093f,0.0928716f,0.3440712f,0.0956937f,0.329174f,0.090459f,0.6445238f,0.059454f,0.6648397f,0.059454f,0.6445233f,0.0093194f,0.6243403f,0.0594541f,0.6445238f,0.059454f,0.6243397f,0.0093196f,0.3589684f,0.090459f,0.3736939f,0.0847456f,0.3440712f,0.0931263f,0.3589684f,0.090459f,0.3440712f,0.0776902f,0.329174f,0.090459f,0.3343733f,0.0759538f,0.3258451f,0.0709541f,0.3440712f,0.0931263f,0.3440712f,0.0776902f,0.3343733f,0.0759538f,0.3160737f,0.0827788f,0.3283093f,0.0928716f,0.329174f,0.090459f,0.9726241f,0.0093173f,0.992808f,0.0594519f,0.9928077f,0.0093173f,0.4556083f,0.0928716f,0.4678438f,0.0827788f,0.4694691f,0.0847456f,0.6445233f,0.0093194f,0.6648397f,0.059454f,0.6648391f,0.0093193f,0.4398464f,0.0956937f,0.4547434f,0.090459f,0.4556083f,0.0928716f,0.3589684f,0.090459f,0.3736939f,0.0847456f,0.3720687f,0.0827788f,0.3589684f,0.090459f,0.3537691f,0.0759538f,0.3440712f,0.0776902f,0.329174f,0.090459f,0.3258451f,0.0709541f,0.3160737f,0.0827788f,0.3144485f,0.0847456f,0.3283093f,0.0928716f,0.3160737f,0.0827788f,0.9726246f,0.0594521f,0.992808f,0.0594519f,0.9726241f,0.0093173f,0.4694691f,0.0847456f,0.4678438f,0.0827788f,0.4775673f,0.0710121f,0.4547434f,0.090459f,0.4678438f,0.0827788f,0.4556083f,0.0928716f,0.6648397f,0.059454f,0.6853614f,0.0594538f,0.6648391f,0.0093193f,0.4398464f,0.0931263f,0.4547434f,0.090459f,0.4398464f,0.0956937f,0.3736939f,0.0847456f,0.3839819f,0.0722958f,0.3720687f,0.0827788f,0.3589684f,0.090459f,0.3720687f,0.0827788f,0.3537691f,0.0759538f,0.3160737f,0.0827788f,0.3258451f,0.0709541f,0.3195152f,0.0632941f,0.3144485f,0.0847456f,0.3160737f,0.0827788f,0.3063502f,0.0710121f,0.9523082f,0.0093176f,0.9726246f,0.0594521f,0.9726241f,0.0093173f,0.4240845f,0.0928716f,0.4398464f,0.0931263f,0.4398464f,0.0956937f,0.4678438f,0.0827788f,0.4678438f,0.0150172f,0.4775673f,0.0710121f,0.4694691f,0.0847456f,0.4775673f,0.0710121f,0.4797569f,0.0722958f,0.4547434f,0.090459f,0.4547434f,0.007337f,0.4678438f,0.0827788f,0.6853614f,0.0594538f,0.6853609f,0.0093192f,0.6648391f,0.0093193f,0.4547434f,0.007337f,0.4398464f,0.0931263f,0.4398464f,0.0046697f,0.4547434f,0.090459f,0.3720687f,0.0827788f,0.3839819f,0.0722958f,0.3817922f,0.0710121f,0.3720687f,0.0827788f,0.3622973f,0.070954f,0.3537691f,0.0759538f,0.3160737f,0.0827788f,0.3195152f,0.0632941f,0.3063502f,0.0710121f,0.3144485f,0.0847456f,0.3063502f,0.0710121f,0.3041605f,0.0722959f,0.9523082f,0.0093176f,0.9523087f,0.0594522f,0.9726246f,0.0594521f,0.4240845f,0.0928716f,0.4249493f,0.090459f,0.4398464f,0.0931263f,0.4678438f,0.0827788f,0.4547434f,0.007337f,0.4678438f,0.0150172f,0.4775673f,0.0710121f,0.4678438f,0.0150172f,0.4775673f,0.0267838f,0.4775673f,0.0710121f,0.482741f,0.0565781f,0.4797569f,0.0722958f,0.7060673f,0.0594537f,0.6853609f,0.0093192f,0.6853614f,0.0594538f,0.4398464f,0.0931263f,0.4249492f,0.007337f,0.4398464f,0.0046697f,0.4398464f,0.0046697f,0.4556083f,0.0049244f,0.4547434f,0.007337f,0.3894559f,0.057024f,0.3817922f,0.0710121f,0.3839819f,0.0722958f,0.3720687f,0.0827788f,0.3817922f,0.0710121f,0.3622973f,0.070954f,0.3063502f,0.0710121f,0.3195152f,0.0632941f,0.3161472f,0.0538977f,0.3041605f,0.0722959f,0.3063502f,0.0710121f,0.3011766f,0.0565782f,0.931787f,0.0594521f,0.9523083f,0.0093174f,0.9317866f,0.0093175f,0.9523087f,0.059452f,0.4102236f,0.0847456f,0.4249493f,0.090459f,0.4240845f,0.0928716f,0.4398464f,0.0931263f,0.4249493f,0.090459f,0.4249492f,0.007337f,0.4547434f,0.007337f,0.4694691f,0.0130504f,0.4678438f,0.0150172f,0.4775673f,0.0267838f,0.4678438f,0.0150172f,0.4797569f,0.0255001f,0.4775673f,0.0710121f,0.4775673f,0.0267838f,0.482741f,0.0565781f,0.482741f,0.0565781f,0.485231f,0.057024f,0.4797569f,0.0722958f,0.7060673f,0.0594537f,0.7060668f,0.0093191f,0.6853609f,0.0093192f,0.4249492f,0.007337f,0.4398464f,0.0021022f,0.4398464f,0.0046697f,0.4547434f,0.007337f,0.4556083f,0.0049244f,0.4694691f,0.0130504f,0.4398464f,0.0021022f,0.4556083f,0.0049244f,0.4398464f,0.0046697f,0.3894559f,0.057024f,0.3869658f,0.0565781f,0.3817922f,0.0710121f,0.3817922f,0.0710121f,0.3686272f,0.0632941f,0.3622973f,0.070954f,0.3063502f,0.0710121f,0.3161472f,0.0538977f,0.3011766f,0.0565782f,0.2986865f,0.057024f,0.3041605f,0.0722959f,0.3011766f,0.0565782f,0.4102236f,0.0847456f,0.3999358f,0.0722959f,0.4118488f,0.0827788f,0.931787f,0.0594523f,0.9317865f,0.0093177f,0.9110805f,0.0093178f,0.4102236f,0.0847456f,0.4118488f,0.0827788f,0.4249493f,0.090459f,0.4249493f,0.090459f,0.4118488f,0.0150172f,0.4249492f,0.007337f,0.4797569f,0.0255001f,0.4678438f,0.0150172f,0.4694691f,0.0130504f,0.4775673f,0.0267838f,0.4797569f,0.0255001f,0.485231f,0.040772f,0.482741f,0.0565781f,0.4775673f,0.0267838f,0.482741f,0.0412178f,0.482741f,0.0565781f,0.482741f,0.0412178f,0.485231f,0.057024f,0.7060673f,0.0594537f,0.7268465f,0.009319f,0.7060668f,0.0093191f,0.7268471f,0.0594536f,0.4240844f,0.0049244f,0.4398464f,0.0021022f,0.4249492f,0.007337f,0.7883906f,0.0594532f,0.7680743f,0.0093188f,0.7680748f,0.0594534f,0.8085742f,0.0594531f,0.7883901f,0.0093186f,0.7883906f,0.0594532f,0.3894559f,0.040772f,0.3869658f,0.0565781f,0.3894559f,0.057024f,0.3817922f,0.0710121f,0.3869658f,0.0565781f,0.3686272f,0.0632941f,0.3011766f,0.0565782f,0.3161472f,0.0538977f,0.3161472f,0.0438983f,0.2986865f,0.057024f,0.3011766f,0.0565782f,0.3011766f,0.0412178f,0.4118488f,0.0827788f,0.3999358f,0.0722959f,0.4021254f,0.0710121f,0.911081f,0.0594525f,0.931787f,0.0594523f,0.9110805f,0.0093178f,0.4249493f,0.090459f,0.4118488f,0.0827788f,0.4118488f,0.0150172f,0.4118488f,0.0150172f,0.4240844f,0.0049244f,0.4249492f,0.007337f,0.7475532f,0.0594535f,0.7680748f,0.0594534f,0.7475526f,0.0093189f,0.7475532f,0.0594535f,0.7268465f,0.009319f,0.7268471f,0.0594536f,0.482741f,0.0412178f,0.4775673f,0.0267838f,0.485231f,0.040772f,0.482741f,0.0412178f,0.485231f,0.040772f,0.485231f,0.057024f,0.8287578f,0.059453f,0.8085737f,0.0093185f,0.8085742f,0.0594531f,0.7680748f,0.0594534f,0.7680743f,0.0093188f,0.7475526f,0.0093189f,0.7883901f,0.0093186f,0.7680743f,0.0093188f,0.7883906f,0.0594532f,0.8085737f,0.0093185f,0.7883901f,0.0093186f,0.8085742f,0.0594531f,0.3894559f,0.040772f,0.3869658f,0.0412178f,0.3869658f,0.0565781f,0.3686272f,0.0632941f,0.3869658f,0.0565781f,0.3719952f,0.0538977f,0.3011766f,0.0565782f,0.3161472f,0.0438983f,0.3011766f,0.0412178f,0.2986865f,0.040772f,0.2986865f,0.057024f,0.3011766f,0.0412178f,0.4021254f,0.0710121f,0.3999358f,0.0722959f,0.3944617f,0.057024f,0.4118488f,0.0827788f,0.4021254f,0.0710121f,0.4021254f,0.0267839f,0.8903008f,0.0093179f,0.911081f,0.0594525f,0.9110805f,0.0093178f,0.8903012f,0.0594526f,0.4118488f,0.0827788f,0.4021254f,0.0267839f,0.4118488f,0.0150172f,0.4102236f,0.0130504f,0.4240844f,0.0049244f,0.4118488f,0.0150172f,0.7475532f,0.0594535f,0.7475526f,0.0093189f,0.7268465f,0.009319f,0.8287571f,0.0093183f,0.8085737f,0.0093185f,0.8287578f,0.059453f,0.381792f,0.0267838f,0.3839818f,0.0255001f,0.3736939f,0.0130504f,0.3598331f,0.0049244f,0.3720687f,0.0150172f,0.3736939f,0.0130504f,0.3440711f,0.0021022f,0.3589683f,0.007337f,0.3598331f,0.0049244f,0.3894559f,0.040772f,0.3839818f,0.0255001f,0.3869658f,0.0412178f,0.3869658f,0.0565781f,0.3869658f,0.0412178f,0.3719952f,0.0538977f,0.3161472f,0.0438983f,0.3195152f,0.0345019f,0.3011766f,0.0412178f,0.2986865f,0.040772f,0.3011766f,0.0412178f,0.3063502f,0.0267839f,0.4021254f,0.0710121f,0.3944617f,0.057024f,0.3969517f,0.0565782f,0.4021254f,0.0710121f,0.3969517f,0.0412178f,0.4021254f,0.0267839f,0.3969517f,0.0565782f,0.3944617f,0.057024f,0.3944617f,0.040772f,0.8903012f,0.0594526f,0.8903008f,0.0093179f,0.8695948f,0.0093181f,0.4021254f,0.0267839f,0.4102236f,0.0130504f,0.4118488f,0.0150172f,0.8490736f,0.0594529f,0.8287571f,0.0093183f,0.8287578f,0.059453f,0.3283093f,0.0049244f,0.3440711f,0.0046697f,0.3440711f,0.0021022f,0.3839818f,0.0255001f,0.381792f,0.0267838f,0.3869658f,0.0412178f,0.381792f,0.0267838f,0.3736939f,0.0130504f,0.3720687f,0.0150172f,0.3589683f,0.007337f,0.3720687f,0.0150172f,0.3598331f,0.0049244f,0.3440711f,0.0046697f,0.3589683f,0.007337f,0.3440711f,0.0021022f,0.3719952f,0.0538977f,0.3869658f,0.0412178f,0.3719952f,0.0438983f,0.3011766f,0.0412178f,0.3195152f,0.0345019f,0.3063502f,0.0267839f,0.2986865f,0.040772f,0.3063502f,0.0267839f,0.3041605f,0.0255001f,0.4021254f,0.0710121f,0.3969517f,0.0565782f,0.3969517f,0.0412178f,0.3969517f,0.0412178f,0.3999357f,0.0255001f,0.4021254f,0.0267839f,0.3969517f,0.0565782f,0.3944617f,0.040772f,0.3969517f,0.0412178f,0.8903012f,0.0594526f,0.8695948f,0.0093181f,0.8695952f,0.0594527f,0.4021254f,0.0267839f,0.3999357f,0.0255001f,0.4102236f,0.0130504f,0.8490731f,0.0093182f,0.8287571f,0.0093183f,0.8490736f,0.0594529f,0.3283093f,0.0049244f,0.329174f,0.007337f,0.3440711f,0.0046697f,0.3719952f,0.0438983f,0.3869658f,0.0412178f,0.381792f,0.0267838f,0.3686272f,0.0345019f,0.381792f,0.0267838f,0.3720687f,0.0150172f,0.3622973f,0.0268419f,0.3720687f,0.0150172f,0.3589683f,0.007337f,0.3537691f,0.0218422f,0.3589683f,0.007337f,0.3440711f,0.0046697f,0.3195152f,0.0345019f,0.325845f,0.0268419f,0.3063502f,0.0267839f,0.3063502f,0.0267839f,0.3160736f,0.0150172f,0.3041605f,0.0255001f,0.3969517f,0.0412178f,0.3944617f,0.040772f,0.3999357f,0.0255001f,0.8695952f,0.0594527f,0.8695948f,0.0093181f,0.8490731f,0.0093182f,0.8490736f,0.0594529f,0.8695952f,0.0594527f,0.8490731f,0.0093182f,0.3144484f,0.0130504f,0.329174f,0.007337f,0.3283093f,0.0049244f,0.3440711f,0.0201058f,0.3440711f,0.0046697f,0.329174f,0.007337f,0.3719952f,0.0438983f,0.381792f,0.0267838f,0.3686272f,0.0345019f,0.3686272f,0.0345019f,0.3720687f,0.0150172f,0.3622973f,0.0268419f,0.3622973f,0.0268419f,0.3589683f,0.007337f,0.3537691f,0.0218422f,0.3537691f,0.0218422f,0.3440711f,0.0046697f,0.3440711f,0.0201058f,0.325845f,0.0268419f,0.3160736f,0.0150172f,0.3063502f,0.0267839f,0.3041605f,0.0255001f,0.3160736f,0.0150172f,0.3144484f,0.0130504f,0.3144484f,0.0130504f,0.3160736f,0.0150172f,0.329174f,0.007337f,0.3343733f,0.0218422f,0.3440711f,0.0201058f,0.329174f,0.007337f,0.325845f,0.0268419f,0.3343733f,0.0218422f,0.3160736f,0.0150172f,0.3343733f,0.0218422f,0.329174f,0.007337f,0.3160736f,0.0150172f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,0,4,2,5,4,6,5,7,6,8,7,9,8,10,9,11,10,12,11,13,12,14,13,15,14,16,15,17,5,18,16,19,6,20,17,21,18,22,19,23,9,24,8,10,20,25,21,26,22,27,23,28,24,29,25,30,26,31,27,32,28,33,29,34,30,35,13,36,15,37,31,38,17,39,19,40,32,41,33,42,34,43,35,44,36,45,37,46,38,47,39,48,40,49,41,50,42,51,43,52,44,53,45,54,46,55,47,56,48,57,49,58,50,59,51,60,52,61,53,62,54,63,55,64,34,65,33,66,56,67,39,68,57,69,40,70,36,71,58,72,37,73,59,74,60,75,61,76,42,77,62,78,43,79,63,80,64,81,65,82,66,83,67,84,68,85,50,86,52,87,69,88,70,89,53,90,55,91,71,92,59,93,61,94,72,95,73,96,74,97,75,98,76,99,77,100,78,101,79,102,80,103,81,104,82,105,83,106,84,107,85,108,86,109,85,108,84,107,87,110,88,111,89,112,90,113,91,114,92,115,93,116,94,117,95,118,96,119,97,120,98,121,99,122,100,123,101,124,102,125,103,126,104,127,105,128,106,129,107,130,108,131,109,132,110,133,111,134,76,135,112,136,77,137,113,138,82,139,81,140,114,141,115,142,116,143,117,144,118,145,119,146,120,147,90,148,89,149,121,150,122,151,123,152,124,153,125,154,126,155,99,156,98,157,127,158,128,159,100,160,129,161,100,160,128,159,101,162,130,163,104,164,103,165,131,166,132,167,133,168,134,169,135,170,136,171,137,172,138,173,139,174,140,175,141,176,142,177,143,178,144,179,145,180,146,181,147,182,148,183,149,184,150,185,151,186,119,187,118,188,152,189,150,190,153,191,151,192,154,193,155,194,156,195,157,196,158,197,159,198,160,199,161,200,162,201,163,202,164,203,165,204,166,205,167,206,168,207,128,208,129,209,169,210,166,211,168,212,170,213,171,214,172,215,173,216,174,217,136,218,135,219,137,220,139,221,175,222,176,223,177,224,178,225,143,226,179,227,144,228,146,229,180,230,147,231,180,230,146,229,181,232,182,233,183,234,184,235,185,236,186,237,187,238,188,239,189,240,190,241,191,242,155,243,154,244,192,245,193,246,194,247,195,248,196,249,197,250,163,251,165,252,198,253,199,254,200,255,201,256,202,257,203,258,204,259,205,260,206,261,207,262,208,263,182,264,184,265,209,266,210,267,211,268,212,269,180,270,181,271,213,272,214,273,215,274,213,275,215,276,216,277,217,278,218,279,219,280,187,281,186,282,220,283,189,284,221,285,190,286,218,287,222,288,219,289,223,290,224,291,225,292,226,293,227,294,228,295,229,296,230,297,231,298,232,299,233,300,234,301,201,302,200,303,235,304,236,305,237,306,238,307,239,308,202,309,204,310,202,309,239,308,240,311,241,312,242,313,243,314,244,315,245,316,246,317,209,318,211,319,247,320,248,321,249,322,250,323,251,324,252,325,253,326,254,327,255,328,256,329,257,330,258,331,259,332,223,333,260,334,224,335,261,336,262,337,263,338,264,339,265,340,266,341,232,342,234,343,267,344,268,345,269,346,270,347,271,348,272,349,273,350,270,351,269,352,274,353,240,354,239,355,275,356,276,357,244,358,246,359,277,360,248,361,250,362,278,363,279,364,280,365,252,366,251,367,281,368,282,369,256,370,255,371,258,372,283,373,259,374,279,375,284,376,280,377,285,378,286,379,287,380,288,381,289,382,290,383,291,384,292,385,293,386,294,387,295,388,296,389,297,390,298,391,299,392,300,393,301,394,302,395,303,396,304,397,305,398,299,399,298,400,306,401,307,402,308,403,309,404,310,405,311,406,312,407,313,408,314,409,315,410,316,411,317,412,318,413,319,414,320,415,321,416,322,417,323,418,324,419,325,420,326,421,327,422,292,423,328,424,293,425,302,426,301,427,329,428,305,429,304,430,330,431,309,432,331,433,307,434,332,435,311,436,310,437,333,438,334,439,335,440,336,441,337,442,338,443,339,444,340,445,341,446,342,447,343,448,344,449,345,450,346,451,347,452,348,453,349,454,350,455,351,456,352,457,353,458,353,459,352,460,354,461,355,462,356,463,357,464,358,465,359,466,360,467,361,468,362,469,363,470,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID886(GL2 gl){
double[] positionsArray = {
15.3259203,-415.809875,41.051568,15.3259215,-430.402289,41.0515766,15.3259262,-423.1060863,43.710233,15.3259203,-415.809875,41.051568,15.3259274,-434.2845226,34.3196233,15.3259215,-430.402289,41.0515766,20.3288816,-423.1060863,50.5607496,15.3259215,-430.402289,41.0515766,20.3288787,-434.8006546,46.2993813,15.3259262,-423.1060863,43.710233,20.328884,-411.4115094,46.2993728,15.3259203,-415.809875,41.051568,15.3259262,-423.1060863,43.710233,15.3259274,-434.2845226,34.3196233,20.328884,-441.0231984,35.5092028,15.3259238,-411.9276499,34.3196147,15.3259274,-434.2845226,34.3196233,15.3259203,-415.809875,41.051568,20.3288816,-423.1060863,50.5607496,20.3288787,-434.8006546,46.2993813,16.0631109,-426.8106114,53.3798889,20.328884,-411.4115094,46.2993728,20.3288875,-405.1889656,35.5091901,20.3288852,-438.8621361,23.2390567,15.3259286,-432.936238,26.6643214,20.3288787,-434.8006546,46.2993813,20.328884,-441.0231984,35.5092028,16.0631026,-439.4485128,46.075006,20.3288875,-405.1889656,35.5091901,15.3259238,-411.9276499,34.3196147,15.3259203,-415.809875,41.051568,15.3259238,-411.9276499,34.3196147,15.3259286,-432.936238,26.6643214,15.3259274,-434.2845226,34.3196233,15.3259321,-426.9883199,21.6676759,15.3259286,-419.2238441,21.6676759,15.3259321,-413.275926,26.6643171,16.0631156,-419.4015611,53.3798889,16.0631061,-433.7728474,50.8429292,16.0631109,-426.8106114,53.3798889,20.328884,-411.4115094,46.2993728,20.3288816,-423.1060863,50.5607496,16.0631014,-412.4393251,50.8429207,16.0631061,-403.0591345,39.6511691,20.3288875,-405.1889656,35.5091901,20.328884,-411.4115094,46.2993728,20.3288905,-429.3286216,15.2302959,15.3259321,-426.9883199,21.6676759,20.328884,-441.0231984,35.5092028,20.3288852,-438.8621361,23.2390567,16.0631085,-444.4396128,32.3462905,16.0631026,-439.4485128,46.075006,16.0631002,-443.1530422,39.6511904,20.3288905,-407.3500364,23.2390567,20.3288905,-407.3500364,23.2390567,15.3259321,-413.275926,26.6643171,15.3259238,-411.9276499,34.3196147,15.3259321,-413.275926,26.6643171,20.3288887,-416.8835339,15.2302959,15.3259286,-419.2238441,21.6676759,16.0631014,-412.4393251,50.8429207,16.063105,-406.7636512,46.074989,16.0631085,-401.7725639,32.3462862,16.0631061,-403.0591345,39.6511691,20.3288905,-429.3286216,15.2302959,16.063112,-439.4485128,18.617575,20.3288852,-438.8621361,23.2390567,16.0631085,-444.4396128,32.3462905,16.0631109,-443.1530422,25.0413949,20.3288875,-405.1889656,35.5091901,16.0631156,-403.0591345,25.0413906,20.3288905,-407.3500364,23.2390567,20.3288887,-416.8835339,15.2302959,20.3288905,-429.3286216,15.2302959,20.3288887,-416.8835339,15.2302959,16.0631097,-426.8106114,11.3126836,16.0631156,-403.0591345,25.0413906,16.0631156,-433.7728644,13.8496518,16.063112,-439.4485128,18.617575,16.0631144,-406.7636597,18.617575,20.3288905,-407.3500364,23.2390567,16.0631191,-412.4393251,13.8496348,20.3288887,-416.8835339,15.2302959,16.0631156,-419.4015611,11.3126836,16.0631097,-426.8106114,11.3126836,16.0631191,-412.4393251,13.8496348,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.6229104f,0.4766284f,0.5742956f,0.4766285f,0.598603f,0.4856121f,0.6229104f,0.4766284f,0.5613618f,0.4538811f,0.5742956f,0.4766285f,0.5986032f,0.5087602f,0.5742957f,0.4766286f,0.5596425f,0.4943611f,0.5986032f,0.4856122f,0.6375635f,0.4943608f,0.6229103f,0.4766284f,0.598603f,0.485612f,0.5596424f,0.4943609f,0.5613619f,0.4538811f,0.5389119f,0.4579007f,0.5742956f,0.4766285f,0.635844f,0.4538811f,0.5613618f,0.4538811f,0.6229104f,0.4766284f,0.598603f,0.5087601f,0.5596424f,0.4943609f,0.5862613f,0.5182861f,0.6375635f,0.4943607f,0.5986029f,0.485612f,0.5986029f,0.50876f,0.658294f,0.4579006f,0.6229103f,0.4766284f,0.6375635f,0.4943607f,0.5613618f,0.453881f,0.5461114f,0.4164396f,0.5389118f,0.4579006f,0.5658536f,0.4280136f,0.5596423f,0.4943609f,0.5389119f,0.4579007f,0.544158f,0.4936027f,0.6582939f,0.4579005f,0.6358439f,0.453881f,0.6229103f,0.4766283f,0.635844f,0.4538811f,0.5658537f,0.4280137f,0.5613618f,0.4538811f,0.5856692f,0.4111299f,0.6115366f,0.4111299f,0.6313522f,0.4280137f,0.598603f,0.5087601f,0.5862613f,0.5182861f,0.6109446f,0.518286f,0.5596421f,0.4943607f,0.5630663f,0.5097134f,0.5862611f,0.5182859f,0.6375641f,0.4943612f,0.5986035f,0.5087605f,0.6341399f,0.5097141f,0.66539f,0.4718967f,0.6582944f,0.4579009f,0.5658535f,0.4280136f,0.5778723f,0.3893779f,0.5461113f,0.4164397f,0.5856691f,0.4111299f,0.5389119f,0.4579007f,0.5461115f,0.4164397f,0.5275301f,0.4472132f,0.5596423f,0.4943609f,0.5441579f,0.4936027f,0.5630665f,0.5097136f,0.5441585f,0.4936032f,0.5389124f,0.4579011f,0.5318168f,0.471897f,0.6582942f,0.4579007f,0.6510945f,0.4164397f,0.6358441f,0.4538811f,0.6510944f,0.4164396f,0.6313522f,0.4280136f,0.635844f,0.4538811f,0.6313523f,0.4280137f,0.6193335f,0.3893779f,0.6115367f,0.41113f,0.5856692f,0.4111299f,0.6193334f,0.3893779f,0.5778725f,0.3893779f,0.6115366f,0.4111299f,0.5986035f,0.5087605f,0.6109452f,0.5182865f,0.63414f,0.5097141f,0.6375636f,0.4943608f,0.6341394f,0.5097136f,0.6530479f,0.4936026f,0.6653896f,0.4718964f,0.6696757f,0.4472131f,0.658294f,0.4579006f,0.6653899f,0.4718967f,0.6375639f,0.494361f,0.5778723f,0.3893778f,0.5441577f,0.4008235f,0.5461113f,0.4164395f,0.5318164f,0.4718967f,0.538912f,0.4579008f,0.5275302f,0.4472133f,0.5275302f,0.4472133f,0.5461116f,0.4164398f,0.5318164f,0.4225299f,0.658294f,0.4579006f,0.6653896f,0.4225297f,0.6510944f,0.4164396f,0.6510945f,0.4164397f,0.6193335f,0.3893779f,0.6313523f,0.4280137f,0.5778725f,0.3893779f,0.6193334f,0.3893779f,0.5862613f,0.3761402f,0.6582942f,0.4579007f,0.669676f,0.4472132f,0.6653898f,0.4225298f,0.5318166f,0.42253f,0.5461118f,0.4164399f,0.5441582f,0.4008239f,0.5778726f,0.3893781f,0.5630667f,0.3847128f,0.5441581f,0.4008238f,0.6653893f,0.4225296f,0.6530476f,0.4008234f,0.6510941f,0.4164394f,0.6510938f,0.4164392f,0.6341388f,0.3847123f,0.6193328f,0.3893775f,0.5778725f,0.3893779f,0.5862613f,0.3761402f,0.5630665f,0.3847127f,0.6193334f,0.3893779f,0.6109446f,0.3761402f,0.5862613f,0.3761402f,0.6530485f,0.4008239f,0.63414f,0.384713f,0.651095f,0.41644f,0.6193334f,0.3893779f,0.6341394f,0.3847127f,0.6109446f,0.3761402f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,7,7,6,6,9,9,10,10,11,11,12,12,8,13,13,14,14,15,13,14,8,13,7,16,15,17,16,18,17,19,18,20,19,21,20,22,21,23,9,24,6,25,22,26,11,27,10,28,13,29,23,30,14,31,23,30,13,29,24,32,25,33,26,34,27,35,28,36,29,37,30,38,31,39,32,40,33,41,32,40,31,39,34,42,34,42,31,39,35,43,35,43,31,39,36,44,18,45,20,46,37,47,25,48,38,49,39,50,40,51,41,52,42,53,43,54,44,55,45,10,24,56,46,57,23,58,46,57,24,56,47,59,48,60,49,61,50,62,25,63,27,64,38,65,51,66,48,67,52,68,28,69,53,70,29,71,54,72,55,73,56,74,57,75,58,76,59,77,47,78,58,79,46,80,58,79,47,78,59,81,18,82,37,83,60,84,40,85,42,86,61,87,43,88,62,89,44,90,63,91,40,92,61,87,64,93,65,94,66,95,52,96,48,97,50,98,67,99,66,100,68,101,69,102,70,103,71,104,54,105,72,106,55,107,73,108,74,109,75,110,44,111,62,112,76,113,68,114,66,115,65,116,73,117,77,118,78,119,70,120,79,121,71,122,80,123,81,124,82,125,73,126,75,127,77,128,82,129,83,130,84,131,79,132,85,133,71,134,82,135,81,136,83,137,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID894(GL2 gl){
double[] positionsArray = {
18.3965307,-388.4328441,32.3462735,18.3965295,-390.5239083,20.4736728,16.0631144,-390.3352111,32.3462735,16.0631144,-392.3115226,43.5674743,18.3965307,-388.4328441,32.3462735,36.1995971,-390.5239083,20.4736813,18.3965295,-390.5239083,20.4736728,16.0631144,-390.3352111,32.3462735,18.3965295,-390.5239083,20.4736728,16.0631132,-392.3115226,21.1250726,16.0631144,-390.3352111,32.3462735,16.0631061,-403.0591345,39.6511691,16.0631144,-392.3115226,43.5674743,18.3965301,-390.5238913,44.2188656,18.3965307,-388.4328441,32.3462735,16.0631144,-392.3115226,43.5674743,36.1995982,-396.544861,10.0330874,36.1995935,-388.4328612,32.3462735,36.1995971,-390.5239083,20.4736813,18.3965307,-388.4328441,32.3462735,18.3965307,-396.5448525,10.0330874,16.0631144,-390.3352111,32.3462735,16.0631132,-392.3115226,21.1250726,16.0631085,-401.7725639,32.3462862,16.0631144,-392.3115226,43.5674743,16.0631061,-403.0591345,39.6511691,16.063105,-406.7636512,46.074989,16.0631144,-390.3352111,32.3462735,16.0631085,-401.7725639,32.3462862,16.0631061,-403.0591345,39.6511691,16.0631097,-398.0021232,53.4352408,18.3965301,-390.5238913,44.2188656,36.1995971,-390.5239083,20.4736813,38.5330169,-398.0021487,11.2573018,36.1995982,-396.544861,10.0330874,18.3965295,-390.5239083,20.4736728,36.1995982,-396.544861,10.0330874,18.3965307,-396.5448525,10.0330874,36.1995935,-388.4328612,32.3462735,38.5330216,-392.3115396,21.1250726,36.1995971,-390.5239083,20.4736813,16.0631132,-392.3115226,21.1250726,18.3965307,-396.5448525,10.0330874,16.0631097,-398.0021402,11.2573018,16.0631132,-392.3115226,21.1250726,16.0631156,-403.0591345,25.0413906,16.0631085,-401.7725639,32.3462862,16.0631144,-392.3115226,43.5674743,16.063105,-406.7636512,46.074989,16.0631097,-398.0021232,53.4352408,18.3965265,-396.5448355,54.6594553,18.3965301,-390.5238913,44.2188656,16.0631097,-398.0021232,53.4352408,36.1995923,-390.5239083,44.2188656,36.1995935,-388.4328612,32.3462735,18.3965301,-390.5238913,44.2188656,38.5330169,-406.7206572,3.9331835,38.5330169,-398.0021487,11.2573018,36.1995971,-405.7694822,2.2838051,38.5330169,-390.3352111,32.3462735,38.5330216,-392.3115396,21.1250726,36.1995935,-388.4328612,32.3462735,18.3965336,-405.7694822,2.2838051,16.0631132,-392.3115226,21.1250726,16.0631097,-398.0021402,11.2573018,16.0631156,-403.0591345,25.0413906,16.0631097,-398.0021232,53.4352408,16.063105,-406.7636512,46.074989,16.0631014,-412.4393251,50.8429207,16.0631061,-406.7206402,60.7593677,18.3965265,-396.5448355,54.6594553,36.1995923,-390.5239083,44.2188656,38.5330074,-439.4915579,3.933192,38.5330169,-398.0021487,11.2573018,38.5330098,-448.2100663,11.2573189,38.5330169,-406.7206572,3.9331835,36.1995982,-396.544861,10.0330874,38.5330169,-406.7206572,3.9331835,36.1995971,-405.7694822,2.2838051,38.5330216,-392.3115396,21.1250726,38.533005,-453.900684,21.1250812,38.5330169,-398.0021487,11.2573018,36.1995971,-405.7694822,2.2838051,18.3965336,-405.7694822,2.2838051,18.3965307,-396.5448525,10.0330874,38.5330169,-390.3352111,32.3462735,38.533005,-455.8769955,32.3462905,38.5330216,-392.3115396,21.1250726,16.0631097,-398.0021402,11.2573018,18.3965336,-405.7694822,2.2838051,16.0631038,-406.7206487,3.9331835,16.0631097,-398.0021402,11.2573018,16.0631144,-406.7636597,18.617575,16.0631156,-403.0591345,25.0413906,16.0631097,-398.0021232,53.4352408,16.0631014,-412.4393251,50.8429207,16.0631061,-406.7206402,60.7593677,18.3965265,-396.5448355,54.6594553,16.0631061,-406.7206402,60.7593677,18.3965259,-405.7694737,62.4087504,18.3965265,-396.5448355,54.6594553,36.19959,-396.5448525,54.659451,36.1995923,-390.5239083,44.2188656,36.1995923,-390.5239083,44.2188656,38.5330169,-392.3115396,43.5674743,38.5330169,-390.3352111,32.3462735,38.5330169,-398.0021487,11.2573018,38.533005,-453.900684,21.1250812,38.5330098,-448.2100663,11.2573189,38.5330074,-439.4915579,3.933192,38.5330098,-448.2100663,11.2573189,36.199603,-440.4427243,2.2838136,38.5330169,-406.7206572,3.9331835,38.5330074,-439.4915579,3.933192,38.5330145,-417.4155026,0.036101,38.5330145,-417.4155026,0.036101,38.5330216,-392.3115396,21.1250726,38.533005,-455.8769955,32.3462905,38.533005,-453.900684,21.1250812,36.1995994,-417.0851591,-1.8395048,38.5330169,-390.3352111,32.3462735,38.5330074,-453.900667,43.5674998,38.533005,-455.8769955,32.3462905,18.396536,-417.0851591,-1.8395048,16.0631097,-398.0021402,11.2573018,16.0631038,-406.7206487,3.9331835,16.0631144,-406.7636597,18.617575,16.0631061,-406.7206402,60.7593677,16.0631014,-412.4393251,50.8429207,16.0631156,-419.4015611,53.3798889,16.0631073,-417.4154771,64.6564629,18.3965259,-405.7694737,62.4087504,36.19959,-396.5448525,54.659451,38.5330169,-390.3352111,32.3462735,38.5330169,-392.3115396,43.5674743,38.5330074,-453.900667,43.5674998,38.533005,-453.900684,21.1250812,36.1995971,-449.6673541,10.0331044,38.5330098,-448.2100663,11.2573189,36.1996006,-429.1270474,-1.8394962,36.199603,-440.4427243,2.2838136,38.5330145,-417.4155026,0.036101,38.5330074,-439.4915579,3.933192,38.5330121,-428.7967124,0.0361095,38.5330145,-417.4155026,0.036101,36.1995994,-417.0851591,-1.8395048,36.1995971,-405.7694822,2.2838051,38.533005,-455.8769955,32.3462905,36.1995982,-455.6882982,20.4736898,38.533005,-453.900684,21.1250812,36.1995994,-417.0851591,-1.8395048,18.396536,-417.0851591,-1.8395048,18.3965336,-405.7694822,2.2838051,38.5330074,-453.900667,43.5674998,36.1995971,-457.7793454,32.3462905,38.533005,-455.8769955,32.3462905,18.396536,-417.0851591,-1.8395048,16.0631073,-417.4154941,0.036101,16.0631038,-406.7206487,3.9331835,16.0631038,-406.7206487,3.9331835,16.0631191,-412.4393251,13.8496348,16.0631144,-406.7636597,18.617575,16.0631061,-406.7206402,60.7593677,16.0631156,-419.4015611,53.3798889,16.0631073,-417.4154771,64.6564629,18.3965277,-417.0851506,66.5320687,18.3965259,-405.7694737,62.4087504,16.0631073,-417.4154771,64.6564629,36.19959,-396.5448525,54.659451,18.3965259,-405.7694737,62.4087504,36.1995888,-405.7694737,62.4087504,36.19959,-396.5448525,54.659451,38.5330169,-398.0021402,53.4352366,38.5330169,-392.3115396,43.5674743,38.5330169,-392.3115396,43.5674743,38.533005,-448.2100663,53.4352621,38.5330074,-453.900667,43.5674998,36.1995971,-449.6673541,10.0331044,36.199603,-440.4427243,2.2838136,18.3965378,-429.1270474,-1.8395048,36.1996006,-429.1270474,-1.8394962,38.5330121,-428.7967124,0.0361095,38.5330074,-439.4915579,3.933192,36.1996006,-429.1270474,-1.8394962,36.199603,-440.4427243,2.2838136,36.1995971,-449.6673541,10.0331044,18.3965354,-440.4427243,2.2838136,38.5330121,-428.7967124,0.0361095,36.1995982,-455.6882982,20.4736898,36.1995994,-455.6882982,44.2188954,36.1995971,-457.7793454,32.3462905,38.5330074,-453.900667,43.5674998,18.3965378,-429.1270474,-1.8395048,16.0631038,-406.7206487,3.9331835,16.0631073,-417.4154941,0.036101,16.0631191,-412.4393251,13.8496348,16.0631073,-417.4154771,64.6564629,16.0631109,-426.8106114,53.3798889,16.0631002,-428.7967039,64.6564629,16.0631156,-419.4015611,53.3798889,16.0631002,-428.7967039,64.6564629,18.3965277,-417.0851506,66.5320687,36.1995888,-405.7694737,62.4087504,38.5330169,-392.3115396,43.5674743,38.5330169,-398.0021402,53.4352366,38.533005,-448.2100663,53.4352621,38.533005,-448.2100663,53.4352621,36.1995982,-455.6882982,20.4736898,18.3965395,-449.6673413,10.0331044,36.1995971,-449.6673541,10.0331044,18.3965378,-429.1270474,-1.8395048,36.1995994,-417.0851591,-1.8395048,18.3965354,-440.4427243,2.2838136,36.1995971,-457.7793454,32.3462905,18.3965354,-455.6883025,20.4736898,36.1995982,-455.6882982,20.4736898,36.1995994,-455.6882982,44.2188954,18.3965348,-457.7793496,32.3462905,36.1995971,-457.7793454,32.3462905,18.3965378,-429.1270474,-1.8395048,16.063099,-428.7967039,0.0361095,16.0631073,-417.4154941,0.036101,16.0631191,-412.4393251,13.8496348,16.0631073,-417.4154941,0.036101,16.0631156,-419.4015611,11.3126836,16.0631109,-426.8106114,53.3798889,16.0631061,-433.7728474,50.8429292,16.0631002,-428.7967039,64.6564629,18.3965301,-429.1270304,66.5320687,18.3965277,-417.0851506,66.5320687,16.0631002,-428.7967039,64.6564629,36.19959,-417.0851506,66.5320687,36.1995888,-405.7694737,62.4087504,18.3965277,-417.0851506,66.5320687,38.5330169,-398.0021402,53.4352366,36.1995888,-405.7694737,62.4087504,38.5330169,-406.7206487,60.7593719,38.5330169,-398.0021402,53.4352366,38.5330074,-439.4915494,60.7593804,38.533005,-448.2100663,53.4352621,36.1995935,-449.6673541,54.6594766,36.1995994,-455.6882982,44.2188954,38.533005,-448.2100663,53.4352621,18.3965395,-449.6673413,10.0331044,18.3965354,-440.4427243,2.2838136,16.0631014,-439.4915494,3.933192,18.3965354,-440.4427243,2.2838136,18.3965395,-449.6673413,10.0331044,18.3965354,-455.6883025,20.4736898,18.396536,-455.6882855,44.2188954,18.3965348,-457.7793496,32.3462905,36.1995994,-455.6882982,44.2188954,16.0631073,-417.4154941,0.036101,16.063099,-428.7967039,0.0361095,16.0631156,-419.4015611,11.3126836,16.0631002,-428.7967039,64.6564629,16.0631061,-433.7728474,50.8429292,16.0631038,-439.4915323,60.7593847,16.0631038,-439.4915323,60.7593847,18.3965301,-429.1270304,66.5320687,36.19959,-417.0851506,66.5320687,38.5330169,-398.0021402,53.4352366,38.5330169,-406.7206487,60.7593719,38.5330074,-439.4915494,60.7593804,38.5330074,-439.4915494,60.7593804,36.1995935,-449.6673541,54.6594766,18.3965354,-455.6883025,20.4736898,16.0630979,-448.2100706,11.2573189,18.3965395,-449.6673413,10.0331044,16.063099,-428.7967039,0.0361095,16.0631014,-439.4915494,3.933192,18.3965348,-457.7793496,32.3462905,16.0630931,-453.9006712,21.1250812,18.3965354,-455.6883025,20.4736898,18.396536,-455.6882855,44.2188954,16.0630931,-455.8769997,32.3462905,18.3965348,-457.7793496,32.3462905,16.0631156,-419.4015611,11.3126836,16.063099,-428.7967039,0.0361095,16.0631097,-426.8106114,11.3126836,16.0631061,-433.7728474,50.8429292,16.0631026,-439.4485128,46.075006,16.0631038,-439.4915323,60.7593847,18.3965301,-429.1270304,66.5320687,16.0631038,-439.4915323,60.7593847,18.3965271,-440.4427073,62.4087674,36.1995923,-429.1270474,66.5320687,36.19959,-417.0851506,66.5320687,18.3965301,-429.1270304,66.5320687,38.5330169,-406.7206487,60.7593719,36.19959,-417.0851506,66.5320687,38.5330098,-417.4154941,64.6564544,38.5330169,-406.7206487,60.7593719,38.5330074,-428.7967039,64.6564629,38.5330074,-439.4915494,60.7593804,38.5330074,-439.4915494,60.7593804,36.19959,-440.4427243,62.4087674,36.1995935,-449.6673541,54.6594766,18.3965307,-449.6673413,54.6594808,18.396536,-455.6882855,44.2188954,36.1995935,-449.6673541,54.6594766,16.0630979,-448.2100706,11.2573189,16.0631097,-426.8106114,11.3126836,16.063099,-428.7967039,0.0361095,16.0631014,-439.4915494,3.933192,16.0631156,-433.7728644,13.8496518,16.0631014,-439.4915494,3.933192,16.0630979,-448.2100706,11.2573189,16.0630931,-453.9006712,21.1250812,18.396536,-455.6882855,44.2188954,16.0630943,-453.9006712,43.5674998,16.0630931,-455.8769997,32.3462905,16.0631026,-439.4485128,46.075006,16.0630979,-448.2100536,53.4352621,16.0631038,-439.4915323,60.7593847,16.0630979,-448.2100536,53.4352621,18.3965271,-440.4427073,62.4087674,36.1995923,-429.1270474,66.5320687,38.5330169,-406.7206487,60.7593719,38.5330098,-417.4154941,64.6564544,38.5330074,-428.7967039,64.6564629,38.5330074,-428.7967039,64.6564629,36.19959,-440.4427243,62.4087674,18.3965307,-449.6673413,54.6594808,16.063112,-439.4485128,18.617575,16.0630979,-448.2100706,11.2573189,16.0630931,-453.9006712,21.1250812,16.0631097,-426.8106114,11.3126836,16.0631014,-439.4915494,3.933192,16.0631156,-433.7728644,13.8496518,16.0631156,-433.7728644,13.8496518,16.0630979,-448.2100706,11.2573189,16.063112,-439.4485128,18.617575,16.0631109,-443.1530422,25.0413949,16.0630931,-453.9006712,21.1250812,16.0630931,-455.8769997,32.3462905,16.0631085,-444.4396128,32.3462905,16.0630931,-455.8769997,32.3462905,16.0630943,-453.9006712,43.5674998,16.0631026,-439.4485128,46.075006,16.0631002,-443.1530422,39.6511904,16.0630979,-448.2100536,53.4352621,18.3965271,-440.4427073,62.4087674,16.0630979,-448.2100536,53.4352621,18.3965307,-449.6673413,54.6594808,36.1995923,-429.1270474,66.5320687,18.3965271,-440.4427073,62.4087674,36.19959,-440.4427243,62.4087674,38.5330098,-417.4154941,64.6564544,36.1995923,-429.1270474,66.5320687,38.5330074,-428.7967039,64.6564629,36.19959,-440.4427243,62.4087674,18.3965307,-449.6673413,54.6594808,16.0630943,-453.9006712,43.5674998,16.063112,-439.4485128,18.617575,16.0630931,-453.9006712,21.1250812,16.0631109,-443.1530422,25.0413949,16.0631109,-443.1530422,25.0413949,16.0630931,-455.8769997,32.3462905,16.0631085,-444.4396128,32.3462905,16.0631002,-443.1530422,39.6511904,16.0631085,-444.4396128,32.3462905,16.0630943,-453.9006712,43.5674998,16.0631002,-443.1530422,39.6511904,16.0630943,-453.9006712,43.5674998,16.0630979,-448.2100536,53.4352621,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID5.bind();
texcoordArray = new float[] {
0.3440712f,0.0956937f,0.3598331f,0.0928716f,0.3440712f,0.0931263f,0.329174f,0.090459f,0.3440712f,0.0956937f,0.3440712f,0.0931263f,0.6243397f,0.0093196f,0.6445238f,0.059454f,0.6445233f,0.0093194f,0.3440712f,0.0931263f,0.3598331f,0.0928716f,0.3589684f,0.090459f,0.3440712f,0.0931263f,0.3343733f,0.0759538f,0.329174f,0.090459f,0.3283093f,0.0928716f,0.3440712f,0.0956937f,0.329174f,0.090459f,0.6445238f,0.059454f,0.6648397f,0.059454f,0.6445233f,0.0093194f,0.6243403f,0.0594541f,0.6445238f,0.059454f,0.6243397f,0.0093196f,0.3589684f,0.090459f,0.3598331f,0.0928716f,0.3736939f,0.0847456f,0.3440712f,0.0931263f,0.3589684f,0.090459f,0.3440712f,0.0776902f,0.329174f,0.090459f,0.3343733f,0.0759538f,0.3258451f,0.0709541f,0.3440712f,0.0931263f,0.3440712f,0.0776902f,0.3160737f,0.0827788f,0.3283093f,0.0928716f,0.329174f,0.090459f,0.9726241f,0.0093173f,0.992808f,0.0594519f,0.9928077f,0.0093173f,0.4556083f,0.0928716f,0.4678438f,0.0827788f,0.4694691f,0.0847456f,0.6445233f,0.0093194f,0.6648397f,0.059454f,0.6648391f,0.0093193f,0.4398464f,0.0956937f,0.4547434f,0.090459f,0.4556083f,0.0928716f,0.3589684f,0.090459f,0.3736939f,0.0847456f,0.3720687f,0.0827788f,0.3589684f,0.090459f,0.3537691f,0.0759538f,0.3440712f,0.0776902f,0.329174f,0.090459f,0.3258451f,0.0709541f,0.3160737f,0.0827788f,0.3144485f,0.0847456f,0.3283093f,0.0928716f,0.3160737f,0.0827788f,0.9726246f,0.0594521f,0.992808f,0.0594519f,0.9726241f,0.0093173f,0.4694691f,0.0847456f,0.4678438f,0.0827788f,0.4775673f,0.0710121f,0.4547434f,0.090459f,0.4678438f,0.0827788f,0.4556083f,0.0928716f,0.6648397f,0.059454f,0.6853614f,0.0594538f,0.6648391f,0.0093193f,0.4398464f,0.0931263f,0.4547434f,0.090459f,0.4398464f,0.0956937f,0.3736939f,0.0847456f,0.3839819f,0.0722958f,0.3720687f,0.0827788f,0.3589684f,0.090459f,0.3720687f,0.0827788f,0.3537691f,0.0759538f,0.3160737f,0.0827788f,0.3258451f,0.0709541f,0.3195152f,0.0632941f,0.3144485f,0.0847456f,0.3160737f,0.0827788f,0.3063502f,0.0710121f,0.9523082f,0.0093176f,0.9726246f,0.0594521f,0.9726241f,0.0093173f,0.4240845f,0.0928716f,0.4398464f,0.0931263f,0.4398464f,0.0956937f,0.4775673f,0.0267838f,0.4678438f,0.0827788f,0.4678438f,0.0150172f,0.4775673f,0.0710121f,0.4775673f,0.0710121f,0.4797569f,0.0722958f,0.4547434f,0.090459f,0.4547434f,0.007337f,0.4678438f,0.0827788f,0.6853614f,0.0594538f,0.6853609f,0.0093192f,0.6648391f,0.0093193f,0.4398464f,0.0931263f,0.4398464f,0.0046697f,0.4547434f,0.090459f,0.3720687f,0.0827788f,0.3839819f,0.0722958f,0.3817922f,0.0710121f,0.3720687f,0.0827788f,0.3622973f,0.070954f,0.3537691f,0.0759538f,0.3160737f,0.0827788f,0.3195152f,0.0632941f,0.3063502f,0.0710121f,0.3144485f,0.0847456f,0.3063502f,0.0710121f,0.3041605f,0.0722959f,0.9523082f,0.0093176f,0.9523087f,0.0594522f,0.9726246f,0.0594521f,0.4240845f,0.0928716f,0.4249493f,0.090459f,0.4398464f,0.0931263f,0.4678438f,0.0827788f,0.4547434f,0.007337f,0.4678438f,0.0150172f,0.4775673f,0.0267838f,0.4678438f,0.0150172f,0.4797569f,0.0255001f,0.4775673f,0.0710121f,0.4775673f,0.0267838f,0.482741f,0.0565781f,0.4775673f,0.0710121f,0.482741f,0.0565781f,0.4797569f,0.0722958f,0.4547434f,0.090459f,0.4398464f,0.0046697f,0.4547434f,0.007337f,0.7060673f,0.0594537f,0.6853609f,0.0093192f,0.6853614f,0.0594538f,0.4398464f,0.0931263f,0.4249492f,0.007337f,0.4398464f,0.0046697f,0.3894559f,0.057024f,0.3817922f,0.0710121f,0.3839819f,0.0722958f,0.3720687f,0.0827788f,0.3817922f,0.0710121f,0.3622973f,0.070954f,0.3063502f,0.0710121f,0.3195152f,0.0632941f,0.3161472f,0.0538977f,0.3041605f,0.0722959f,0.3063502f,0.0710121f,0.3011766f,0.0565782f,0.9523087f,0.0594522f,0.9523082f,0.0093176f,0.9317865f,0.0093177f,0.4102236f,0.0847456f,0.4249493f,0.090459f,0.4240845f,0.0928716f,0.4398464f,0.0931263f,0.4249493f,0.090459f,0.4249492f,0.007337f,0.4547434f,0.007337f,0.4694691f,0.0130504f,0.4775673f,0.0267838f,0.4797569f,0.0255001f,0.485231f,0.040772f,0.4797569f,0.0255001f,0.4678438f,0.0150172f,0.4694691f,0.0130504f,0.482741f,0.0565781f,0.4775673f,0.0267838f,0.482741f,0.0412178f,0.482741f,0.0565781f,0.485231f,0.057024f,0.4797569f,0.0722958f,0.4398464f,0.0046697f,0.4556083f,0.0049244f,0.4547434f,0.007337f,0.7060673f,0.0594537f,0.7060668f,0.0093191f,0.6853609f,0.0093192f,0.4249492f,0.007337f,0.4398464f,0.0021022f,0.4398464f,0.0046697f,0.3894559f,0.057024f,0.3869658f,0.0565781f,0.3817922f,0.0710121f,0.3817922f,0.0710121f,0.3686272f,0.0632941f,0.3622973f,0.070954f,0.3063502f,0.0710121f,0.3161472f,0.0538977f,0.3011766f,0.0565782f,0.2986865f,0.057024f,0.3041605f,0.0722959f,0.3011766f,0.0565782f,0.9523087f,0.0594522f,0.9317865f,0.0093177f,0.931787f,0.0594523f,0.4102236f,0.0847456f,0.4118488f,0.0827788f,0.4249493f,0.090459f,0.4249493f,0.090459f,0.4118488f,0.0150172f,0.4249492f,0.007337f,0.4547434f,0.007337f,0.4556083f,0.0049244f,0.4694691f,0.0130504f,0.7475532f,0.0594535f,0.7268465f,0.009319f,0.7268471f,0.0594536f,0.482741f,0.0412178f,0.4775673f,0.0267838f,0.485231f,0.040772f,0.7475532f,0.0594535f,0.7680748f,0.0594534f,0.7475526f,0.0093189f,0.482741f,0.0565781f,0.482741f,0.0412178f,0.485231f,0.057024f,0.4398464f,0.0021022f,0.4556083f,0.0049244f,0.4398464f,0.0046697f,0.7060673f,0.0594537f,0.7268465f,0.009319f,0.7060668f,0.0093191f,0.726847f,0.0594537f,0.4240844f,0.0049244f,0.4398464f,0.0021022f,0.4249492f,0.007337f,0.3894559f,0.040772f,0.3869658f,0.0565781f,0.3894559f,0.057024f,0.3817922f,0.0710121f,0.3869658f,0.0565781f,0.3686272f,0.0632941f,0.3011766f,0.0565782f,0.3161472f,0.0438983f,0.3011766f,0.0412178f,0.3161472f,0.0538977f,0.2986865f,0.057024f,0.3011766f,0.0565782f,0.3011766f,0.0412178f,0.931787f,0.0594523f,0.9317865f,0.0093177f,0.9110805f,0.0093178f,0.4102236f,0.0847456f,0.3999358f,0.0722959f,0.4249493f,0.090459f,0.4118488f,0.0827788f,0.4118488f,0.0150172f,0.4118488f,0.0150172f,0.4240844f,0.0049244f,0.4249492f,0.007337f,0.7883906f,0.0594532f,0.7680743f,0.0093188f,0.7680748f,0.0594534f,0.7475532f,0.0594535f,0.7475526f,0.0093189f,0.7268465f,0.009319f,0.482741f,0.0412178f,0.485231f,0.040772f,0.485231f,0.057024f,0.7680748f,0.0594534f,0.7680743f,0.0093188f,0.7475526f,0.0093189f,0.8085742f,0.0594531f,0.7883901f,0.0093186f,0.7883906f,0.0594532f,0.8287578f,0.059453f,0.8085737f,0.0093185f,0.8085742f,0.0594531f,0.3894559f,0.040772f,0.3869658f,0.0412178f,0.3869658f,0.0565781f,0.3686272f,0.0632941f,0.3869658f,0.0565781f,0.3719952f,0.0538977f,0.3161472f,0.0438983f,0.3195152f,0.0345019f,0.3011766f,0.0412178f,0.2986865f,0.040772f,0.2986865f,0.057024f,0.3011766f,0.0412178f,0.911081f,0.0594525f,0.931787f,0.0594523f,0.9110805f,0.0093178f,0.4118488f,0.0827788f,0.3999358f,0.0722959f,0.4021254f,0.0710121f,0.4118488f,0.0827788f,0.4021254f,0.0267839f,0.4118488f,0.0150172f,0.4102236f,0.0130504f,0.4240844f,0.0049244f,0.4118488f,0.0150172f,0.7883901f,0.0093186f,0.7680743f,0.0093188f,0.7883906f,0.0594532f,0.3894559f,0.040772f,0.3839818f,0.0255001f,0.3869658f,0.0412178f,0.381792f,0.0267838f,0.3839818f,0.0255001f,0.3736939f,0.0130504f,0.8085737f,0.0093185f,0.7883901f,0.0093186f,0.8085742f,0.0594531f,0.8287571f,0.0093183f,0.8085737f,0.0093185f,0.8287578f,0.059453f,0.3869658f,0.0565781f,0.3869658f,0.0412178f,0.3719952f,0.0538977f,0.3011766f,0.0412178f,0.3195152f,0.0345019f,0.3063502f,0.0267839f,0.2986865f,0.040772f,0.3011766f,0.0412178f,0.3063502f,0.0267839f,0.911081f,0.0594525f,0.9110805f,0.0093178f,0.8903008f,0.0093179f,0.4021254f,0.0710121f,0.3999358f,0.0722959f,0.3944617f,0.057024f,0.4118488f,0.0827788f,0.4021254f,0.0710121f,0.4021254f,0.0267839f,0.4021254f,0.0267839f,0.4102236f,0.0130504f,0.4118488f,0.0150172f,0.8490736f,0.0594529f,0.8287571f,0.0093183f,0.8287578f,0.059453f,0.3598331f,0.0049244f,0.3720687f,0.0150172f,0.3736939f,0.0130504f,0.3839818f,0.0255001f,0.381792f,0.0267838f,0.3869658f,0.0412178f,0.381792f,0.0267838f,0.3736939f,0.0130504f,0.3720687f,0.0150172f,0.3440711f,0.0021022f,0.3589683f,0.007337f,0.3598331f,0.0049244f,0.3283093f,0.0049244f,0.3440711f,0.0046697f,0.3440711f,0.0021022f,0.3719952f,0.0538977f,0.3869658f,0.0412178f,0.3719952f,0.0438983f,0.3195152f,0.0345019f,0.325845f,0.0268419f,0.3063502f,0.0267839f,0.2986865f,0.040772f,0.3063502f,0.0267839f,0.3041605f,0.0255001f,0.8903012f,0.0594526f,0.911081f,0.0594525f,0.8903008f,0.0093179f,0.4021254f,0.0710121f,0.3944617f,0.057024f,0.3969517f,0.0565782f,0.4021254f,0.0710121f,0.3969517f,0.0412178f,0.4021254f,0.0267839f,0.4021254f,0.0267839f,0.3999357f,0.0255001f,0.4102236f,0.0130504f,0.8490731f,0.0093182f,0.8287571f,0.0093183f,0.8490736f,0.0594529f,0.3589683f,0.007337f,0.3720687f,0.0150172f,0.3598331f,0.0049244f,0.3719952f,0.0438983f,0.3869658f,0.0412178f,0.381792f,0.0267838f,0.3686272f,0.0345019f,0.381792f,0.0267838f,0.3720687f,0.0150172f,0.3440711f,0.0046697f,0.3589683f,0.007337f,0.3440711f,0.0021022f,0.3283093f,0.0049244f,0.329174f,0.007337f,0.3440711f,0.0046697f,0.325845f,0.0268419f,0.3160736f,0.0150172f,0.3063502f,0.0267839f,0.3063502f,0.0267839f,0.3160736f,0.0150172f,0.3041605f,0.0255001f,0.8903012f,0.0594526f,0.8903008f,0.0093179f,0.8695948f,0.0093181f,0.3969517f,0.0565782f,0.3944617f,0.057024f,0.3944617f,0.040772f,0.4021254f,0.0710121f,0.3969517f,0.0565782f,0.3969517f,0.0412178f,0.3969517f,0.0412178f,0.3999357f,0.0255001f,0.4021254f,0.0267839f,0.8490736f,0.0594529f,0.8695952f,0.0594527f,0.8490731f,0.0093182f,0.3144484f,0.0130504f,0.329174f,0.007337f,0.3283093f,0.0049244f,0.3622973f,0.0268419f,0.3720687f,0.0150172f,0.3589683f,0.007337f,0.3719952f,0.0438983f,0.381792f,0.0267838f,0.3686272f,0.0345019f,0.3686272f,0.0345019f,0.3720687f,0.0150172f,0.3622973f,0.0268419f,0.3537691f,0.0218422f,0.3589683f,0.007337f,0.3440711f,0.0046697f,0.3440711f,0.0201058f,0.3440711f,0.0046697f,0.329174f,0.007337f,0.325845f,0.0268419f,0.3343733f,0.0218422f,0.3160736f,0.0150172f,0.3041605f,0.0255001f,0.3160736f,0.0150172f,0.3144484f,0.0130504f,0.8903012f,0.0594526f,0.8695948f,0.0093181f,0.8695952f,0.0594527f,0.3969517f,0.0565782f,0.3944617f,0.040772f,0.3969517f,0.0412178f,0.3969517f,0.0412178f,0.3944617f,0.040772f,0.3999357f,0.0255001f,0.8695952f,0.0594527f,0.8695948f,0.0093181f,0.8490731f,0.0093182f,0.3144484f,0.0130504f,0.3160736f,0.0150172f,0.329174f,0.007337f,0.3622973f,0.0268419f,0.3589683f,0.007337f,0.3537691f,0.0218422f,0.3537691f,0.0218422f,0.3440711f,0.0046697f,0.3440711f,0.0201058f,0.3343733f,0.0218422f,0.3440711f,0.0201058f,0.329174f,0.007337f,0.3343733f,0.0218422f,0.329174f,0.007337f,0.3160736f,0.0150172f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,0,4,2,5,4,6,5,7,6,8,7,9,8,10,9,11,10,12,11,13,12,14,13,15,14,16,15,17,5,18,16,19,6,20,17,21,18,22,19,23,9,24,8,25,20,26,21,27,22,28,23,29,24,30,25,31,26,32,27,33,28,34,29,31,30,35,13,36,15,37,31,38,17,39,19,40,32,41,33,42,34,43,35,44,36,45,37,46,38,47,39,48,40,49,41,50,42,51,43,52,44,53,45,54,46,55,47,56,48,57,49,58,50,59,51,60,52,61,53,62,54,63,55,64,34,65,33,66,56,67,39,68,57,69,40,70,36,71,58,72,37,73,59,74,60,75,61,76,42,77,62,78,43,79,63,80,64,81,65,82,66,83,67,84,68,85,50,86,52,87,69,88,70,89,53,90,55,91,71,92,59,93,61,94,72,95,73,96,74,97,73,96,72,95,75,98,76,43,77,99,78,100,79,101,80,102,81,103,82,104,83,105,84,106,85,107,86,108,87,109,88,110,89,111,90,112,91,113,92,114,93,115,94,116,95,117,96,118,97,119,98,120,99,121,100,122,101,123,102,124,103,125,104,126,105,127,106,128,107,129,108,130,109,131,110,132,111,133,112,134,113,135,114,136,77,137,115,138,78,139,116,140,117,141,118,142,119,143,83,144,82,145,120,146,121,147,122,148,123,149,90,150,89,151,124,152,125,153,126,154,127,155,128,156,129,157,99,158,98,159,130,160,101,161,100,162,131,163,132,164,104,165,103,166,133,167,134,168,135,169,136,170,137,171,138,130,109,172,111,173,139,174,140,175,138,176,137,177,141,178,142,179,143,180,144,181,145,182,146,183,147,184,148,185,149,186,150,187,151,188,152,189,153,190,154,191,155,192,156,193,157,194,158,195,159,196,160,197,161,198,162,199,163,200,164,201,165,202,166,203,167,204,168,205,169,206,170,207,171,208,172,209,173,210,174,211,175,212,176,213,149,214,148,215,177,216,178,217,179,218,180,219,181,220,182,221,183,222,184,223,185,224,186,225,144,226,187,227,145,228,154,229,188,230,155,231,150,232,179,233,151,234,179,233,150,232,180,235,189,236,190,237,191,238,192,239,157,240,156,241,193,242,194,243,195,244,196,245,197,246,198,247,197,246,196,245,199,248,165,249,167,250,200,251,170,252,169,253,201,254,171,255,202,256,172,209,203,257,204,258,205,259,206,260,189,261,191,262,207,263,208,264,209,265,184,266,186,267,210,268,181,269,183,270,211,271,209,272,208,273,212,274,213,275,214,276,215,277,216,278,217,279,218,280,219,281,220,282,221,283,222,284,223,285,224,286,225,287,226,288,227,289,228,290,229,291,230,292,231,293,232,294,233,295,234,296,235,297,236,298,237,299,238,300,239,301,240,302,241,303,242,304,214,305,243,306,215,307,219,308,244,309,220,310,245,311,246,312,247,313,217,314,248,315,218,316,249,317,250,318,251,319,252,320,253,321,254,322,255,323,256,324,257,325,228,326,230,327,258,328,231,329,233,330,259,331,236,332,235,333,260,334,261,335,262,336,263,337,264,338,240,339,242,340,265,341,249,342,251,343,266,344,267,345,268,346,246,347,245,348,269,349,270,350,268,351,267,352,271,353,272,354,273,355,274,356,275,357,276,358,277,359,278,360,279,361,280,362,281,363,282,364,283,365,284,366,285,367,286,368,287,369,288,370,289,371,290,372,291,373,292,374,293,375,294,376,295,377,296,378,297,379,298,380,299,381,300,382,272,383,301,384,273,385,302,386,303,387,304,388,305,389,306,390,307,391,275,392,308,393,276,394,309,395,310,396,311,397,312,398,313,399,314,400,284,401,315,402,285,403,286,404,288,405,316,406,291,407,290,408,317,409,318,410,319,411,320,412,321,413,296,414,295,415,300,416,322,417,298,418,323,419,310,420,309,421,324,422,325,423,326,424,327,425,328,426,329,427,330,428,331,429,332,430,333,431,334,432,335,433,336,434,337,435,338,436,339,437,340,438,341,439,342,440,343,441,344,442,345,443,346,444,347,445,348,446,349,447,350,448,350,449,349,450,351,451,347,452,346,453,352,454,344,455,343,456,353,457,354,458,355,459,356,460,357,461,358,462,359,463,360,464,361,465,362,466,363,467,364,468,365,469,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID902(GL2 gl){
double[] positionsArray = {
21.9473726,-368.6818918,151.2381614,18.1167582,-403.6691473,151.3081209,18.1167535,-368.6818918,151.2381614,21.9473773,-403.6691473,151.3081209,18.1167582,-403.6691473,151.3081209,21.9473773,-405.0711,149.048947,18.1167582,-405.0711,149.048947,21.9473773,-403.6691473,151.3081209,21.9473726,-368.6818918,151.2381614,18.1167535,-366.1916767,148.4396626,21.9473726,-366.1916767,148.4396626,18.1167535,-368.6818918,151.2381614,18.1167582,-405.0711,149.048947,21.9473773,-404.9991627,117.3259285,18.1167582,-404.9991627,117.3259285,21.9473773,-405.0711,149.048947,21.9473726,-366.1916767,148.4396626,18.1167535,-366.1301838,117.1234837,21.9473726,-366.1301838,117.1234837,18.1167535,-366.1916767,148.4396626,18.1167582,-404.9991627,117.3259285,21.9473773,-403.168614,113.9249913,18.1167582,-403.168614,113.9249913,21.9473773,-404.9991627,117.3259285,21.9473726,-366.1301838,117.1234837,18.1167535,-368.6001054,113.9710491,21.9473726,-368.6001054,113.9710491,18.1167535,-366.1301838,117.1234837,18.1167582,-403.168614,113.9249913,21.9473726,-368.6001054,113.9710491,18.1167535,-368.6001054,113.9710491,21.9473773,-403.168614,113.9249913,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,4,5,6,5,4,7,8,9,10,9,8,11,12,13,14,13,12,15,16,17,18,17,16,19,20,21,22,21,20,23,24,25,26,25,24,27,28,29,30,29,28,31,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 48, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID908(GL2 gl){
double[] positionsArray = {
18.116763,-409.9783425,170.6885005,21.9473726,-359.6154425,170.5987351,18.1167535,-359.6154425,170.5987521,21.947382,-409.9783425,170.6885005,18.1167535,-359.6150795,170.2522904,21.9473726,-359.6154425,170.5987351,21.9473724,-359.603935,156.9254023,18.1167535,-359.6154425,170.5987521,18.1167535,-359.6148518,169.956143,21.9473724,-359.603935,156.9254023,21.9473725,-359.5982301,149.5057382,18.1167535,-359.6150795,170.2522904,18.1167535,-359.6142508,169.2166402,21.9473725,-359.5982301,149.5057382,21.9473725,-359.5831712,130.9782582,18.1167535,-359.6148518,169.956143,18.1167535,-359.6142508,169.2166402,21.9473725,-359.5218422,54.5809168,18.1167535,-359.5214585,53.6255696,21.9473725,-359.5831712,130.9782582,18.1167535,-359.5214426,53.5858462,21.9473725,-359.5218422,54.5809168,21.9473726,-359.5214426,53.5858419,18.1167535,-359.5214585,53.6255696,18.1167534,-359.5204883,53.3829652,20.1097731,-359.4465624,36.0863686,18.1167535,-359.4465624,36.0863644,20.147898,-359.4465624,36.0863686,21.9473726,-359.4465624,36.0863644,20.1097731,-359.4465624,36.0863686,18.1167582,-380.5014786,36.0863644,18.1167535,-359.4465624,36.0863644,20.1097778,-380.5014742,36.0863686,21.9473773,-381.4366892,44.5003512,20.1097778,-380.5014742,36.0863686,21.9473773,-380.5014701,36.0863644,18.1167582,-381.4366892,44.5003512,18.1167582,-380.5014786,36.0863644,21.9473773,-382.2614739,47.4058749,18.1167582,-381.4366892,44.5003512,21.9473773,-381.4366892,44.5003512,18.1167582,-381.4696217,44.6163379,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,4,5,6,5,4,7,8,9,10,9,8,11,12,13,14,13,12,15,16,17,18,17,16,19,20,21,22,21,20,23,24,25,26,25,24,27,27,22,28,22,27,24,22,24,20,29,30,31,30,29,32,33,34,35,34,36,37,36,34,33,38,39,40,39,38,41,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 72, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID914(GL2 gl){
double[] positionsArray = {
21.9473773,-384.488562,54.3502437,18.1167582,-383.9136518,53.0828847,18.1167582,-383.8322576,52.9034557,21.9473773,-386.527636,58.8452669,18.1167582,-383.8322576,52.9034557,21.9473773,-383.8049647,52.8432972,18.1167582,-383.8049647,52.8432972,21.9473773,-384.488562,54.3502437,21.9473773,-386.527636,58.8452669,18.1167582,-388.5144519,63.2250991,18.1167582,-383.9136518,53.0828847,21.9473773,-388.5144519,63.2250991,18.1167582,-383.8322576,52.9034557,18.1167582,-383.8049647,52.8432972,17.957493,-383.8049732,52.8433015,21.9473773,-384.488562,54.3502437,29.414105,-383.8049732,52.8433015,21.9473773,-383.8049647,52.8432972,29.414105,-385.7678464,57.1703547,21.9473773,-394.9114552,69.569908,18.1167582,-394.9114552,69.569908,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,4,5,6,5,4,7,8,9,10,9,8,11,12,13,14,15,16,17,16,15,18,9,19,20,19,9,11,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 33, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID920(GL2 gl){
double[] positionsArray = {
18.1167582,-403.2646545,75.1112478,21.9473773,-403.4619682,75.2421445,18.1167582,-403.4619682,75.2421445,21.9473773,-398.5187278,71.9628973,18.1167582,-403.4619682,75.2421445,18.1167564,-403.6080151,75.3044948,18.116751,-403.4752704,75.2471129,18.1167582,-409.7288668,77.9338478,21.947382,-409.7288668,77.9338478,21.9473773,-403.4619682,75.2421445,21.947382,-409.873262,131.6775029,18.1167582,-409.7288668,77.9338478,21.947382,-409.7288668,77.9338478,18.1167584,-409.7346389,80.0791462,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,4,5,6,5,4,7,7,4,8,8,4,9,10,11,12,11,10,13,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 24, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID926(GL2 gl){
double[] positionsArray = {
131.2520922,-456.4104016,54.3106583,176.7159107,-459.5602575,43.2198397,176.7159107,-460.1663749,36.0863644,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 3, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID932(GL2 gl){
double[] positionsArray = {
17.957493,-385.6524048,43.9809769,17.957493,-384.7254102,36.0863729,63.4277249,-384.7254187,36.0863729,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 3, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID938(GL2 gl){
double[] positionsArray = {
176.7159107,-385.6524048,43.9809769,131.2456789,-384.7254187,36.0863729,176.7159107,-384.7254102,36.0863729,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 3, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID944(GL2 gl){
double[] positionsArray = {
172.9938128,-463.6687475,41.8319025,172.9938128,-463.6635763,36.0863644,176.7159107,-463.6641206,36.0863644,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 3, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID950(GL2 gl){
double[] positionsArray = {
176.7159107,-380.5014871,38.9910414,174.5636307,-380.5383743,36.0863729,174.5636307,-380.5307366,38.9910414,176.7159107,-380.5014871,36.0863729,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,0,3,1,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 6, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID956(GL2 gl){
double[] positionsArray = {
18.1131212,-403.6691473,151.3081209,18.1131212,-404.9991627,117.3259285,18.1131212,-405.0711,149.048947,18.1131212,-403.168614,113.9249998,18.1131212,-368.6818918,151.2381614,18.1131212,-368.6001054,113.9710576,18.1131259,-366.1916767,148.4396626,18.1131259,-366.1301838,117.1234922,18.1131259,-366.1301838,117.1234922,18.1131259,-366.1916767,148.4396626,18.1131212,-368.6001054,113.9710576,18.1131212,-368.6818918,151.2381614,18.1131212,-403.168614,113.9249998,18.1131212,-403.6691473,151.3081209,18.1131212,-404.9991627,117.3259285,18.1131212,-405.0711,149.048947,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(0.2627451, 0.2627451, 0.2627451, 0.6);
int[] indices = {
0,1,2,1,0,3,3,0,4,3,4,5,5,4,6,5,6,7,8,9,10,9,11,10,10,11,12,11,13,12,12,13,14,15,14,13,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 36, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID962(GL2 gl){
double[] positionsArray = {
18.0550036,-488.5310256,150.3234598,20.3584376,-489.0680167,114.5175097,18.0550036,-489.0680167,114.5175097,20.3584376,-488.5310256,150.3234598,20.3584376,-489.0680167,114.5175097,18.0550036,-487.1121178,112.82949,18.0550036,-489.0680167,114.5175097,20.3584376,-487.1121178,112.82949,18.0550036,-486.6139106,152.1781015,20.3584376,-488.5310256,150.3234598,18.0550036,-488.5310256,150.3234598,20.3584376,-486.6139106,152.1781015,18.0550036,-487.1121178,112.82949,20.3584329,-446.4687036,113.1745787,18.0549989,-446.4687036,113.1745787,20.3584376,-487.1121178,112.82949,20.3584329,-444.1309066,151.7859844,18.0550036,-486.6139106,152.1781015,18.0549941,-444.1309109,151.7859844,20.3584376,-486.6139106,152.1781015,20.3584329,-444.4401954,115.4753399,18.0549989,-446.4687036,113.1745787,20.3584329,-446.4687036,113.1745787,18.0549941,-444.4401912,115.4753399,18.0549941,-442.1983419,150.1681116,20.3584329,-444.1309066,151.7859844,18.0549941,-444.1309109,151.7859844,20.3584329,-442.1983419,150.1681116,20.3584329,-442.1983419,150.1681116,18.0549941,-444.4401912,115.4753399,20.3584329,-444.4401954,115.4753399,18.0549941,-442.1983419,150.1681116,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,4,5,6,5,4,7,8,9,10,9,8,11,12,13,14,13,12,15,16,17,18,17,16,19,20,21,22,21,20,23,24,25,26,25,24,27,28,29,30,29,28,31,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 48, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID968(GL2 gl){
double[] positionsArray = {
18.0550036,-488.5310256,150.3234598,18.0550036,-487.1121178,112.82949,18.0550036,-489.0680167,114.5175097,18.0550036,-486.6139106,152.1781015,18.0549989,-446.4687036,113.1745787,18.0549941,-444.1309109,151.7859844,18.0549941,-444.4401912,115.4753399,18.0549941,-442.1983419,150.1681116,18.0549941,-442.1983419,150.1681116,18.0549941,-444.1309109,151.7859844,18.0549941,-444.4401912,115.4753399,18.0549989,-446.4687036,113.1745787,18.0550036,-486.6139106,152.1781015,18.0550036,-487.1121178,112.82949,18.0550036,-488.5310256,150.3234598,18.0550036,-489.0680167,114.5175097,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(0.2627451, 0.2627451, 0.2627451, 0.6);
int[] indices = {
0,1,2,1,0,3,1,3,4,4,3,5,4,5,6,6,5,7,8,9,10,10,9,11,9,12,11,11,12,13,12,14,13,15,13,14,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 36, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID974(GL2 gl){
double[] positionsArray = {
1.9413991,-480.2487424,118.5169173,0.9793469,-480.0169576,108.9606263,0.9793375,-480.0169576,117.59726,0.9793469,-480.0169576,108.9606263,0.636544,-481.7875274,109.4018071,0.9793375,-480.0169576,117.59726,1.9413991,-480.2487424,118.5169173,0.9793375,-480.0169576,117.59726,0.636544,-481.7875274,117.1560877,1.9413991,-480.2487424,118.5169173,13.2072513,-482.9629685,117.5972685,0.9793469,-480.0169576,108.9606263,1.5985962,-482.0193122,108.4821497,0.636544,-481.7875274,109.4018071,0.9793469,-480.0169576,108.9606263,0.9793375,-480.0169576,117.59726,0.636544,-481.7875274,109.4018071,0.636544,-481.7875274,117.1560877,1.9413991,-480.2487424,118.5169173,0.636544,-481.7875274,117.1560877,1.5985962,-482.0193122,118.0757366,12.2451897,-482.7311837,118.5169173,13.2072513,-482.9629685,117.5972685,1.9413991,-480.2487424,118.5169173,13.2072513,-482.9629685,117.5972685,12.2451897,-482.7311837,108.0409775,0.9793469,-480.0169576,108.9606263,5.9446351,-485.3444866,110.788582,0.636544,-481.7875274,109.4018071,1.5985962,-482.0193122,108.4821497,1.9413991,-480.2487424,108.040969,1.5985962,-482.0193122,108.4821497,0.9793469,-480.0169576,108.9606263,0.636544,-481.7875274,117.1560877,1.5985962,-482.0193122,118.0757366,0.636544,-481.7875274,117.1560877,5.9446256,-485.3444866,115.7693128,12.2451897,-482.7311837,118.5169173,1.9413991,-480.2487424,118.5169173,1.5985962,-482.0193122,118.0757366,13.2072513,-482.9629685,117.5972685,12.2451897,-482.7311837,118.5169173,11.5574839,-484.4186403,118.0757451,13.2072513,-482.9629685,117.5972685,13.2072513,-482.9629685,108.9606263,12.2451897,-482.7311837,108.0409775,0.9793469,-480.0169576,108.9606263,12.2451897,-482.7311837,108.0409775,1.9413991,-480.2487424,108.040969,5.9446351,-485.3444866,110.788582,1.5985962,-482.0193122,108.4821497,11.5574839,-484.4186403,108.4821497,11.5574839,-484.4186403,108.4821497,1.5985962,-482.0193122,108.4821497,1.9413991,-480.2487424,108.040969,5.9446351,-485.3444866,110.788582,11.5574839,-484.4186403,118.0757451,1.5985962,-482.0193122,118.0757366,5.9446256,-485.3444866,115.7693128,12.2451897,-482.7311837,118.5169173,1.5985962,-482.0193122,118.0757366,11.5574839,-484.4186403,118.0757451,13.2072513,-482.9629685,117.5972685,11.5574839,-484.4186403,118.0757451,12.5195455,-484.6504421,117.1560877,13.2072513,-482.9629685,117.5972685,12.5195455,-484.6504421,117.1560877,13.2072513,-482.9629685,108.9606263,13.2072513,-482.9629685,108.9606263,12.5195455,-484.650425,109.4018071,12.2451897,-482.7311837,108.0409775,12.2451897,-482.7311837,108.0409775,11.5574839,-484.4186403,108.4821497,1.9413991,-480.2487424,108.040969,5.9446351,-485.3444866,110.788582,11.5574839,-484.4186403,108.4821497,12.5195455,-484.650425,109.4018071,5.9446256,-485.3444866,115.7693128,11.5574839,-484.4186403,118.0757451,5.9446256,-485.3444866,115.7693128,12.5195455,-484.6504421,117.1560877,13.2072513,-482.9629685,108.9606263,12.5195455,-484.6504421,117.1560877,12.5195455,-484.650425,109.4018071,12.5195455,-484.650425,109.4018071,11.5574839,-484.4186403,108.4821497,12.2451897,-482.7311837,108.0409775,12.5195455,-484.650425,109.4018071,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.0143859f,0.9873003f,0.0090601f,0.9335492f,0.0090601f,0.9826065f,0.00995f,0.862084f,0.016156f,0.8655906f,0.00995f,0.9111413f,0.0152755f,0.9158351f,0.00995f,0.9111413f,0.016156f,0.9076346f,0.0143859f,0.9873003f,0.0767497f,0.9826065f,0.0090601f,0.9335492f,0.0206311f,0.8609888f,0.016156f,0.8655906f,0.00995f,0.862084f,0.00995f,0.9111413f,0.016156f,0.8655906f,0.016156f,0.9076346f,0.0152755f,0.9158351f,0.016156f,0.9076346f,0.0206314f,0.9122364f,0.0714242f,0.9873003f,0.0767497f,0.9826065f,0.0143859f,0.9873003f,0.0767497f,0.9826065f,0.0714242f,0.9288553f,0.0090601f,0.9335492f,0.0437948f,0.8725298f,0.016156f,0.8655906f,0.0206311f,0.8609889f,0.0152755f,0.8573902f,0.0206311f,0.8609888f,0.00995f,0.862084f,0.016156f,0.9076346f,0.016156f,0.8655906f,0.0437948f,0.8725297f,0.0206314f,0.9122362f,0.016156f,0.9076345f,0.0437948f,0.9006954f,0.0723138f,0.9158351f,0.0152755f,0.9158351f,0.0776396f,0.9111413f,0.0723138f,0.9158351f,0.0669582f,0.9122364f,0.0767497f,0.9826065f,0.0767497f,0.9335491f,0.0714242f,0.9288553f,0.0090601f,0.9335492f,0.0143856f,0.9288554f,0.0437948f,0.8725297f,0.0206311f,0.8609888f,0.0669582f,0.8609888f,0.0669582f,0.8609888f,0.0206311f,0.8609888f,0.0152755f,0.8573902f,0.016156f,0.9076346f,0.0437948f,0.9006955f,0.0669582f,0.9122364f,0.0206314f,0.9122364f,0.0437948f,0.9006955f,0.0723138f,0.9158351f,0.0206314f,0.9122364f,0.0669582f,0.9122364f,0.0776396f,0.9111413f,0.0669582f,0.9122364f,0.0714335f,0.9076346f,0.0776396f,0.9111413f,0.0714335f,0.9076346f,0.0776396f,0.862084f,0.0776396f,0.862084f,0.0714335f,0.8655906f,0.0723138f,0.8573902f,0.0723138f,0.8573902f,0.0669582f,0.8609888f,0.0152755f,0.8573902f,0.0437948f,0.8725298f,0.0669583f,0.8609889f,0.0714335f,0.8655907f,0.0437948f,0.9006955f,0.0437948f,0.8725297f,0.0714335f,0.8655906f,0.0669582f,0.9122363f,0.0437948f,0.9006954f,0.0714335f,0.9076346f,0.0776396f,0.862084f,0.0714335f,0.9076346f,0.0714335f,0.8655906f,0.0714335f,0.8655906f,0.0669582f,0.8609888f,0.0723138f,0.8573902f,0.0714335f,0.9076346f,0.0437948f,0.9006955f,0.0714335f,0.8655906f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,28,34,27,35,34,36,35,37,36,38,37,39,38,40,39,36,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,46,48,48,49,49,50,50,51,51,52,52,53,53,54,54,35,55,55,35,36,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,74,79,76,80,78,81,79,82,80,83,81,84,82,85,83,86,84,87,85,88,86,89,80,90,79,91,87,92,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID982(GL2 gl){
double[] positionsArray = {
1.9413896,-480.2487424,148.0945484,0.9793375,-480.0169406,121.2142576,0.9793375,-480.0169576,147.174891,0.9793375,-480.0169406,121.2142576,0.636544,-481.7875104,121.6554298,0.9793375,-480.0169576,147.174891,1.9413896,-480.2487424,148.0945484,0.9793375,-480.0169576,147.174891,0.6365346,-481.7875274,146.7337103,0.9793375,-480.0169406,121.2142576,13.2072418,-482.9629685,147.174891,12.2451897,-482.7311837,120.2946087,1.9413896,-480.2487424,148.0945484,1.5985962,-482.0192952,120.735781,0.636544,-481.7875104,121.6554298,0.9793375,-480.0169406,121.2142576,0.9793375,-480.0169576,147.174891,0.636544,-481.7875104,121.6554298,0.6365346,-481.7875274,146.7337103,1.9413896,-480.2487424,148.0945484,0.6365346,-481.7875274,146.7337103,1.5985962,-482.0192952,147.6533676,12.2451802,-482.7311837,148.0945484,13.2072418,-482.9629685,147.174891,1.9413896,-480.2487424,148.0945484,13.2072418,-482.9629685,147.174891,13.2072513,-482.9629685,121.2142576,12.2451897,-482.7311837,120.2946087,0.9793375,-480.0169406,121.2142576,12.2451897,-482.7311837,120.2946087,1.9413991,-480.2487254,120.2946087,5.9446256,-485.3444866,123.0422132,0.636544,-481.7875104,121.6554298,1.5985962,-482.0192952,120.735781,1.9413991,-480.2487254,120.2946087,1.5985962,-482.0192952,120.735781,0.9793375,-480.0169406,121.2142576,0.6365346,-481.7875274,146.7337103,1.5985962,-482.0192952,147.6533676,0.6365346,-481.7875274,146.7337103,5.9446256,-485.3444866,145.3469354,12.2451802,-482.7311837,148.0945484,1.9413896,-480.2487424,148.0945484,1.5985962,-482.0192952,147.6533676,13.2072418,-482.9629685,147.174891,12.2451802,-482.7311837,148.0945484,11.5574839,-484.4186403,147.6533676,13.2072418,-482.9629685,147.174891,12.519536,-484.6504421,146.7337103,13.2072513,-482.9629685,121.2142576,13.2072513,-482.9629685,121.2142576,12.5195455,-484.650425,121.6554383,12.2451897,-482.7311837,120.2946087,12.2451897,-482.7311837,120.2946087,11.5574839,-484.4186403,120.735781,1.9413991,-480.2487254,120.2946087,5.9446256,-485.3444866,123.0422132,1.5985962,-482.0192952,120.735781,11.5574839,-484.4186403,120.735781,11.5574839,-484.4186403,120.735781,1.5985962,-482.0192952,120.735781,1.9413991,-480.2487254,120.2946087,5.9446256,-485.3444866,123.0422132,1.5985962,-482.0192952,147.6533676,5.9446256,-485.3444866,145.3469354,11.5574839,-484.4186403,147.6533676,12.2451802,-482.7311837,148.0945484,1.5985962,-482.0192952,147.6533676,11.5574839,-484.4186403,147.6533676,13.2072418,-482.9629685,147.174891,11.5574839,-484.4186403,147.6533676,12.519536,-484.6504421,146.7337103,13.2072513,-482.9629685,121.2142576,12.519536,-484.6504421,146.7337103,12.5195455,-484.650425,121.6554383,12.5195455,-484.650425,121.6554383,11.5574839,-484.4186403,120.735781,12.2451897,-482.7311837,120.2946087,5.9446256,-485.3444866,123.0422132,11.5574839,-484.4186403,120.735781,12.5195455,-484.650425,121.6554383,5.9446256,-485.3444866,145.3469354,11.5574839,-484.4186403,147.6533676,5.9446256,-485.3444866,145.3469354,12.519536,-484.6504421,146.7337103,12.5195455,-484.650425,121.6554383,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.086237f,0.8171074f,0.0809113f,0.6799135f,0.0809113f,0.8124136f,0.0089253f,0.6799135f,0.0151314f,0.6834201f,0.0089253f,0.8124136f,0.0142508f,0.8171074f,0.0089253f,0.8124136f,0.0151314f,0.8089069f,0.0809114f,0.6799135f,0.1486009f,0.8124135f,0.1432754f,0.6752196f,0.086237f,0.8171074f,0.0196065f,0.6788182f,0.0151314f,0.6834201f,0.0089253f,0.6799135f,0.0089253f,0.8124136f,0.0151314f,0.6834201f,0.0151314f,0.8089069f,0.0142508f,0.8171074f,0.0151314f,0.8089069f,0.0196066f,0.8135087f,0.1432753f,0.8171074f,0.1486008f,0.8124136f,0.086237f,0.8171074f,0.1486008f,0.8124136f,0.1486008f,0.6799134f,0.1432753f,0.6752197f,0.0809113f,0.6799135f,0.1432753f,0.6752197f,0.0862367f,0.6752197f,0.04277f,0.690359f,0.0151313f,0.6834199f,0.0196065f,0.678818f,0.0142508f,0.6752197f,0.0196065f,0.6788182f,0.0089253f,0.6799135f,0.0151314f,0.8089069f,0.0151314f,0.6834201f,0.04277f,0.6903592f,0.0196066f,0.8135085f,0.0151313f,0.8089067f,0.04277f,0.8019676f,0.0712891f,0.8171074f,0.0142508f,0.8171074f,0.0196066f,0.8135087f,0.0766149f,0.8124136f,0.0712891f,0.8171074f,0.0659335f,0.8135087f,0.0766149f,0.8124136f,0.0704088f,0.8089069f,0.0766149f,0.6799134f,0.0766149f,0.6799134f,0.0704088f,0.6834201f,0.0712891f,0.6752197f,0.0712891f,0.6752197f,0.0659335f,0.6788182f,0.0142508f,0.6752197f,0.04277f,0.6903592f,0.0196065f,0.6788182f,0.0659335f,0.6788182f,0.0659335f,0.6788182f,0.0196065f,0.6788182f,0.0142508f,0.6752197f,0.0151314f,0.8089069f,0.04277f,0.6903592f,0.04277f,0.8019679f,0.0196066f,0.8135087f,0.04277f,0.8019679f,0.0659335f,0.8135087f,0.0712891f,0.8171074f,0.0196066f,0.8135087f,0.0659335f,0.8135087f,0.0766149f,0.8124136f,0.0659335f,0.8135087f,0.0704088f,0.8089069f,0.0766149f,0.6799134f,0.0704088f,0.8089069f,0.0704088f,0.6834201f,0.0704088f,0.6834201f,0.0659335f,0.6788182f,0.0712891f,0.6752197f,0.04277f,0.6903591f,0.0659335f,0.6788181f,0.0704088f,0.68342f,0.04277f,0.8019679f,0.04277f,0.6903592f,0.0704088f,0.6834201f,0.0659334f,0.8135084f,0.04277f,0.8019675f,0.0704088f,0.8089066f,0.0704088f,0.8089069f,0.04277f,0.8019679f,0.0704088f,0.6834201f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,10,10,9,9,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,32,38,31,39,38,40,39,41,40,42,41,43,42,44,43,45,44,46,45,47,46,48,47,49,48,50,49,51,50,52,51,53,52,54,53,55,54,56,55,57,56,58,57,59,58,60,59,61,60,62,61,63,39,64,62,65,40,66,63,67,64,68,65,69,66,70,67,71,68,72,69,73,70,74,71,75,72,76,73,77,74,78,75,79,76,80,77,81,78,82,79,83,80,84,81,85,78,86,80,87,82,88,83,89,84,90,84,91,83,92,85,93,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID990(GL2 gl){
double[] positionsArray = {
13.8724156,-485.8772038,108.0852471,13.0167894,-485.8772038,106.7284366,18.3130186,-485.8772038,107.919187,18.3130186,-485.8772038,107.919187,13.8724156,-484.5994957,108.0852471,13.8724156,-485.8772038,108.0852471,12.995421,-485.8772038,109.5632861,18.306643,-485.8772038,106.3462565,13.8724156,-484.5994957,108.0852471,12.995421,-485.8772038,109.5632861,13.8724156,-485.8772038,108.0852471,18.3130186,-484.5994957,107.919187,13.8724156,-484.5994957,108.0852471,18.3130186,-485.8772038,107.919187,11.5994924,-485.8772038,109.3239286,18.3066478,-484.5994957,106.3462565,18.306643,-485.8772038,106.3462565,13.0167894,-485.8772038,106.7284366,12.995421,-484.5994957,109.5632861,13.8724156,-484.5994957,108.0852471,18.3130186,-484.5994957,107.919187,13.0167894,-484.5994957,106.7284366,11.618269,-485.8772038,152.0437854,11.5994924,-484.5994957,109.3239286,13.0167894,-485.8772038,106.7284366,11.5994924,-485.8772038,109.3239286,18.3066478,-484.5994957,106.3462565,13.0167894,-485.8772038,106.7284366,13.0167894,-484.5994957,106.7284366,12.995421,-484.5994957,109.5632861,12.995421,-484.5994957,109.5632861,12.9766255,-485.8772038,151.6681023,12.995421,-485.8772038,109.5632861,18.3066478,-484.5994957,106.3462565,11.618269,-484.5994957,152.0437854,11.5994924,-485.8772038,109.3239286,11.618269,-485.8772038,152.0437854,12.9766255,-485.8772038,151.6681023,11.5994924,-484.5994957,109.3239286,11.5994924,-485.8772038,109.3239286,11.618269,-484.5994957,152.0437854,11.5994924,-484.5994957,109.3239286,13.0167894,-484.5994957,106.7284366,13.0167894,-485.8772038,106.7284366,11.5994924,-484.5994957,109.3239286,12.995421,-484.5994957,109.5632861,12.9766255,-484.5994957,151.6681023,12.9766255,-485.8772038,151.6681023,11.618269,-484.5994957,152.0437854,11.618269,-485.8772038,152.0437854,13.6543139,-485.8772038,154.1003697,13.6543139,-485.8772038,154.1003697,11.618269,-484.5994957,152.0437854,12.9766255,-484.5994957,151.6681023,14.2344681,-484.5994957,152.8954077,12.9766255,-485.8772038,151.6681023,12.9766255,-484.5994957,151.6681023,11.618269,-484.5994957,152.0437854,13.6543139,-485.8772038,154.1003697,13.6543139,-484.5994957,154.1003697,14.2344681,-485.8772038,152.8954077,13.6543139,-484.5994957,154.1003697,14.2344681,-484.5994957,152.8954077,14.2344681,-484.5994957,152.8954077,14.2344681,-485.8772038,152.8954077,12.9766255,-485.8772038,151.6681023,18.1150556,-484.5994957,154.7671987,13.6543139,-484.5994957,154.1003697,13.6543139,-485.8772038,154.1003697,18.1297458,-485.8772038,153.145392,18.1297458,-484.5994957,153.145392,18.1297458,-485.8772038,153.145392,14.2344681,-485.8772038,152.8954077,14.2344681,-484.5994957,152.8954077,18.1150556,-484.5994957,154.7671987,18.1150556,-484.5994957,154.7671987,13.6543139,-485.8772038,154.1003697,18.1150556,-485.8772038,154.7671987,18.1150556,-485.8772038,154.7671987,18.1297458,-484.5994957,153.145392,18.1297458,-485.8772038,153.145392,14.2344681,-484.5994957,152.8954077,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID90.bind();
texcoordArray = new float[] {
0.9306147f,0.311965f,0.9366257f,0.3121112f,0.9305828f,0.2990235f,0.9305828f,0.2990235f,0.9239166f,0.311965f,0.9306146f,0.311965f,0.9304586f,0.3251693f,0.9366257f,0.3121112f,0.9306147f,0.311965f,0.9305828f,0.2990235f,0.9366257f,0.3121112f,0.9366812f,0.2988881f,0.9239167f,0.311965f,0.9304587f,0.3251693f,0.9306147f,0.311965f,0.9238122f,0.2990235f,0.9239167f,0.311965f,0.9305829f,0.2990235f,0.9304586f,0.3251693f,0.9365514f,0.3251955f,0.9366257f,0.3121112f,0.9435516f,0.2988881f,0.9366812f,0.2988881f,0.9366257f,0.3121112f,0.923405f,0.3251693f,0.9304586f,0.3251693f,0.9239166f,0.311965f,0.9499894f,0.311965f,0.9500245f,0.2990235f,0.9434913f,0.3121112f,0.9364694f,0.4941932f,0.9365514f,0.3251955f,0.9304586f,0.3251693f,0.9434105f,0.3251955f,0.9366257f,0.3121112f,0.9365514f,0.3251955f,0.9435516f,0.2988881f,0.9366257f,0.3121112f,0.9434913f,0.3121112f,0.9501616f,0.3251693f,0.9499894f,0.311965f,0.9434913f,0.3121112f,0.923405f,0.3251693f,0.9305406f,0.4941941f,0.9304586f,0.3251693f,0.9500245f,0.2990235f,0.9435516f,0.2988881f,0.9434913f,0.3121112f,0.9433213f,0.4941932f,0.9365514f,0.3251955f,0.9364694f,0.4941932f,0.9364694f,0.4941932f,0.9304586f,0.3251693f,0.9305406f,0.4941941f,0.9434105f,0.3251955f,0.9365514f,0.3251955f,0.9433213f,0.4941932f,0.9434105f,0.3251955f,0.9434913f,0.3121112f,0.9501616f,0.3251693f,0.9434913f,0.3121112f,0.9434105f,0.3251955f,0.923405f,0.3251693f,0.9236739f,0.4941941f,0.9305406f,0.4941941f,0.9433213f,0.4941932f,0.9364694f,0.4941932f,0.9365376f,0.506667f,0.9365376f,0.506667f,0.9364694f,0.4941932f,0.9305406f,0.4941941f,0.9433213f,0.4941932f,0.9500712f,0.4941941f,0.9434105f,0.3251955f,0.9500712f,0.4941941f,0.9501616f,0.3251693f,0.9434105f,0.3251955f,0.9236464f,0.5066746f,0.9305406f,0.4941941f,0.9236739f,0.4941941f,0.9433213f,0.4941932f,0.9365376f,0.506667f,0.9433953f,0.506667f,0.9365376f,0.506667f,0.9305323f,0.5066746f,0.9433953f,0.506667f,0.9500712f,0.4941941f,0.9433213f,0.4941932f,0.9433953f,0.506667f,0.9500803f,0.5066746f,0.9500712f,0.4941941f,0.9236464f,0.5066746f,0.9305323f,0.5066746f,0.9305406f,0.4941941f,0.9433112f,0.5250497f,0.9433953f,0.506667f,0.9365376f,0.506667f,0.9365376f,0.506667f,0.9305323f,0.5066746f,0.930574f,0.5251213f,0.9433953f,0.506667f,0.9500342f,0.5251213f,0.9500803f,0.5066746f,0.930574f,0.5251213f,0.9305323f,0.5066746f,0.9236464f,0.5066746f,0.9433112f,0.5250497f,0.9500342f,0.5251213f,0.9433112f,0.5250497f,0.9365376f,0.506667f,0.9364602f,0.5250497f,0.9364602f,0.5250497f,0.9365376f,0.506667f,0.930574f,0.5251213f,0.9237835f,0.5251213f,0.930574f,0.5251213f,0.9236464f,0.5066746f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,3,3,4,4,5,5,6,6,1,7,0,8,2,9,1,10,7,11,8,12,9,13,10,14,11,15,12,16,13,17,6,18,14,19,1,20,15,21,16,22,17,23,18,24,9,25,8,26,19,27,20,28,21,29,22,30,14,31,6,32,23,33,24,34,25,35,26,36,27,37,28,38,29,39,19,40,21,41,30,42,31,43,32,44,20,45,33,46,21,47,34,48,35,49,36,50,22,51,6,52,37,53,38,54,39,55,40,56,41,57,42,58,43,23,29,59,21,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,22,69,37,70,52,71,53,72,44,73,53,74,29,75,44,76,54,77,55,78,56,79,57,80,58,81,59,82,51,83,37,53,60,84,61,85,53,86,52,87,61,88,62,89,53,90,63,91,64,92,65,93,66,94,67,95,68,96,51,97,60,98,69,99,61,100,70,101,62,102,71,103,72,104,73,105,74,106,70,107,61,95,75,108,76,109,77,110,78,111,51,112,69,113,79,114,80,115,81,116,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
}
