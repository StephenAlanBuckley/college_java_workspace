//Header


package SketchupModels;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.util.HashMap;
import java.util.Map;

import javax.media.opengl.GL2;
import javax.media.opengl.glu.GLU;

import Buildings.Building;

import com.jogamp.opengl.util.GLBuffers;
public class DemaioMummy
{
private int displayList = -1;
private Map<String, com.jogamp.opengl.util.texture.Texture> imageMap = new HashMap<String, com.jogamp.opengl.util.texture.Texture>(); // map of ID's to textures
public DemaioMummy(GL2 gl, GLU glu) {
    generate(gl, glu);
}
public void draw(GL2 gl, GLU glu) {
  gl.glCallList(displayList);
}
private com.jogamp.opengl.util.texture.Texture ID13;
private void generate(GL2 gl, GLU glu){
ID13 = Building.setupTexture(gl, "demaioMummy/texture0.png", "SketchupModels");

displayList = gl.glGenLists(1);
gl.glNewList(displayList, GL2.GL_COMPILE);
  gl.glPushAttrib(GL2.GL_POLYGON_BIT);
    gl.glFrontFace(GL2.GL_CCW);
    gl.glCullFace(GL2.GL_BACK);
    gl.glEnable(GL2.GL_CULL_FACE);
gl.glPushMatrix();
gl.glScaled(0.08333333232623386, 0.08333333232623386, 0.08333333232623386);
gl.glRotatef(-90,1,0,0);
ID2(gl);
ID10(gl);
ID23(gl);
ID29(gl);
ID37(gl);
ID45(gl);
ID51(gl);
ID57(gl);
ID65(gl);
ID71(gl);
       gl.glPopMatrix();
   gl.glPopAttrib();
gl.glEndList();
}
//Trailer


private void ID2(GL2 gl){
double[] positionsArray = {
46.61484434889185,19.26261693331897,0.0,29.11484434889184,1.762616933318981,0.0,29.11484434889184,19.26261693331897,0.0,46.61484434889185,1.762616933318981,0.0,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
double[] normalsArray = {
0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,};
fbn = GLBuffers.newDirectDoubleBuffer(normalsArray, 0);
gl.glNormalPointer(GL2.GL_DOUBLE, 0, fbn);
gl.glEnableClientState(GL2.GL_NORMAL_ARRAY);
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 6, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID10(GL2 gl){
double[] positionsArray = {
29.11484434889184,19.26261693331897,58.62500000000001,29.11484434889184,1.762616933318981,0.0,29.11484434889184,1.762616933318981,58.62500000000001,29.11484434889184,19.26261693331897,0.0,46.61484434889185,1.762616933318981,58.62500000000001,29.11484434889184,1.762616933318981,0.0,46.61484434889185,1.762616933318981,0.0,29.11484434889184,1.762616933318981,58.62500000000001,29.11484434889184,19.26261693331897,58.62500000000001,46.61484434889185,19.26261693331897,0.0,29.11484434889184,19.26261693331897,0.0,46.61484434889185,19.26261693331897,58.62500000000001,46.61484434889185,19.26261693331897,0.0,46.61484434889185,1.762616933318981,58.62500000000001,46.61484434889185,1.762616933318981,0.0,46.61484434889185,19.26261693331897,58.62500000000001,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
double[] normalsArray = {
-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,};
fbn = GLBuffers.newDirectDoubleBuffer(normalsArray, 0);
gl.glNormalPointer(GL2.GL_DOUBLE, 0, fbn);
gl.glEnableClientState(GL2.GL_NORMAL_ARRAY);
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID13.bind();
texcoordArray = new float[] {
-0.802609f,2.4427083f,-0.07344237f,0.0f,-0.07344237f,2.4427083f,-0.802609f,0.0f,1.9422852f,2.4427083f,1.2131186f,0.0f,1.9422852f,0.0f,1.2131186f,2.4427083f,-1.2131186f,2.4427083f,-1.9422852f,0.0f,-1.2131186f,0.0f,-1.9422852f,2.4427083f,0.802609f,0.0f,0.07344237f,2.4427083f,0.07344237f,0.0f,0.802609f,2.4427083f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,4,4,5,5,6,6,5,5,4,4,7,7,8,8,9,9,10,10,9,9,8,8,11,11,12,12,13,13,14,14,13,13,12,12,15,15,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID23(GL2 gl){
double[] positionsArray = {
9.4375,85.9375,58.62500000000001,29.11484434889184,82.01261693331897,58.62500000000001,9.4375,0.0,58.62500000000001,50.375,85.9375,58.62500000000001,46.61484434889185,82.01261693331897,58.62500000000001,46.61484434889185,64.51261693331898,58.62500000000001,46.61484434889185,19.26261693331897,58.62500000000001,46.61484434889185,1.762616933318981,58.62500000000001,29.11484434889184,1.762616933318981,58.62500000000001,50.375,0.0,58.62500000000001,29.11484434889184,64.51261693331898,58.62500000000001,29.11484434889184,19.26261693331897,58.62500000000001,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
double[] normalsArray = {
0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,};
fbn = GLBuffers.newDirectDoubleBuffer(normalsArray, 0);
gl.glNormalPointer(GL2.GL_DOUBLE, 0, fbn);
gl.glEnableClientState(GL2.GL_NORMAL_ARRAY);
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,1,3,4,4,3,5,5,3,6,6,3,7,2,8,9,8,2,1,8,1,10,8,10,11,9,8,7,9,7,3,5,11,10,11,5,6,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 42, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID29(GL2 gl){
double[] positionsArray = {
9.4375,85.9375,58.62500000000001,19.84188801010228,85.9375,130.2533588280847,50.375,85.9375,58.62500000000001,9.4375,85.9375,162.875,19.84188801010228,85.9375,142.8783588280847,50.375,85.9375,142.8783588280847,50.375,85.9375,162.875,50.375,85.9375,130.2533588280847,9.4375,85.9375,162.875,9.4375,0.0,58.62500000000001,9.4375,0.0,162.875,9.4375,85.9375,58.62500000000001,50.375,0.0,162.875,9.4375,85.9375,162.875,9.4375,0.0,162.875,50.375,85.9375,162.875,50.375,85.9375,58.62500000000001,50.375,0.0,162.875,50.375,0.0,58.62500000000001,50.375,85.9375,162.875,50.375,85.9375,130.2533588280847,50.375,85.9375,142.8783588280847,50.375,85.9375,142.8783588280847,19.84188801010228,107.625,142.8783588280847,19.84188801010228,85.9375,142.8783588280847,107.7793880101023,107.625,142.8783588280847,107.7793880101023,85.9375,142.8783588280847,19.84188801010228,107.625,142.8783588280847,19.84188801010228,85.9375,130.2533588280847,19.84188801010228,85.9375,142.8783588280847,19.84188801010228,107.625,130.2533588280847,50.375,0.0,162.875,9.4375,0.0,58.62500000000001,50.375,0.0,58.62500000000001,9.4375,0.0,162.875,107.7793880101023,85.9375,142.8783588280847,50.375,85.9375,130.2533588280847,107.7793880101023,85.9375,130.2533588280847,50.375,85.9375,142.8783588280847,107.7793880101023,107.625,130.2533588280847,107.7793880101023,85.9375,142.8783588280847,107.7793880101023,85.9375,130.2533588280847,107.7793880101023,107.625,142.8783588280847,19.84188801010228,107.625,142.8783588280847,107.7793880101023,107.625,130.2533588280847,19.84188801010228,107.625,130.2533588280847,107.7793880101023,107.625,142.8783588280847,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
double[] normalsArray = {
-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-1.0,-0.0,-0.0,-1.0,-0.0,-0.0,-1.0,-0.0,-0.0,-1.0,-0.0,-0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,};
fbn = GLBuffers.newDirectDoubleBuffer(normalsArray, 0);
gl.glNormalPointer(GL2.GL_DOUBLE, 0, fbn);
gl.glEnableClientState(GL2.GL_NORMAL_ARRAY);
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID13.bind();
texcoordArray = new float[] {
-0.39322916f,2.4427083f,-0.82674533f,5.427223f,-2.0989583f,2.4427083f,-0.39322916f,6.7864585f,-0.82674533f,5.9532647f,-2.0989583f,5.9532647f,-2.0989583f,6.7864585f,-2.0989583f,5.427223f,-3.5807292f,6.7864585f,0.0f,2.4427083f,0.0f,6.7864585f,-3.5807292f,2.4427083f,2.0989583f,0.0f,0.39322916f,3.5807292f,0.39322916f,0.0f,2.0989583f,3.5807292f,3.5807292f,2.4427083f,3.5807292f,6.7864585f,3.5807292f,5.427223f,3.5807292f,5.9532647f,0.82674533f,4.484375f,0.82674533f,3.5807292f,4.490808f,4.484375f,4.490808f,3.5807292f,-4.484375f,5.9532647f,-3.5807292f,5.427223f,-3.5807292f,5.9532647f,-4.484375f,5.427223f,2.0989583f,6.7864585f,0.39322916f,2.4427083f,2.0989583f,2.4427083f,0.39322916f,6.7864585f,4.490808f,5.9532647f,2.0989583f,5.427223f,4.490808f,5.427223f,2.0989583f,5.9532647f,4.484375f,5.427223f,4.484375f,5.9532647f,-4.490808f,5.427223f,-4.490808f,5.9532647f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,1,1,3,3,4,4,4,4,3,3,5,5,5,5,3,3,6,6,7,7,2,2,1,1,8,8,9,9,10,10,9,9,8,8,11,11,12,12,13,13,14,14,13,13,12,12,15,15,16,16,17,10,18,9,17,10,16,16,19,17,19,17,16,16,20,18,19,17,20,18,21,19,22,15,23,20,24,21,23,20,22,15,25,22,25,22,22,15,26,23,27,24,28,25,29,26,28,25,27,24,30,27,31,28,32,29,33,30,32,29,31,28,34,31,35,32,36,33,37,34,36,33,35,32,38,35,39,36,40,19,41,18,40,19,39,36,42,37,43,4,44,38,45,1,44,38,43,4,46,39,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID37(GL2 gl){
double[] positionsArray = {
29.11484434889184,82.01261693331897,58.62500000000001,29.11484434889184,64.51261693331898,0.0,29.11484434889184,64.51261693331898,58.62500000000001,29.11484434889184,82.01261693331897,0.0,46.61484434889185,64.51261693331898,58.62500000000001,29.11484434889184,64.51261693331898,0.0,46.61484434889185,64.51261693331898,0.0,29.11484434889184,64.51261693331898,58.62500000000001,29.11484434889184,82.01261693331897,58.62500000000001,46.61484434889185,82.01261693331897,0.0,29.11484434889184,82.01261693331897,0.0,46.61484434889185,82.01261693331897,58.62500000000001,46.61484434889185,82.01261693331897,0.0,46.61484434889185,64.51261693331898,58.62500000000001,46.61484434889185,64.51261693331898,0.0,46.61484434889185,82.01261693331897,58.62500000000001,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
double[] normalsArray = {
-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,};
fbn = GLBuffers.newDirectDoubleBuffer(normalsArray, 0);
gl.glNormalPointer(GL2.GL_DOUBLE, 0, fbn);
gl.glEnableClientState(GL2.GL_NORMAL_ARRAY);
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID13.bind();
texcoordArray = new float[] {
-3.4171925f,2.4427083f,-2.6880257f,0.0f,-2.6880257f,2.4427083f,-3.4171925f,0.0f,1.9422852f,2.4427083f,1.2131186f,0.0f,1.9422852f,0.0f,1.2131186f,2.4427083f,-1.2131186f,2.4427083f,-1.9422852f,0.0f,-1.2131186f,0.0f,-1.9422852f,2.4427083f,3.4171925f,0.0f,2.6880257f,2.4427083f,2.6880257f,0.0f,3.4171925f,2.4427083f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,4,4,5,5,6,6,5,5,4,4,7,7,8,8,9,9,10,10,9,9,8,8,11,11,12,12,13,13,14,14,13,13,12,12,15,15,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID45(GL2 gl){
double[] positionsArray = {
46.61484434889185,82.01261693331897,0.0,29.11484434889184,64.51261693331898,0.0,29.11484434889184,82.01261693331897,0.0,46.61484434889185,64.51261693331898,0.0,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
double[] normalsArray = {
0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,};
fbn = GLBuffers.newDirectDoubleBuffer(normalsArray, 0);
gl.glNormalPointer(GL2.GL_DOUBLE, 0, fbn);
gl.glEnableClientState(GL2.GL_NORMAL_ARRAY);
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 6, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID51(GL2 gl){
double[] positionsArray = {
107.7793880101023,107.625,130.2533588280847,19.84188801010228,85.9375,130.2533588280847,19.84188801010228,107.625,130.2533588280847,50.375,85.9375,130.2533588280847,107.7793880101023,85.9375,130.2533588280847,19.84188801010228,85.9375,142.8783588280847,50.375,85.9375,130.2533588280847,19.84188801010228,85.9375,130.2533588280847,50.375,85.9375,142.8783588280847,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
double[] normalsArray = {
0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,-0.0,1.0,-0.0,};
fbn = GLBuffers.newDirectDoubleBuffer(normalsArray, 0);
gl.glNormalPointer(GL2.GL_DOUBLE, 0, fbn);
gl.glEnableClientState(GL2.GL_NORMAL_ARRAY);
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,3,0,4,5,6,7,6,5,8,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 15, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID57(GL2 gl){
double[] positionsArray = {
107.7793880101023,-21.5,142.8783588280847,19.84188801010228,-21.5,130.2533588280847,107.7793880101023,-21.5,130.2533588280847,19.84188801010228,-21.5,142.8783588280847,107.7793880101023,-21.5,142.8783588280847,19.84188801010228,0.1875,142.8783588280847,19.84188801010228,-21.5,142.8783588280847,50.375,0.1875,142.8783588280847,107.7793880101023,0.1875,142.8783588280847,19.84188801010228,0.1875,142.8783588280847,19.84188801010228,-21.5,130.2533588280847,19.84188801010228,-21.5,142.8783588280847,19.84188801010228,0.1875,130.2533588280847,107.7793880101023,0.1875,130.2533588280847,107.7793880101023,-21.5,142.8783588280847,107.7793880101023,-21.5,130.2533588280847,107.7793880101023,0.1875,142.8783588280847,50.375,0.1875,142.8783588280847,107.7793880101023,0.1875,130.2533588280847,50.375,0.1875,130.2533588280847,107.7793880101023,0.1875,142.8783588280847,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
double[] normalsArray = {
0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,};
fbn = GLBuffers.newDirectDoubleBuffer(normalsArray, 0);
gl.glNormalPointer(GL2.GL_DOUBLE, 0, fbn);
gl.glEnableClientState(GL2.GL_NORMAL_ARRAY);
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID13.bind();
texcoordArray = new float[] {
4.490808f,5.9532647f,0.82674533f,5.427223f,4.490808f,5.427223f,0.82674533f,5.9532647f,4.490808f,-0.8958333f,0.82674533f,0.0078125f,0.82674533f,-0.8958333f,2.0989583f,0.0078125f,4.490808f,0.0078125f,-0.0078125f,5.9532647f,0.8958333f,5.427223f,0.8958333f,5.9532647f,-0.0078125f,5.427223f,0.0078125f,5.427223f,-0.8958333f,5.9532647f,-0.8958333f,5.427223f,0.0078125f,5.9532647f,-2.0989583f,5.9532647f,-4.490808f,5.427223f,-2.0989583f,5.427223f,-4.490808f,5.9532647f,};
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,4,4,5,5,6,6,5,5,4,4,7,7,7,7,4,4,8,8,9,9,10,10,11,11,10,10,9,9,12,12,13,13,14,14,15,15,14,14,13,13,16,16,17,17,18,18,19,19,18,18,17,17,20,20,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID65(GL2 gl){
double[] positionsArray = {
50.375,0.1875,130.2533588280847,19.84188801010228,-21.5,130.2533588280847,19.84188801010228,0.1875,130.2533588280847,107.7793880101023,-21.5,130.2533588280847,107.7793880101023,0.1875,130.2533588280847,};
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
double[] normalsArray = {
0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,};
fbn = GLBuffers.newDirectDoubleBuffer(normalsArray, 0);
gl.glNormalPointer(GL2.GL_DOUBLE, 0, fbn);
gl.glEnableClientState(GL2.GL_NORMAL_ARRAY);
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,3,0,4,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 9, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID71(GL2 gl){
double[] positionsArray = DemaioMummyCoordinates.getPositionsArray();
DoubleBuffer fbv = GLBuffers.newDirectDoubleBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_DOUBLE, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
DoubleBuffer fbn = null;
double[] normalsArray = DemaioMummyCoordinates.getNormalArray();
fbn = GLBuffers.newDirectDoubleBuffer(normalsArray, 0);
gl.glNormalPointer(GL2.GL_DOUBLE, 0, fbn);
gl.glEnableClientState(GL2.GL_NORMAL_ARRAY);
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glEnable(GL2.GL_TEXTURE_2D);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
ID13.bind();
texcoordArray = DemaioMummyCoordinates.getTextCoordinatesArray();
fbt = GLBuffers.newDirectFloatBuffer(texcoordArray);
gl.glTexCoordPointer(2, GL2.GL_FLOAT, 0, fbt);
gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
int[] indices = {
0,0,1,1,2,2,1,1,0,0,3,3,4,4,5,5,6,6,5,5,4,4,7,7,8,8,9,9,10,10,9,9,8,8,11,11,12,12,13,13,14,14,13,13,12,12,15,15,16,16,17,17,18,18,17,17,16,16,19,19,20,20,21,21,22,22,21,21,20,20,23,23,24,24,25,25,26,26,25,25,24,24,27,27,28,28,29,29,30,30,29,29,28,28,31,31,32,32,33,33,34,34,33,33,32,32,35,35,36,36,37,37,38,38,37,37,36,36,39,39,40,40,41,41,42,42,41,41,40,40,43,43,44,44,45,45,46,46,45,45,44,44,47,47,48,48,49,49,50,50,49,49,48,48,51,51,52,52,53,53,54,54,53,53,52,52,55,55,56,56,57,57,58,58,57,57,56,56,59,59,60,60,61,61,62,62,61,61,60,60,63,63,64,64,65,65,66,66,65,65,64,64,67,67,68,68,69,69,70,70,69,69,68,68,71,71,72,72,73,73,74,74,73,73,72,72,75,75,76,76,77,77,78,78,77,77,76,76,79,79,80,80,81,81,82,82,81,81,80,80,83,83,84,84,85,85,86,86,87,87,88,88,89,89,88,88,87,87,90,90,91,91,92,92,93,93,92,92,91,91,94,94,95,95,96,96,97,97,96,96,95,95,98,98,99,99,100,100,101,101,100,100,99,99,102,102,103,103,104,104,105,105,104,104,103,103,106,106,107,107,108,108,109,109,108,108,107,107,110,110,111,111,112,112,113,113,112,112,111,111,114,114,115,115,116,116,117,117,116,116,115,115,118,118,119,119,120,120,121,121,120,120,119,119,122,122,123,123,124,124,125,125,124,124,123,123,126,126,127,127,128,128,129,129,130,130,131,131,132,132,131,131,130,130,133,133,134,134,135,135,136,136,135,135,134,134,137,137,138,138,139,139,140,140,139,139,138,138,141,141,142,142,143,143,144,144,145,145,146,146,147,147,146,146,145,145,148,148,149,149,150,150,151,151,150,150,149,149,152,152,153,153,154,154,155,155,154,154,153,153,156,156,157,157,158,158,159,159,158,158,157,157,160,160,161,161,162,162,163,163,162,162,161,161,164,164,165,165,166,166,167,167,166,166,165,165,168,168,169,169,170,170,171,171,170,170,169,169,172,172,173,173,174,174,175,175,174,174,173,173,176,176,177,177,178,178,179,179,178,178,177,177,180,180,181,181,182,182,183,183,182,182,181,181,184,184,185,185,186,186,187,187,186,186,185,185,188,188,189,189,190,190,191,191,190,190,189,189,192,192,193,193,194,194,195,195,196,196,197,197,198,198,197,197,196,196,199,199,200,200,201,201,202,202,201,201,200,200,203,203,204,204,205,205,206,206,205,205,204,204,207,207,208,208,209,209,210,210,211,211,212,212,213,213,212,212,211,211,214,214,215,215,216,216,217,217,216,216,215,215,218,218,219,219,220,220,221,221,220,220,219,219,222,222,223,223,224,224,225,225,224,224,223,223,226,226,227,227,228,228,229,229,228,228,227,227,230,230,231,231,232,232,233,233,232,232,231,231,234,234,235,235,236,236,237,237,236,236,235,235,238,238,239,239,240,240,241,241,240,240,239,239,242,242,243,243,244,244,245,245,244,244,243,243,246,246,247,247,248,248,249,249,248,248,247,247,250,250,251,251,252,252,253,253,252,252,251,251,254,254,255,255,256,256,257,257,256,256,255,255,258,258,259,259,260,260,261,261,260,260,259,259,262,262,263,263,264,264,265,265,264,264,263,263,266,266,267,267,268,268,269,269,270,270,271,271,272,272,271,271,270,270,273,273,274,274,275,275,276,276,275,275,274,274,277,277,278,278,279,279,280,280,279,279,278,278,281,281,282,282,283,283,284,284,285,285,286,286,287,287,286,286,285,285,288,288,289,289,290,290,291,291,290,290,289,289,292,292,293,293,294,294,295,295,294,294,293,293,296,296,297,297,298,298,299,299,298,298,297,297,300,300,301,301,302,302,303,303,302,302,301,301,304,304,305,305,306,306,307,307,306,306,305,305,308,308,309,309,310,310,311,311,310,310,309,309,312,312,313,313,314,314,315,315,314,314,313,313,316,316,317,317,318,318,319,319,318,318,317,317,320,320,321,321,322,322,323,323,322,322,321,321,324,324,325,325,326,326,327,327,326,326,325,325,328,328,329,329,330,330,331,331,330,330,329,329,332,332,333,333,334,334,335,335,334,334,333,333,336,336,337,337,338,338,339,339,338,338,337,337,340,340,341,341,342,342,343,343,342,342,341,341,344,344,345,345,346,346,347,347,346,346,345,345,348,348,349,349,350,350,351,351,352,352,353,353,354,354,353,353,352,352,355,355,356,356,357,357,358,358,357,357,356,356,359,359,360,360,361,361,362,362,361,361,360,360,363,363,364,364,365,365,366,366,367,367,368,368,369,369,368,368,367,367,370,370,371,371,372,372,373,373,372,372,371,371,374,374,375,375,376,376,377,377,376,376,375,375,378,378,379,379,380,380,381,381,380,380,379,379,382,382,383,383,384,384,385,385,384,384,383,383,386,386,387,387,388,388,389,389,388,388,387,387,390,390,391,391,392,392,393,393,392,392,391,391,394,394,395,395,396,396,397,397,396,396,395,395,398,398,399,399,400,400,401,401,400,400,399,399,402,402,403,403,404,404,405,405,404,404,403,403,406,406,407,407,408,408,409,409,410,410,411,411,412,412,411,411,410,410,413,413,414,414,415,415,416,416,415,415,414,414,417,417,418,418,419,419,420,420,419,419,418,418,421,421,422,422,423,423,424,424,423,423,422,422,425,425,426,426,427,427,428,428,427,427,426,426,429,429,430,430,431,431,432,432,431,431,430,430,433,433,434,434,435,435,436,436,435,435,434,434,437,437,438,438,439,439,440,440,441,441,442,442,443,443,442,442,441,441,444,444,445,445,446,446,447,447,446,446,445,445,448,448,449,449,450,450,451,451,450,450,449,449,452,452,453,453,454,454,455,455,456,456,457,457,458,458,457,457,456,456,459,459,460,460,461,461,462,462,461,461,460,460,463,463,464,464,465,465,466,466,465,465,464,464,467,467,468,468,469,469,470,470,469,469,468,468,471,471,472,472,473,473,474,474,473,473,472,472,475,475,476,476,477,477,478,478,477,477,476,476,479,479,480,480,481,481,482,482,481,481,480,480,483,483,484,484,485,485,486,486,485,485,484,484,487,487,488,488,489,489,490,490,489,489,488,488,491,491,492,492,493,493,494,494,493,493,492,492,495,495,496,496,497,497,498,498,499,499,500,500,501,501,502,502,503,503,504,504,503,503,502,502,505,505,506,506,507,507,508,508,507,507,506,506,509,509,510,510,511,511,512,512,511,511,510,510,513,513,514,514,515,515,516,516,515,515,514,514,517,517,518,518,519,519,520,520,519,519,518,518,521,521,522,522,523,523,524,524,523,523,522,522,525,525,526,526,527,527,528,528,527,527,526,526,529,529,530,530,531,531,532,532,533,533,534,534,535,535,534,534,533,533,536,536,537,537,538,538,539,539,538,538,537,537,540,540,541,541,542,542,543,543,542,542,541,541,544,544,545,545,546,546,547,547,548,548,549,549,550,550,549,549,548,548,551,551,552,552,553,553,554,554,553,553,552,552,555,555,556,556,557,557,558,558,557,557,556,556,559,559,560,560,561,561,562,562,561,561,560,560,563,563,564,564,565,565,566,566,565,565,564,564,567,567,568,568,569,569,570,570,569,569,568,568,571,571,572,572,573,573,574,574,573,573,572,572,575,575,576,576,577,577,578,578,577,577,576,576,579,579,580,580,581,581,582,582,581,581,580,580,583,583,584,584,585,585,586,586,587,587,588,588,589,589,588,588,587,587,590,590,591,591,592,592,593,593,594,594,595,595,596,596,595,595,594,594,597,597,598,598,599,599,600,600,599,599,598,598,601,601,602,602,603,603,604,604,603,603,602,602,605,605,606,606,607,607,608,608,607,607,606,606,609,609,610,610,611,611,612,612,611,611,610,610,613,613,614,614,615,615,616,616,615,615,614,614,617,617,618,618,619,619,620,620,619,619,618,618,621,621,622,622,623,623,624,624,625,625,626,626,627,627,626,626,625,625,628,628,629,629,630,630,631,631,630,630,629,629,632,632,633,633,634,634,635,635,634,634,633,633,636,636,637,637,638,638,639,639,640,640,641,641,642,642,641,641,640,640,643,643,644,644,645,645,646,646,645,645,644,644,647,647,648,648,649,649,650,650,649,649,648,648,651,651,652,652,653,653,654,654,653,653,652,652,655,655,656,656,657,657,658,658,657,657,656,656,659,659,660,660,661,661,662,662,661,661,660,660,663,663,664,664,665,665,666,666,665,665,664,664,667,667,668,668,669,669,670,670,669,669,668,668,671,671,672,672,673,673,674,674,673,673,672,672,675,675,676,676,677,677,678,678,679,679,680,680,681,681,680,680,679,679,682,682,683,683,684,684,685,685,686,686,687,687,688,688,687,687,686,686,689,689,690,690,691,691,692,692,691,691,690,690,693,693,694,694,695,695,696,696,695,695,694,694,697,697,698,698,699,699,700,700,699,699,698,698,701,701,702,702,703,703,704,704,703,703,702,702,705,705,706,706,707,707,708,708,707,707,706,706,709,709,710,710,711,711,712,712,711,711,710,710,713,713,714,714,715,715,716,716,717,717,718,718,719,719,718,718,717,717,720,720,721,721,722,722,723,723,722,722,721,721,724,724,725,725,726,726,727,727,726,726,725,725,728,728,729,729,730,730,731,731,732,732,733,733,734,734,733,733,732,732,735,735,736,736,737,737,738,738,737,737,736,736,739,739,740,740,741,741,742,742,741,741,740,740,743,743,744,744,745,745,746,746,745,745,744,744,747,747,748,748,749,749,750,750,749,749,748,748,751,751,752,752,753,753,754,754,753,753,752,752,755,755,756,756,757,757,758,758,757,757,756,756,759,759,760,760,761,761,762,762,761,761,760,760,763,763,764,764,765,765,766,766,765,765,764,764,767,767,768,768,769,769,770,770,771,771,772,772,773,773,772,772,771,771,774,774,775,775,776,776,777,777,778,778,779,779,780,780,779,779,778,778,781,781,782,782,783,783,784,784,783,783,782,782,785,785,786,786,787,787,788,788,787,787,786,786,789,789,790,790,791,791,792,792,791,791,790,790,793,793,794,794,795,795,796,796,795,795,794,794,797,797,798,798,799,799,800,800,799,799,798,798,801,801,802,802,803,803,804,804,803,803,802,802,805,805,806,806,807,807,808,808,809,809,810,810,811,811,810,810,809,809,812,812,813,813,814,814,815,815,814,814,813,813,816,816,817,817,818,818,819,819,818,818,817,817,820,820,821,821,822,822,823,823,824,824,825,825,826,826,825,825,824,824,827,827,828,828,829,829,830,830,829,829,828,828,831,831,832,832,833,833,834,834,833,833,832,832,835,835,836,836,837,837,838,838,837,837,836,836,839,839,840,840,841,841,842,842,841,841,840,840,843,843,844,844,845,845,846,846,845,845,844,844,847,847,848,848,849,849,850,850,849,849,848,848,851,851,852,852,853,853,854,854,853,853,852,852,855,855,856,856,857,857,858,858,859,859,860,860,861,861,860,860,859,859,862,862,863,863,864,864,865,865,866,866,867,867,868,868,867,867,866,866,869,869,870,870,871,871,872,872,871,871,870,870,873,873,874,874,875,875,876,876,875,875,874,874,877,877,878,878,879,879,880,880,879,879,878,878,881,881,882,882,883,883,884,884,883,883,882,882,885,885,886,886,887,887,888,888,887,887,886,886,889,889,890,890,891,891,892,892,893,893,894,894,895,895,894,894,893,893,896,896,897,897,898,898,899,899,898,898,897,897,900,900,901,901,902,902,903,903,904,904,905,905,906,906,905,905,904,904,907,907,908,908,909,909,910,910,909,909,908,908,911,911,912,912,913,913,914,914,913,913,912,912,915,915,916,916,917,917,918,918,917,917,916,916,919,919,920,920,921,921,922,922,921,921,920,920,923,923,924,924,925,925,926,926,925,925,924,924,927,927,928,928,929,929,930,930,929,929,928,928,931,931,932,932,933,933,934,934,935,935,936,936,937,937,938,938,939,939,940,940,939,939,938,938,941,941,942,942,943,943,944,944,943,943,942,942,945,945,946,946,947,947,948,948,947,947,946,946,949,949,950,950,951,951,952,952,951,951,950,950,953,953,954,954,955,955,956,956,955,955,954,954,957,957,958,958,959,959,960,960,961,961,962,962,963,963,962,962,961,961,964,964,965,965,966,966,967,967,968,968,969,969,970,970,969,969,968,968,971,971,972,972,973,973,974,974,973,973,972,972,975,975,976,976,977,977,978,978,977,977,976,976,979,979,980,980,981,981,982,982,981,981,980,980,983,983,984,984,985,985,986,986,985,985,984,984,987,987,988,988,989,989,990,990,991,991,992,992,993,993,994,994,995,995,996,996,995,995,994,994,997,997,998,998,999,999,1000,1000,999,999,998,998,1001,1001,1002,1002,1003,1003,1004,1004,1003,1003,1002,1002,1005,1005,1006,1006,1007,1007,1008,1008,1007,1007,1006,1006,1009,1009,1010,1010,1011,1011,1012,1012,1013,1013,1014,1014,1015,1015,1014,1014,1013,1013,1016,1016,1017,1017,1018,1018,1019,1019,1018,1018,1017,1017,1020,1020,1021,1021,1022,1022,1023,1023,1022,1022,1021,1021,1024,1024,1025,1025,1026,1026,1027,1027,1026,1026,1025,1025,1028,1028,1029,1029,1030,1030,1031,1031,1032,1032,1033,1033,1034,1034,1035,1035,1036,1036,1037,1037,1036,1036,1035,1035,1038,1038,1039,1039,1040,1040,1041,1041,1040,1040,1039,1039,1042,1042,1043,1043,1044,1044,1045,1045,1044,1044,1043,1043,1046,1046,1047,1047,1048,1048,1049,1049,1048,1048,1047,1047,1050,1050,1051,1051,1052,1052,1053,1053,1052,1052,1051,1051,1054,1054,1055,1055,1056,1056,1057,1057,1056,1056,1055,1055,1058,1058,1059,1059,1060,1060,1061,1061,1062,1062,1063,1063,1064,1064,1065,1065,1066,1066,1067,1067,1066,1066,1065,1065,1068,1068,1069,1069,1070,1070,1071,1071,1070,1070,1069,1069,1072,1072,1073,1073,1074,1074,1075,1075,1074,1074,1073,1073,1076,1076,1077,1077,1078,1078,1079,1079,1078,1078,1077,1077,1080,1080,1081,1081,1082,1082,1083,1083,1084,1084,1085,1085,1086,1086,1087,1087,1088,1088,1089,1089,1088,1088,1087,1087,1090,1090,1091,1091,1092,1092,1093,1093,1092,1092,1091,1091,1094,1094,1095,1095,1096,1096,1097,1097,1098,1098,1099,1099,1100,1100,1101,1101,1102,1102,1103,1103,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
gl.glBegin(GL2.GL_TRIANGLES);
	for (int i=0; i<indices.length-1; i+=2) {
		int vertexIndex = indices[i];
		int textureIndex = indices[i+1];
		try {
		gl.glTexCoord2f(texcoordArray[textureIndex*2], -(texcoordArray[textureIndex*2+1]));
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		gl.glArrayElement(vertexIndex);
	}
gl.glEnd();
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
}
